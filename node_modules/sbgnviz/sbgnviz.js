/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["sbgnviz"] = factory();
	else
		root["sbgnviz"] = factory();
})(self, function() {
return /******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("(function () {\n  var sbgnviz = function sbgnviz(_options) {\n    var param = {}; // The parameter to be passed to all utilities instances related to this sbgnviz instance\n\n    var optionUtilities = __webpack_require__(/*! ./utilities/option-utilities-factory */ \"./src/utilities/option-utilities-factory.js\")();\n\n    var options = optionUtilities.extendOptions(_options);\n\n    var sbgnCyInstance = __webpack_require__(/*! ./sbgn-extensions/sbgn-cy-instance-factory */ \"./src/sbgn-extensions/sbgn-cy-instance-factory.js\")(); // Utilities whose functions will be exposed seperately\n\n\n    var uiUtilities = __webpack_require__(/*! ./utilities/ui-utilities-factory */ \"./src/utilities/ui-utilities-factory.js\")();\n\n    var fileUtilities = __webpack_require__(/*! ./utilities/file-utilities-factory */ \"./src/utilities/file-utilities-factory.js\")();\n\n    var graphUtilities = __webpack_require__(/*! ./utilities/graph-utilities-factory */ \"./src/utilities/graph-utilities-factory.js\")();\n\n    var mainUtilities = __webpack_require__(/*! ./utilities/main-utilities-factory */ \"./src/utilities/main-utilities-factory.js\")();\n\n    var keyboardInputUtilities = __webpack_require__(/*! ./utilities/keyboard-input-utilities-factory */ \"./src/utilities/keyboard-input-utilities-factory.js\")(); // require keybord input utilities\n\n\n    var experimentalDataOverlay = __webpack_require__(/*! ./utilities/experimental-data-overlay */ \"./src/utilities/experimental-data-overlay.js\")(); // Utilities to be exposed as is\n\n\n    var elementUtilities = __webpack_require__(/*! ./utilities/element-utilities-factory */ \"./src/utilities/element-utilities-factory.js\")();\n\n    var undoRedoActionFunctions = __webpack_require__(/*! ./utilities/undo-redo-action-functions-factory */ \"./src/utilities/undo-redo-action-functions-factory.js\")(); // Other utilities\n\n\n    var jsonToSbgnmlConverter = __webpack_require__(/*! ./utilities/json-to-sbgnml-converter-factory */ \"./src/utilities/json-to-sbgnml-converter-factory.js\")();\n\n    var jsonToNwtConverter = __webpack_require__(/*! ./utilities/json-to-nwt-converter-factory */ \"./src/utilities/json-to-nwt-converter-factory.js\")();\n\n    var sbgnmlToJsonConverter = __webpack_require__(/*! ./utilities/sbgnml-to-json-converter-factory */ \"./src/utilities/sbgnml-to-json-converter-factory.js\")();\n\n    var nwtToJsonConverter = __webpack_require__(/*! ./utilities/nwt-to-json-converter-factory */ \"./src/utilities/nwt-to-json-converter-factory.js\")();\n\n    var tdToJsonConverter = __webpack_require__(/*! ./utilities/tab-delimited-to-json-converter-factory */ \"./src/utilities/tab-delimited-to-json-converter-factory.js\")();\n\n    var sifToJsonConverter = __webpack_require__(/*! ./utilities/sif-to-json-converter-factory */ \"./src/utilities/sif-to-json-converter-factory.js\")();\n\n    var jsonToSifConverter = __webpack_require__(/*! ./utilities/json-to-sif-converter-factory */ \"./src/utilities/json-to-sif-converter-factory.js\")();\n\n    var classes = __webpack_require__(/*! ./utilities/classes */ \"./src/utilities/classes.js\");\n\n    var tdParser = __webpack_require__(/*! ./utilities/tab-delimeted-parser */ \"./src/utilities/tab-delimeted-parser.js\");\n\n    var layoutLoader = __webpack_require__(/*! ./utilities/layout-loader-factory */ \"./src/utilities/layout-loader-factory.js\")();\n\n    var layoutToText = __webpack_require__(/*! ./utilities/layout-to-text-factory */ \"./src/utilities/layout-to-text-factory.js\")();\n\n    var cdToSbgnmlConverter = __webpack_require__(/*! ./utilities/cd-to-sbgnml-converter-factory */ \"./src/utilities/cd-to-sbgnml-converter-factory.js\")();\n\n    var sbgnmlToCdConverter = __webpack_require__(/*! ./utilities/sbgnml-to-cd-converter-factory */ \"./src/utilities/sbgnml-to-cd-converter-factory.js\")();\n\n    var sbgnmlToSbmlConverter = __webpack_require__(/*! ./utilities/sbgnml-to-sbml-converter-factory */ \"./src/utilities/sbgnml-to-sbml-converter-factory.js\")();\n\n    var sbmlToSbgnmlConverter = __webpack_require__(/*! ./utilities/sbml-to-sbgnml-converter-factory */ \"./src/utilities/sbml-to-sbgnml-converter-factory.js\")(); // Fill param object to use it utilities internally\n\n\n    param.optionUtilities = optionUtilities;\n    param.sbgnCyInstance = sbgnCyInstance;\n    param.uiUtilities = uiUtilities;\n    param.fileUtilities = fileUtilities;\n    param.graphUtilities = graphUtilities;\n    param.mainUtilities = mainUtilities;\n    param.keyboardInputUtilities = keyboardInputUtilities;\n    param.elementUtilities = elementUtilities;\n    param.undoRedoActionFunctions = undoRedoActionFunctions;\n    param.jsonToSbgnmlConverter = jsonToSbgnmlConverter;\n    param.jsonToNwtConverter = jsonToNwtConverter;\n    param.sbgnmlToJsonConverter = sbgnmlToJsonConverter;\n    param.nwtToJsonConverter = nwtToJsonConverter;\n    param.tdToJsonConverter = tdToJsonConverter;\n    param.sifToJsonConverter = sifToJsonConverter;\n    param.classes = classes;\n    param.layoutLoader = layoutLoader;\n    param.layoutToText = layoutToText;\n    param.jsonToSifConverter = jsonToSifConverter;\n    param.cdToSbgnmlConverter = cdToSbgnmlConverter;\n    param.sbgnmlToCdConverter = sbgnmlToCdConverter;\n    param.sbgnmlToSbmlConverter = sbgnmlToSbmlConverter;\n    param.sbmlToSbgnmlConverter = sbmlToSbgnmlConverter;\n    param.experimentalDataOverlay = experimentalDataOverlay; // call constructors of objects with param\n\n    sbgnCyInstance(param);\n    optionUtilities(param);\n    uiUtilities(param);\n    fileUtilities(param);\n    graphUtilities(param);\n    mainUtilities(param);\n    keyboardInputUtilities(param);\n    elementUtilities(param);\n    undoRedoActionFunctions(param);\n    jsonToSbgnmlConverter(param);\n    jsonToNwtConverter(param);\n    sbgnmlToJsonConverter(param);\n    nwtToJsonConverter(param);\n    tdToJsonConverter(param);\n    sifToJsonConverter(param);\n    layoutLoader(param);\n    layoutToText(param);\n    jsonToSifConverter(param);\n    cdToSbgnmlConverter(param);\n    sbgnmlToCdConverter(param);\n    sbgnmlToSbmlConverter(param);\n    sbmlToSbgnmlConverter(param);\n    experimentalDataOverlay(param); // set scratch pad for sbgnviz and init sbgnvizParams inside it\n\n    sbgnCyInstance.getCy().scratch('_sbgnviz', {});\n    sbgnCyInstance.getCy().scratch('_sbgnviz').sbgnvizParams = param; // Expose the api\n\n    var api = {}; // Expose elementUtilities and undoRedoActionFunctions as is, most users will not need these\n\n    api.elementUtilities = elementUtilities;\n    api.undoRedoActionFunctions = undoRedoActionFunctions; //api.experimentalDataOverlay = experimentalDataOverlay;\n    //expose utility of experimental data-overlay\n\n    for (var prop in experimentalDataOverlay) {\n      api[prop] = experimentalDataOverlay[prop];\n    } // Expose each main utility seperately\n\n\n    for (var prop in mainUtilities) {\n      api[prop] = mainUtilities[prop];\n    } // Expose each file utility seperately\n\n\n    for (var prop in fileUtilities) {\n      api[prop] = fileUtilities[prop];\n    } // Expose each file utility seperately\n\n\n    for (var prop in uiUtilities) {\n      api[prop] = uiUtilities[prop];\n    } // Expose each sbgn graph utility seperately\n\n\n    for (var prop in graphUtilities) {\n      api[prop] = graphUtilities[prop];\n    } // Expose get cy function to enable accessing related cy instance\n\n\n    api.getCy = sbgnCyInstance.getCy; // Expose some utilities directly here\n\n    api.classes = classes;\n    api.tdParser = tdParser;\n    return api;\n  };\n\n  sbgnviz.validMapProperties = __webpack_require__(/*! ./utilities/validMapProperties */ \"./src/utilities/validMapProperties.js\");\n\n  sbgnviz.register = function (_libs) {\n    var libs = {};\n    libs.jQuery = _libs.jQuery || jQuery;\n    libs.cytoscape = _libs.cytoscape || cytoscape;\n    libs.saveAs = _libs.filesaver ? _libs.filesaver.saveAs : saveAs;\n    libs.tippy = _libs.tippy || Tippy; // Set the libraries to access them from any file\n\n    var libUtilities = __webpack_require__(/*! ./utilities/lib-utilities */ \"./src/utilities/lib-utilities.js\");\n\n    libUtilities.setLibs(libs);\n\n    var sbgnRenderer = __webpack_require__(/*! ./sbgn-extensions/sbgn-cy-renderer */ \"./src/sbgn-extensions/sbgn-cy-renderer.js\");\n\n    sbgnRenderer();\n  };\n\n  if ( true && module.exports) {\n    module.exports = sbgnviz;\n  }\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/sbgn-extensions/sbgn-cy-instance-factory.js":
/*!*********************************************************!*\
  !*** ./src/sbgn-extensions/sbgn-cy-instance-factory.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var classes = __webpack_require__(/*! ../utilities/classes */ \"./src/utilities/classes.js\");\n\nvar libs = __webpack_require__(/*! ../utilities/lib-utilities */ \"./src/utilities/lib-utilities.js\").getLibs();\n\nvar jQuery = $ = libs.jQuery;\nvar cytoscape = libs.cytoscape;\nvar Tippy = libs.tippy;\n\nmodule.exports = function () {\n  var elementUtilities, graphUtilities, mainUtilities, undoRedoActionFunctions, optionUtilities, experimentalDataOverlay;\n  var refreshPaddings, options, cy;\n\n  var sbgnCyInstance = function sbgnCyInstance(param) {\n    elementUtilities = param.elementUtilities;\n    graphUtilities = param.graphUtilities;\n    experimentalDataOverlay = param.experimentalDataOverlay;\n    mainUtilities = param.mainUtilities;\n    undoRedoActionFunctions = param.undoRedoActionFunctions;\n    refreshPaddings = graphUtilities.refreshPaddings.bind(graphUtilities);\n    optionUtilities = param.optionUtilities;\n    options = optionUtilities.getOptions(); // cy = param.sbgnCyInstance.getCy();\n\n    /*\n     * Returns the coordinates of the point located on the given angle on the circle with the given centeral coordinates and radius.\n     */\n\n    var getPointOnCircle = function getPointOnCircle(centerX, centerY, radius, angleInDegree) {\n      var angleInRadian = angleInDegree * (Math.PI / 180); // Convert degree to radian\n\n      return {\n        x: radius * Math.cos(angleInRadian) + centerX,\n        y: -1 * radius * Math.sin(angleInRadian) + centerY // We multiply with -1 here because JS y coordinate sign is the oposite of the Mathamatical coordinates system\n\n      };\n    };\n    /*\n     * Generates a polygon string approximating a circle with given center, radius, start, end angles and number of points to represent the circle\n     */\n\n\n    var generateCircleString = function generateCircleString(centerX, centerY, radius, angleFrom, angleTo, numOfPoints) {\n      var circleStr = \"\";\n      var stepSize = (angleTo - angleFrom) / numOfPoints; // We will increment the current angle by step size in each iteration\n\n      var currentAngle = angleFrom; // current angle will be updated in each iteration\n\n      for (var i = 0; i < numOfPoints; i++) {\n        var point = getPointOnCircle(centerX, centerY, radius, currentAngle);\n        currentAngle += stepSize;\n        circleStr += point.x + \" \" + point.y + \" \";\n      }\n\n      return circleStr;\n    };\n    /*\n     *  Generates a string representing processes/logical operators with ports.\n     *  lineHW: Half width of line through the circle to the intersection point\n     *  shapeHW: Half width of the shape discluding the ports (It is radius for the circular shapes)\n     *  type: Type of the shape discluding the ports. Options are 'circle', 'rectangle'\n     *  orientation: Orientation of the ports Options are 'horizontal', 'vertical'\n     */\n\n\n    var generateShapeWithPortString = function generateShapeWithPortString(lineHW, shapeHW, type, orientation) {\n      var polygonStr;\n      var numOfPoints = 30; // Number of points that both halves of circle will have\n\n      if (orientation === 'horizontal') {\n        var abovePoints, belowPoints;\n\n        if (type === 'circle') {\n          abovePoints = generateCircleString(0, 0, shapeHW, 180, 0, numOfPoints);\n          belowPoints = generateCircleString(0, 0, shapeHW, 360, 180, numOfPoints);\n        } else if (type === 'rectangle') {\n          abovePoints = '-' + shapeHW + ' -' + shapeHW + ' ' + shapeHW + ' -' + shapeHW + ' ';\n          belowPoints = shapeHW + ' ' + shapeHW + ' -' + shapeHW + ' ' + shapeHW + ' ';\n        }\n\n        polygonStr = \"-1 -\" + lineHW + \" -\" + shapeHW + \" -\" + lineHW + \" \";\n        polygonStr += abovePoints;\n        polygonStr += shapeHW + \" -\" + lineHW + \" 1 -\" + lineHW + \" 1 \" + lineHW + \" \" + shapeHW + \" \" + lineHW + \" \";\n        polygonStr += belowPoints;\n        polygonStr += \"-\" + shapeHW + \" \" + lineHW + \" -1 \" + lineHW;\n      } else {\n        var leftPoints, rightPoints;\n\n        if (type === 'circle') {\n          leftPoints = generateCircleString(0, 0, shapeHW, 90, 270, numOfPoints);\n          rightPoints = generateCircleString(0, 0, shapeHW, -90, 90, numOfPoints);\n        } else if (type === 'rectangle') {\n          leftPoints = '-' + shapeHW + ' -' + shapeHW + ' -' + shapeHW + ' ' + shapeHW + ' ';\n          rightPoints = shapeHW + ' ' + shapeHW + ' ' + shapeHW + ' -' + shapeHW + ' ';\n        }\n\n        polygonStr = \"-\" + lineHW + \" -\" + 1 + \" -\" + lineHW + \" -\" + shapeHW + \" \";\n        polygonStr += leftPoints;\n        polygonStr += \"-\" + lineHW + \" \" + shapeHW + \" -\" + lineHW + \" 1 \" + lineHW + \" 1 \" + lineHW + \" \" + shapeHW + \" \";\n        polygonStr += rightPoints;\n        polygonStr += lineHW + \" -\" + shapeHW + \" \" + lineHW + \" -1\";\n      }\n\n      return polygonStr;\n    }; // Note that in ChiSE this function is in a seperate file but in the viewer it has just 2 methods and so it is located in this file\n\n\n    function registerUndoRedoActions() {\n      // create or get the undo-redo instance\n      var ur = cy.undoRedo(); // register general actions\n      // register add remove actions\n\n      ur.action(\"deleteElesSimple\", undoRedoActionFunctions.deleteElesSimple, undoRedoActionFunctions.restoreEles);\n      ur.action(\"deleteNodesSmart\", undoRedoActionFunctions.deleteNodesSmart, undoRedoActionFunctions.restoreEles);\n      ur.action(\"setPortsOrdering\", undoRedoActionFunctions.setPortsOrdering, undoRedoActionFunctions.setPortsOrdering); //experimental data ovarlay\n\n      ur.action(\"removeAll\", undoRedoActionFunctions.removeAll, undoRedoActionFunctions.restoreAll);\n      ur.action(\"hideExperiment\", undoRedoActionFunctions.hideExp, undoRedoActionFunctions.unhideExp);\n      ur.action(\"unhideExperiment\", undoRedoActionFunctions.unhideExp, undoRedoActionFunctions.hideExp);\n      ur.action(\"hideFile\", undoRedoActionFunctions.hideFile, undoRedoActionFunctions.hideFileUndo);\n      ur.action(\"unhideFile\", undoRedoActionFunctions.unhideFile, undoRedoActionFunctions.unhideFileUndo);\n      ur.action(\"removeExperiment\", undoRedoActionFunctions.removeExp, undoRedoActionFunctions.addExp);\n      ur.action(\"removeFile\", undoRedoActionFunctions.removeFile, undoRedoActionFunctions.addFile);\n      ur.action(\"expButtonChange\", undoRedoActionFunctions.expButtonChange, undoRedoActionFunctions.expButtonChange);\n      ur.action(\"fileButtonChangeHide\", undoRedoActionFunctions.fileButtonChangeHide, undoRedoActionFunctions.fileButtonChangeUnHide);\n      ur.action(\"fileButtonChangeUnHide\", undoRedoActionFunctions.fileButtonChangeUnHide, undoRedoActionFunctions.fileButtonChangeHide); //ur.action(\"expButtonUnhide\", undoRedoActionFunctions.changeExpButton2, undoRedoActionFunctions.expButtonHide);\n      //ur.action(\"parseData\", undoRedoActionFunctions.parseData, undoRedoActionFunctions.removeFile);\n    }\n\n    function showTooltip(event) {\n      var node = event.target || event.cyTarget;\n\n      var canHaveTooltip = function canHaveTooltip(node) {\n        return elementUtilities.isSIFNode(node) || node.data(\"tooltip\") !== null;\n      };\n\n      if (!canHaveTooltip(node)) {\n        return;\n      }\n\n      var ref; // used only for positioning\n\n      var pos = event.position || event.cyPosition;\n      var pan = cy.pan();\n      var zoom = cy.zoom();\n      var infobox = classes.AuxiliaryUnit.checkPoint(pos.x, pos.y, node, 0);\n      var tooltipContent;\n\n      if (!infobox) {\n        tooltipContent = node.data('tooltip');\n\n        if (tooltipContent == undefined || tooltipContent == '') {\n          return;\n        }\n\n        ref = node.popperRef();\n      } else {\n        tooltipContent = infobox['tooltip'];\n\n        if (tooltipContent == undefined) {\n          return;\n        }\n\n        var modelPos = classes.AuxiliaryUnit.getAbsoluteCoord(infobox, cy);\n        var modelW = infobox.bbox.w;\n        var modelH = infobox.bbox.h;\n        var renderedW = modelW * zoom;\n        var renderedH = modelH * zoom;\n        modelPos.x -= modelW / 2;\n        modelPos.y -= modelH / 2;\n        var renderedPos = elementUtilities.convertToRenderedPosition(modelPos, pan, zoom);\n        var renderedDims = {\n          w: renderedW,\n          h: renderedH\n        };\n        ref = node.popperRef({\n          renderedPosition: function renderedPosition() {\n            return renderedPos;\n          },\n          renderedDimensions: function renderedDimensions() {\n            return renderedDims;\n          }\n        });\n      }\n\n      var placement = infobox ? infobox.anchorSide : 'bottom';\n      var destroyTippy;\n      var tippy = Tippy.one(ref, {\n        content: function () {\n          var content = document.createElement('div');\n          content.style['font-size'] = 12 * zoom + 'px';\n          content.innerHTML = tooltipContent;\n          return content;\n        }(),\n        trigger: 'manual',\n        hideOnClick: true,\n        arrow: true,\n        placement: placement,\n        onHidden: function onHidden() {\n          cy.off('pan zoom', destroyTippy);\n          node.off('position', destroyTippy);\n          cy.off('tapdrag', destroyTippy);\n        }\n      });\n\n      destroyTippy = function destroyTippy() {\n        tippy.destroy();\n      };\n\n      cy.on('pan zoom', destroyTippy);\n      node.on('position', destroyTippy);\n      cy.on('tapdrag', destroyTippy);\n      setTimeout(function () {\n        return tippy.show();\n      }, 250);\n    }\n\n    function bindCyEvents() {\n      cy.on('tapdragover', 'node', function (event) {\n        var waitDuration = 200;\n        var nodeTapdragout;\n        var currEvent = event;\n        var node = currEvent.target || currEvent.cyTarget;\n        var inQueue = true;\n\n        var clearNodeEvent = function clearNodeEvent() {\n          if (nodeTapdragout) {\n            node.off('tapdragout', nodeTapdragout);\n          }\n\n          if (nodeTapdrag) {\n            node.off('tapdrag', nodeTapdrag);\n          }\n        };\n\n        var getShowTooltipAsycn = function getShowTooltipAsycn() {\n          return setTimeout(function () {\n            showTooltip(currEvent);\n            inQueue = false;\n          }, waitDuration);\n        };\n\n        var showTooltipAsycn = getShowTooltipAsycn();\n        node.on('tapdragout', nodeTapdragout = function nodeTapdragout(e) {\n          clearTimeout(showTooltipAsycn);\n          clearNodeEvent();\n        });\n        node.on('tapdrag', nodeTapdrag = function nodeTapdrag(e) {\n          currEvent = e;\n\n          if (!inQueue) {\n            showTooltipAsycn = getShowTooltipAsycn();\n            inQueue = true;\n          }\n        });\n      });\n      cy.on('tapend', 'node', function (event) {\n        cy.style().update();\n      });\n      cy.on(\"expandcollapse.beforecollapse\", \"node\", function (event) {\n        var node = this; //The children info of complex nodes should be shown when they are collapsed\n\n        if (node._private.data[\"class\"].startsWith(\"complex\")) {\n          //The node is being collapsed store infolabel to use it later\n          var infoLabel = elementUtilities.getInfoLabel(node);\n          node._private.data.infoLabel = infoLabel;\n        }\n      });\n      cy.on(\"expandcollapse.aftercollapse\", \"node\", function (event) {\n        var node = this; // The width and height of just collapsed nodes should be 36, but they are supposed to be resizable. Therefore, we\n        // set their data('bbox') accordingly. We do not store their existing bbox.w and bbox.h because they have no significance for compounds (for now).\n\n        cy.startBatch();\n        var bbox = node.data('bbox');\n        bbox.w = 36;\n        bbox.h = 36;\n        node.data('bbox', bbox);\n        cy.endBatch();\n      });\n      cy.on(\"expandcollapse.beforeexpand\", \"node\", function (event) {\n        var node = this;\n        node.removeData(\"infoLabel\");\n      });\n      cy.on(\"expandcollapse.afterexpand\", \"node\", function (event) {\n        var node = this;\n        cy.nodes().updateCompoundBounds();\n\n        if (!options.recalculateOnComplexityManagement) {\n          cy.style().update();\n        } //Don't show children info when the complex node is expanded\n\n\n        if (node._private.data[\"class\"].startsWith(\"complex\")) {\n          node.removeStyle('content');\n        }\n      });\n      cy.on(\"beforeDo\", function (e, name, args) {\n        if (name == \"layout\" || name == \"collapse\" || name == \"expand\" || name == \"collapseRecursively\" || name == \"expandRecursively\" || name == \"batch\" && (args.length > 0 && args[0]['name'] == \"thinBorder\" || args.length > 0 && args[0]['name'] == \"thickenBorder\")) {\n          var parents = cy.elements(\":parent\").jsons(); // parent nodes\n\n          var simples = cy.elements().not(\":parent\").jsons(); // simple nodes and edges\n\n          var allElements = parents.concat(simples); // all elements\n\n          args.allElements = allElements;\n          var ports = {};\n          cy.nodes().forEach(function (node) {\n            if (elementUtilities.canHavePorts(node)) {\n              ports[node.id()] = JSON.parse(JSON.stringify(node.data(\"ports\")));\n            }\n          });\n          args.ports = ports;\n          args.viewport = {\n            pan: JSON.parse(JSON.stringify(cy.pan())),\n            zoom: cy.zoom()\n          };\n          if (name == \"layout\") mainUtilities.beforePerformLayout();\n        }\n      });\n      cy.on(\"beforeRedo\", function (e, name, args) {\n        if (name == \"layout\" || name == \"collapse\" || name == \"expand\" || name == \"collapseRecursively\" || name == \"expandRecursively\" || name == \"batch\" && (args.length > 0 && args[0]['name'] == \"thinBorder\" || args.length > 0 && args[0]['name'] == \"thickenBorder\")) {\n          var parents = cy.elements(\":parent\").jsons(); // parent nodes\n\n          var simples = cy.elements().not(\":parent\").jsons(); // simple nodes and edges\n\n          var allElements = parents.concat(simples); // all elements\n\n          args.allElements2 = allElements;\n          var ports = {};\n          cy.nodes().forEach(function (node) {\n            if (elementUtilities.canHavePorts(node)) {\n              ports[node.id()] = JSON.parse(JSON.stringify(node.data(\"ports\")));\n            }\n          });\n          args.ports2 = ports;\n          args.viewport2 = {\n            pan: JSON.parse(JSON.stringify(cy.pan())),\n            zoom: cy.zoom()\n          };\n        }\n      });\n      cy.on(\"afterDo\", function (e, name, args, res) {\n        if (name == \"layout\" || name == \"collapse\" || name == \"expand\" || name == \"collapseRecursively\" || name == \"expandRecursively\" || name == \"batch\" && (args.length > 0 && args[0]['name'] == \"thinBorder\" || args.length > 0 && args[0]['name'] == \"thickenBorder\")) {\n          res.allElements = args.allElements;\n          res.ports = args.ports;\n          res.viewport = args.viewport;\n        }\n      });\n      cy.on(\"afterRedo\", function (e, name, args, res) {\n        if (name == \"layout\" || name == \"collapse\" || name == \"expand\" || name == \"collapseRecursively\" || name == \"expandRecursively\" || name == \"batch\" && (args.length > 0 && args[0]['name'] == \"thinBorder\" || args.length > 0 && args[0]['name'] == \"thickenBorder\")) {\n          res.allElements = args.allElements2;\n          res.ports = args.ports2;\n          res.viewport = args.viewport2;\n          cy.json({\n            flatEles: true,\n            elements: args.allElements\n          });\n          cy.batch(function () {\n            cy.nodes().forEach(function (node) {\n              if (elementUtilities.canHavePorts(node)) {\n                node.data(\"ports\", args.ports[node.id()]);\n              }\n            });\n          });\n          cy.pan(args.viewport[\"pan\"]);\n          cy.zoom(args.viewport[\"zoom\"]);\n        }\n      });\n      cy.on(\"beforeUndo\", function (e, name, args) {\n        if (name == \"layout\" || name == \"collapse\" || name == \"expand\" || name == \"collapseRecursively\" || name == \"expandRecursively\" || name == \"batch\" && (args.length > 0 && args[0]['name'] == \"thinBorder\" || args.length > 0 && args[0]['name'] == \"thickenBorder\")) {\n          var parents = cy.elements(\":parent\").jsons(); // parent nodes\n\n          var simples = cy.elements().not(\":parent\").jsons(); // simple nodes and edges\n\n          var allElements = parents.concat(simples); // all elements\n\n          args.allElements2 = allElements;\n          var ports = {};\n          cy.nodes().forEach(function (node) {\n            if (elementUtilities.canHavePorts(node)) {\n              ports[node.id()] = JSON.parse(JSON.stringify(node.data(\"ports\")));\n            }\n          });\n          args.ports2 = ports;\n          args.viewport2 = {\n            pan: JSON.parse(JSON.stringify(cy.pan())),\n            zoom: cy.zoom()\n          };\n        }\n      });\n      cy.on(\"afterUndo\", function (e, name, args, res) {\n        if (name == \"layout\" || name == \"collapse\" || name == \"expand\" || name == \"collapseRecursively\" || name == \"expandRecursively\" || name == \"batch\" && (args.length > 0 && args[0]['name'] == \"thinBorder\" || args.length > 0 && args[0]['name'] == \"thickenBorder\")) {\n          res.allElements = args.allElements2;\n          res.ports = args.ports2;\n          res.viewport = args.viewport2;\n          cy.json({\n            flatEles: true,\n            elements: args.allElements\n          });\n          cy.batch(function () {\n            cy.nodes().forEach(function (node) {\n              if (elementUtilities.canHavePorts(node)) {\n                node.data(\"ports\", args.ports[node.id()]);\n              }\n            });\n          });\n          cy.pan(args.viewport[\"pan\"]);\n          cy.zoom(args.viewport[\"zoom\"]);\n        }\n      });\n      cy.on('layoutstop', function (event) {\n        /*\n        * 'preset' layout is called to give the initial positions of nodes by sbgnviz.\n        * Seems like 'grid' layout is called by Cytoscape.js core in loading graphs.\n        * If the layout is not one of these (normally it is supposed to be 'cose-bilkent')\n        * and ports are enabled call 'elementUtilities.changePortsOrientationAfterLayout()'\n        */\n        if (event.layout.options.name !== 'preset' && event.layout.options.name !== 'grid') {\n          if (graphUtilities.portsEnabled === true) {\n            elementUtilities.changePortsOrientationAfterLayout();\n          }\n        }\n      });\n      $(document).on('updateGraphEnd', function (event, _cy, isLayoutRequired, callback) {\n        // if the event is not triggered for this cy instance return directly\n        if (_cy != cy) {\n          return;\n        }\n\n        var setCompoundInfoboxes = function setCompoundInfoboxes(node, isLayoutRequired, cyInstance) {\n          if (cyInstance == undefined) return;\n\n          if (node.data().infoboxCalculated) {\n            return;\n          } else if (node.isParent()) {\n            node.children().forEach(function (childNode) {\n              setCompoundInfoboxes(childNode, isLayoutRequired, cyInstance);\n            });\n          }\n\n          node.data(\"infoboxCalculated\", true);\n          node.data('auxunitlayouts', {}); // for each statesandinfos\n\n          var correctInfoBoxCoord = true;\n\n          for (var i = 0; i < node.data('statesandinfos').length; i++) {\n            var statesandinfos = node.data('statesandinfos')[i];\n            var bbox = statesandinfos.bbox;\n            var infoBoxOnNode = classes.AuxiliaryUnit.setAnchorSide(statesandinfos, node);\n            correctInfoBoxCoord = correctInfoBoxCoord && infoBoxOnNode;\n          }\n\n          var statesToAdd = [];\n\n          for (var i = 0; i < node.data('statesandinfos').length; i++) {\n            var statesandinfos = node.data('statesandinfos')[i];\n            var bbox = statesandinfos.bbox;\n\n            if ((isLayoutRequired === undefined || !isLayoutRequired) && correctInfoBoxCoord) {\n              classes.AuxiliaryUnit.setAnchorSide(statesandinfos, node); //var fileLoadParam = {extraPadding:  Number(node.data().originalPadding)};\n\n              var cordResult = classes.AuxiliaryUnit.convertToRelativeCoord(statesandinfos, bbox.x + bbox.w / 2, bbox.y + bbox.h / 2, cyInstance, node);\n              statesandinfos.bbox.x = cordResult.x;\n              statesandinfos.bbox.y = cordResult.y;\n              statesandinfos.isDisplayed = true;\n              var location = statesandinfos.anchorSide; // top bottom right left\n\n              var layouts = node.data('auxunitlayouts');\n\n              if (!layouts[location]) {\n                // layout doesn't exist yet for this location\n                layouts[location] = classes.AuxUnitLayout.construct(node, location);\n              } // populate the layout of this side\n\n\n              classes.AuxUnitLayout.addAuxUnit(layouts[location], cyInstance, statesandinfos, undefined, true); //positions are precomputed\n            } else {\n              if (!node.data('auxunitlayouts')) {\n                // ensure minimal initialization\n                node.data('auxunitlayouts', {});\n              }\n\n              var location = classes.AuxUnitLayout.selectNextAvailable(node, cy);\n\n              if (!node.data('auxunitlayouts')[location]) {\n                node.data('auxunitlayouts')[location] = classes.AuxUnitLayout.construct(node, location);\n              }\n\n              var layout = node.data('auxunitlayouts')[location];\n              statesandinfos.anchorSide = location;\n\n              switch (location) {\n                case \"top\":\n                  statesandinfos.bbox.y = 0;\n                  break;\n\n                case \"bottom\":\n                  statesandinfos.bbox.y = 100;\n                  break;\n\n                case \"left\":\n                  statesandinfos.bbox.x = 0;\n                  break;\n\n                case \"right\":\n                  statesandinfos.bbox.x = 100;\n                  break;\n              }\n\n              classes.AuxUnitLayout.addAuxUnit(layout, cyInstance, statesandinfos);\n            }\n          }\n\n          if (isLayoutRequired === true) {\n            var locations = classes.AuxUnitLayout.checkFit(node, cy);\n\n            if (locations !== undefined && locations.length > 0) {\n              classes.AuxUnitLayout.fitUnits(node, cy, locations);\n            }\n          }\n        }; // list all entitytypes andstore them in the global scratch\n        // only stateful EPN (complex, macromolecule or nucleic acid) are concerned\n        // following is unapplied due to performance decreasing, adding something like 20% time on load\n\n        /*cy.startBatch();\n        var entityHash = {};\n        cy.nodes(\"[class='complex'], [class='macromolecule'], [class='nucleic acid feature']\").forEach(function(node) {\n          // identify an entity by its label AND class\n          var label = node.data('label');\n          var _class = node.data('class');\n          var id=label+'-'+_class;\n          if(!entityHash.hasOwnProperty(id)) { // create entitytype if doesn't already exist\n            entityHash[id] = new classes.EntityType(id);\n          }\n          var currentEntityType = entityHash[id];\n          currentEntityType.EPNs.push(node); // assigne the current element to its corresponding entitytype\n           // collect all stateVariables of the current element, we need to assign StateVariableDefinitions to them\n          for(var i=0; i < node.data('statesandinfos').length; i++) {\n            var statesandinfos = node.data('statesandinfos')[i];\n            if(statesandinfos instanceof classes.StateVariable) { // stateVariable found\n              var currentStateVariable = statesandinfos;\n              currentEntityType.assignStateVariable(currentStateVariable);\n            }\n          }\n        });\n        cy.endBatch();\n        cy.scratch('_sbgnviz', {SBGNEntityTypes: entityHash});*/\n        // assign statesandinfos to their layout\n\n\n        cy.style().update(); // cy.startBatch();\n\n        cy.nodes().forEach(function (node) {\n          setCompoundInfoboxes(node, isLayoutRequired, cy);\n        });\n\n        if (callback) {\n          callback();\n        } //cy.endBatch();\n\n      });\n    }\n\n    var selectionColor = '#d67614';\n    var sbgnStyleSheet = cytoscape.stylesheet().selector(\"node\").css({\n      'text-valign': 'center',\n      'text-halign': 'center',\n      'text-opacity': 1,\n      'opacity': 1,\n      'padding': 0\n    }).selector(\"node[class]\").css({\n      'shape': function shape(ele) {\n        return elementUtilities.getCyShape(ele);\n      },\n      'content': function content(ele) {\n        return elementUtilities.getElementContent(ele);\n      },\n      'font-size': function fontSize(ele) {\n        // If node labels are expected to be adjusted automatically or element cannot have label\n        // or ele.data('font-size') is not defined return elementUtilities.getLabelTextSize()\n        // else return ele.data('font-size')\n        var opt = options.adjustNodeLabelFontSizeAutomatically;\n        var adjust = typeof opt === 'function' ? opt() : opt;\n\n        if (!adjust && ele.data('font-size') != undefined) {\n          return ele.data('font-size');\n        }\n\n        return elementUtilities.getLabelTextSize(ele);\n      }\n    }).selector(\"node[class][font-family]\").style({\n      'font-family': function fontFamily(ele) {\n        return ele.data('font-family');\n      }\n    }).selector(\"node[class][font-style]\").style({\n      'font-style': function fontStyle(ele) {\n        return ele.data('font-style');\n      }\n    }).selector(\"node[class][font-weight]\").style({\n      'font-weight': function fontWeight(ele) {\n        return ele.data('font-weight');\n      }\n    }).selector(\"node[class][color]\").style({\n      'color': function color(ele) {\n        return ele.data('color');\n      }\n    }).selector(\"node[class][background-color]\").style({\n      'background-color': function backgroundColor(ele) {\n        return ele.data('background-color');\n      }\n    }).selector(\"node[class][background-opacity]\").style({\n      'background-opacity': function backgroundOpacity(ele) {\n        return ele.data('background-opacity');\n      }\n    }).selector(\"node[class][border-width]\").style({\n      'border-width': function borderWidth(ele) {\n        return ele.data('border-width');\n      }\n    }).selector(\"node[class][border-color]\").style({\n      'border-color': function borderColor(ele) {\n        return ele.data('border-color');\n      }\n    }).selector(\"node[class][text-wrap]\").style({\n      'text-wrap': function textWrap(ele) {\n        var opt = options.fitLabelsToNodes;\n        var isFit = typeof opt === 'function' ? opt() : opt;\n\n        if (isFit) {\n          return 'ellipsis';\n        }\n\n        return ele.data('text-wrap');\n      }\n    }).selector(\"node\").style({\n      'text-max-width': function textMaxWidth(ele) {\n        var opt = options.fitLabelsToNodes;\n        var isFit = typeof opt === 'function' ? opt() : opt;\n\n        if (isFit) {\n          return ele.width();\n        }\n\n        return '1000px';\n      }\n    }).selector(\"edge[class][line-color]\").style({\n      'line-color': function lineColor(ele) {\n        return ele.data('line-color');\n      },\n      'source-arrow-color': function sourceArrowColor(ele) {\n        return ele.data('line-color');\n      },\n      'target-arrow-color': function targetArrowColor(ele) {\n        return ele.data('line-color');\n      }\n    }).selector(\"edge[class][width]\").style({\n      'width': function width(ele) {\n        return ele.data('width');\n      }\n    }).selector(\"node[class='association'],[class='dissociation'],[class='and'],[class='or'],[class='not'],[class='process'],[class='omitted process'],[class='uncertain process']\").css({\n      'shape-polygon-points': function shapePolygonPoints(ele) {\n        if (graphUtilities.portsEnabled === true && ele.data('ports').length === 2) {\n          // We assume that the ports of the edge are symetric according to the node center so just checking one port is enough for us\n          var port = ele.data('ports')[0]; // If the ports are located above/below of the node then the orientation is 'vertical' else it is 'horizontal'\n\n          var orientation = port.x === 0 ? 'vertical' : 'horizontal'; // The half width of the actual shape discluding the ports\n\n          var shapeHW = orientation === 'vertical' ? 50 / Math.abs(port.y) : 50 / Math.abs(port.x); // Get the class of the node\n\n          var _class = ele.data('class'); // If class is one of process, omitted process or uncertain process then the type of actual shape is 'rectangle' else it is 'circle'\n\n\n          var type = _class.endsWith('process') ? 'rectangle' : 'circle'; // Generate a polygon string with above parameters and return it\n\n          return generateShapeWithPortString(0.01, shapeHW, type, orientation);\n        } // This element is not expected to have a poygonial shape (Because it does not have 2 ports) just return a trivial string here not to have a run time bug\n\n\n        return '-1 -1 1 1 1 0';\n      }\n    }).selector(\"node[class='perturbing agent']\").css({\n      'shape-polygon-points': '-1, -1,   -0.5, 0,  -1, 1,   1, 1,   0.5, 0, 1, -1'\n    }).selector(\"node[class='tag']\").css({\n      'shape-polygon-points': '-1, -1,   0.25, -1,   1, 0,    0.25, 1,    -1, 1'\n    }).selector(\"node:parent[class^='complex']\") // start with complex\n    .css({\n      'text-valign': 'bottom',\n      'text-halign': 'center',\n      'text-margin-y': elementUtilities.getComplexMargin,\n      'padding': elementUtilities.getComplexPadding,\n      'compound-sizing-wrt-labels': 'exclude'\n    }).selector(\"node[class='compartment']\").css({\n      'text-valign': 'bottom',\n      'text-halign': 'center',\n      'text-margin-y': -1 * options.extraCompartmentPadding,\n      'compound-sizing-wrt-labels': 'exclude'\n    }).selector(\"node:parent[class='compartment']\").css({\n      'padding': function padding() {\n        return graphUtilities.getCompoundPaddings() + options.extraCompartmentPadding;\n      }\n    }).selector(\"node[class='submap']\").css({\n      'text-valign': 'bottom',\n      'text-halign': 'center',\n      'text-margin-y': -1 * options.extraCompartmentPadding,\n      'compound-sizing-wrt-labels': 'exclude'\n    }).selector(\"node:parent[class='submap'],[class='topology group']\").css({\n      'padding': function padding() {\n        return graphUtilities.getCompoundPaddings() + options.extraCompartmentPadding;\n      }\n    }).selector(\"node:childless[bbox]\").css({\n      'width': 'data(bbox.w)',\n      'height': 'data(bbox.h)'\n    }).selector(\"node:parent[minHeight]\").css({\n      'min-height': function minHeight(ele) {\n        if (graphUtilities.compoundSizesConsidered) {\n          return ele.data('minHeight');\n        }\n\n        return 0;\n      }\n    }).selector(\"node:parent[minHeightBiasTop]\").css({\n      'min-height-bias-top': function minHeightBiasTop(ele) {\n        var min = parseFloat(ele.data('minHeightBiasTop'));\n        return (min >= 0 ? min : 100) + '%';\n      }\n    }).selector(\"node:parent[minHeightBiasBottom]\").css({\n      'min-height-bias-bottom': function minHeightBiasBottom(ele) {\n        var min = parseFloat(ele.data('minHeightBiasBottom'));\n        return (min >= 0 ? min : 100) + '%';\n      }\n    }).selector(\"node:parent[minWidth]\").css({\n      'min-width': function minWidth(ele) {\n        if (graphUtilities.compoundSizesConsidered) {\n          return ele.data('minWidth');\n        }\n\n        return 0;\n      }\n    }).selector(\"node:parent[minWidthBiasLeft]\").css({\n      'min-width-bias-left': function minWidthBiasLeft(ele) {\n        var min = parseFloat(ele.data('minWidthBiasLeft'));\n        return (min >= 0 ? min : 100) + '%';\n      }\n    }).selector(\"node:parent[minWidthBiasRight]\").css({\n      'min-width-bias-right': function minWidthBiasRight(ele) {\n        var min = parseFloat(ele.data('minWidthBiasRight'));\n        return (min >= 0 ? min : 100) + '%';\n      }\n    }).selector(\"node.cy-expand-collapse-collapsed-node\").css({\n      'border-style': 'dashed'\n    }).selector(\"node:selected\").css({\n      'border-color': selectionColor,\n      'target-arrow-color': '#000',\n      'text-outline-color': '#000',\n      'border-width': function borderWidth(ele) {\n        return Math.max(parseFloat(ele.data('border-width')) + 2, 3);\n      }\n    }).selector(\"node:active\").css({\n      'background-opacity': 0.7,\n      'overlay-color': selectionColor,\n      'overlay-padding': '14'\n    }).selector(\"edge\").css({\n      'curve-style': 'bezier',\n      'target-arrow-fill': function targetArrowFill(ele) {\n        return elementUtilities.getCyTargetArrowFill(ele);\n      },\n      'source-arrow-fill': 'hollow',\n      'text-border-color': function textBorderColor(ele) {\n        if (ele.selected()) {\n          return selectionColor;\n        }\n\n        return ele.css('line-color');\n      },\n      'color': function color(ele) {\n        if (ele.selected()) {\n          return selectionColor;\n        }\n\n        return ele.css('line-color');\n      },\n      'arrow-scale': 1.25\n    }).selector(\"edge.cy-expand-collapse-meta-edge\").css({\n      'line-color': '#C4C4C4',\n      'source-arrow-color': '#C4C4C4',\n      'target-arrow-color': '#C4C4C4'\n    }).selector(\"edge:selected\").css({\n      'line-color': selectionColor,\n      'source-arrow-color': selectionColor,\n      'target-arrow-color': selectionColor,\n      'width': function width(ele) {\n        return Math.max(parseFloat(ele.data('width')) + 2, 3);\n      }\n    }).selector(\"edge:active\").css({\n      'background-opacity': 0.7,\n      'overlay-color': selectionColor,\n      'overlay-padding': '8'\n    }).selector(\"edge[cardinality > 0]\").css({\n      'text-rotation': 'autorotate',\n      'text-background-shape': 'rectangle',\n      'text-border-opacity': '1',\n      'text-border-width': '1',\n      'text-background-color': 'white',\n      'text-background-opacity': '1'\n    }).selector(\"edge[class='consumption'][cardinality > 0]\").css({\n      'source-label': function sourceLabel(ele) {\n        return '' + ele.data('cardinality');\n      },\n      'source-text-margin-y': '-10',\n      'source-text-offset': '18',\n      'font-size': '13'\n    }).selector(\"edge[class='production'][cardinality > 0]\").css({\n      'target-label': function targetLabel(ele) {\n        return '' + ele.data('cardinality');\n      },\n      'target-text-margin-y': '-10',\n      'target-text-offset': '18',\n      'font-size': '13'\n    }).selector(\"edge[class]\").css({\n      'target-arrow-shape': function targetArrowShape(ele) {\n        return elementUtilities.getCyArrowShape(ele);\n      },\n      'source-arrow-shape': 'none',\n      'source-endpoint': function sourceEndpoint(ele) {\n        return elementUtilities.getEndPoint(ele, 'source');\n      },\n      'target-endpoint': function targetEndpoint(ele) {\n        return elementUtilities.getEndPoint(ele, 'target');\n      },\n      'line-style': function lineStyle(ele) {\n        return elementUtilities.getArrayLineStyle(ele);\n      }\n    }).selector(\"core\").css({\n      'selection-box-color': selectionColor,\n      'selection-box-opacity': '0.2',\n      'selection-box-border-color': selectionColor\n    });\n    var sbgnNetworkContainer = $(options.networkContainerSelector); // create and init cytoscape:\n\n    cytoscape({\n      container: sbgnNetworkContainer,\n      style: sbgnStyleSheet,\n      showOverlay: false,\n      minZoom: 0.125,\n      maxZoom: 16,\n      boxSelectionEnabled: true,\n      motionBlur: true,\n      wheelSensitivity: 0.1,\n      ready: function ready() {\n        cy = this; // If undoable register undo/redo actions\n\n        if (options.undoable) {\n          registerUndoRedoActions();\n        }\n\n        bindCyEvents();\n      }\n    });\n  };\n\n  sbgnCyInstance.getCy = function () {\n    return cy;\n  };\n\n  return sbgnCyInstance;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/sbgn-extensions/sbgn-cy-instance-factory.js\n");

/***/ }),

/***/ "./src/sbgn-extensions/sbgn-cy-renderer.js":
/*!*************************************************!*\
  !*** ./src/sbgn-extensions/sbgn-cy-renderer.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Render sbgn specific shapes which are not supported by cytoscape.js core\n */\nvar libs = __webpack_require__(/*! ../utilities/lib-utilities */ \"./src/utilities/lib-utilities.js\").getLibs();\n\nvar jQuery = $ = libs.jQuery;\nvar cytoscape = libs.cytoscape;\nvar cyMath = math = cytoscape.math;\nvar cyBaseNodeShapes = cytoscape.baseNodeShapes;\nvar cyStyleProperties = cytoscape.styleProperties;\n\nvar classes = __webpack_require__(/*! ../utilities/classes */ \"./src/utilities/classes.js\");\n\nmodule.exports = function () {\n  var $$ = cytoscape;\n  /*\n  * Taken from cytoscape.js and modified so that it can be utilized from sbgnviz\n  * in a flexable way. It is needed because the sbgnviz shapes would need to stroke\n  * border more than once as they would have infoboxes, multimers etc.\n  * Extends the style properties of node with the given ones then strokes the border.\n  * Would needed to be slightly updated during cytoscape upgrades if related function in\n  * Cytoscape.js is updated. Information about where is the related function is located\n  * can be found in the file that list the changes done in ivis cytoscape fork.\n  */\n\n  $$.sbgn.drawBorder = function (_ref) {\n    var context = _ref.context,\n        node = _ref.node,\n        borderWidth = _ref.borderWidth,\n        borderColor = _ref.borderColor,\n        borderStyle = _ref.borderStyle,\n        borderOpacity = _ref.borderOpacity;\n    borderWidth = borderWidth || node && parseFloat(node.css('border-width'));\n\n    if (borderWidth > 0) {\n      var parentOpacity = node && node.effectiveOpacity() || 1;\n      borderStyle = borderStyle || node && node.css('border-style');\n      borderColor = borderColor || node && node.css('border-color');\n      borderOpacity = (borderOpacity || node && node.css('border-opacity')) * parentOpacity;\n      var propsToRestore = ['lineWidth', 'lineCap', 'strokeStyle', 'globalAlpha'];\n      var initialProps = {};\n      propsToRestore.forEach(function (propName) {\n        initialProps[propName] = context[propName];\n      });\n      context.lineWidth = borderWidth;\n      context.lineCap = 'butt';\n      context.strokeStyle = borderColor;\n      context.globalAlpha = borderOpacity;\n\n      if (context.setLineDash) {\n        // for very outofdate browsers\n        switch (borderStyle) {\n          case 'dotted':\n            context.setLineDash([1, 1]);\n            break;\n\n          case 'dashed':\n            context.setLineDash([4, 2]);\n            break;\n\n          case 'solid':\n          case 'double':\n            context.setLineDash([]);\n            break;\n        }\n      }\n\n      context.stroke();\n\n      if (borderStyle === 'double') {\n        context.lineWidth = borderWidth / 3;\n        var gco = context.globalCompositeOperation;\n        context.globalCompositeOperation = 'destination-out';\n        context.stroke();\n        context.globalCompositeOperation = gco;\n      } // reset in case we changed the border style\n\n\n      if (context.setLineDash) {\n        // for very outofdate browsers\n        context.setLineDash([]);\n      }\n\n      propsToRestore.forEach(function (propName) {\n        context[propName] = initialProps[propName];\n      });\n    }\n  }; // Taken from cytoscape.js and modified\n\n\n  var drawRoundRectanglePath = $$.sbgn.drawRoundRectanglePath = function (context, x, y, width, height, radius) {\n    var halfWidth = width / 2;\n    var halfHeight = height / 2;\n    var cornerRadius = radius || cyMath.getRoundRectangleRadius(width, height);\n\n    if (context.beginPath) {\n      context.beginPath();\n    } // Start at top middle\n\n\n    context.moveTo(x, y - halfHeight); // Arc from middle top to right side\n\n    context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius); // Arc from right side to bottom\n\n    context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius); // Arc from bottom to left side\n\n    context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius); // Arc from left side to topBorder\n\n    context.arcTo(x - halfWidth, y - halfHeight, x, y - halfHeight, cornerRadius); // Join line\n\n    context.lineTo(x, y - halfHeight);\n    context.closePath();\n  }; // Taken from cytoscape.js\n\n\n  var drawPolygonPath = function drawPolygonPath(context, x, y, width, height, points) {\n    var halfW = width / 2;\n    var halfH = height / 2;\n\n    if (context.beginPath) {\n      context.beginPath();\n    }\n\n    context.moveTo(x + halfW * points[0], y + halfH * points[1]);\n\n    for (var i = 1; i < points.length / 2; i++) {\n      context.lineTo(x + halfW * points[i * 2], y + halfH * points[i * 2 + 1]);\n    }\n\n    context.closePath();\n  };\n\n  var sbgnShapes = $$.sbgn.sbgnShapes = {\n    'empty set': true,\n    'nucleic acid feature': true,\n    'complex': true,\n    'macromolecule': true,\n    'simple chemical': true,\n    'biological activity': true,\n    'compartment': true\n  };\n  var totallyOverridenNodeShapes = $$.sbgn.totallyOverridenNodeShapes = {\n    'macromolecule': true,\n    'nucleic acid feature': true,\n    'simple chemical': true,\n    'complex': true,\n    'biological activity': true,\n    'compartment': true\n  };\n  var canHaveInfoBoxShapes = $$.sbgn.canHaveInfoBoxShapes = {\n    'simple chemical': true,\n    'macromolecule': true,\n    'nucleic acid feature': true,\n    'complex': true,\n    'biological activity': true,\n    'compartment': true\n  };\n  var canBeMultimerShapes = $$.sbgn.canBeMultimerShapes = {\n    'macromolecule': true,\n    'complex': true,\n    'nucleic acid feature': true,\n    'simple chemical': true\n  };\n\n  cyMath.calculateDistance = function (point1, point2) {\n    var distance = Math.pow(point1[0] - point2[0], 2) + Math.pow(point1[1] - point2[1], 2);\n    return Math.sqrt(distance);\n  };\n\n  $$.sbgn.colors = {\n    clone: \"#838383\"\n  };\n\n  $$.sbgn.getDefaultComplexCornerLength = function () {\n    return 24;\n  };\n\n  $$.sbgn.drawStateAndInfos = function (node, context, centerX, centerY) {\n    var layouts = node.data('auxunitlayouts');\n\n    for (var side in layouts) {\n      var layout = layouts[side];\n      classes.AuxUnitLayout.draw(layout, node.cy(), context);\n    }\n\n    context.beginPath();\n    context.closePath();\n  };\n\n  $$.sbgn.drawInfoBox = function (context, x, y, width, height, shapeName) {\n    switch (shapeName) {\n      case 'roundrectangle':\n        cyBaseNodeShapes['roundrectangle'].draw(context, x, y, width, height);\n        break;\n\n      case 'bottomroundrectangle':\n        $$.sbgn.drawBottomRoundRectangle(context, x, y, width, height);\n        break;\n\n      case 'ellipse':\n        cyBaseNodeShapes['ellipse'].draw(context, x, y, width, height);\n        break;\n\n      case 'complex':\n        $$.sbgn.drawComplex(context, x, y, width, height, height / 2);\n        break;\n\n      case 'perturbing agent':\n        var points = $$.sbgn.generatePerturbingAgentPoints();\n        drawPolygonPath(context, x, y, width, height, points);\n        break;\n\n      case 'rectangle':\n        cyBaseNodeShapes['rectangle'].draw(context, x, y, width, height);\n        break;\n\n      case 'stadium':\n        $$.sbgn.drawRoundRectanglePath(context, x, y, width, height, Math.min(width / 2, height / 2, 15));\n        break;\n    }\n  }; // $$.sbgn.AfShapeArgsFn = function (self){\n  //   return [self.bbox.w, self.bbox.h, classes.getAuxUnitClass(self).getParent(self).data(\"class\")];\n  // }\n\n\n  $$.sbgn.nucleicAcidCheckPoint = function (x, y, padding, width, height, centerX, centerY, points, cornerRadius) {\n    //check rectangle at top\n    if (cyMath.pointInsidePolygon(x, y, points, centerX, centerY - cornerRadius / 2, width, height - cornerRadius / 3, [0, -1], padding)) {\n      return true;\n    } //check rectangle at bottom\n\n\n    if (cyMath.pointInsidePolygon(x, y, points, centerX, centerY + height / 2 - cornerRadius / 2, width - 2 * cornerRadius, cornerRadius, [0, -1], padding)) {\n      return true;\n    } //check ellipses\n\n\n    var checkInEllipse = function checkInEllipse(x, y, centerX, centerY, width, height, padding) {\n      x -= centerX;\n      y -= centerY;\n      x /= width / 2 + padding;\n      y /= height / 2 + padding;\n      return Math.pow(x, 2) + Math.pow(y, 2) <= 1;\n    }; // Check bottom right quarter circle\n\n\n    if (checkInEllipse(x, y, centerX + width / 2 - cornerRadius, centerY + height / 2 - cornerRadius, cornerRadius * 2, cornerRadius * 2, padding)) {\n      return true;\n    } // Check bottom left quarter circle\n\n\n    if (checkInEllipse(x, y, centerX - width / 2 + cornerRadius, centerY + height / 2 - cornerRadius, cornerRadius * 2, cornerRadius * 2, padding)) {\n      return true;\n    }\n\n    return false;\n  }; //we need to force opacity to 1 since we might have state and info boxes.\n  //having opaque nodes which have state and info boxes gives unpleasent results.\n\n\n  $$.sbgn.forceOpacityToOne = function (node, context) {\n    var parentOpacity = node.effectiveOpacity();\n\n    if (parentOpacity === 0) {\n      return;\n    }\n\n    context.fillStyle = \"rgba(\" + node._private.style[\"background-color\"].value[0] + \",\" + node._private.style[\"background-color\"].value[1] + \",\" + node._private.style[\"background-color\"].value[2] + \",\" + 1 * node.css('opacity') * parentOpacity + \")\";\n  };\n\n  $$.sbgn.drawSimpleChemicalPath = function (context, x, y, width, height) {\n    var halfWidth = width / 2;\n    var halfHeight = height / 2; //var cornerRadius = $$.math.getRoundRectangleRadius(width, height);\n\n    var cornerRadius = Math.min(halfWidth, halfHeight);\n    context.beginPath(); // Start at top middle\n\n    context.moveTo(x, y - halfHeight); // Arc from middle top to right side\n\n    context.arcTo(x + halfWidth, y - halfHeight, x + halfWidth, y, cornerRadius); // Arc from right side to bottom\n\n    context.arcTo(x + halfWidth, y + halfHeight, x, y + halfHeight, cornerRadius); // Arc from bottom to left side\n\n    context.arcTo(x - halfWidth, y + halfHeight, x - halfWidth, y, cornerRadius); // Arc from left side to topBorder\n\n    context.arcTo(x - halfWidth, y - halfHeight, x, y - halfHeight, cornerRadius); // Join line\n\n    context.lineTo(x, y - halfHeight);\n    context.closePath();\n  };\n\n  $$.sbgn.drawSimpleChemical = function (context, x, y, width, height) {\n    $$.sbgn.drawSimpleChemicalPath(context, x, y, width, height);\n    context.fill();\n  };\n\n  function simpleChemicalLeftClone(context, centerX, centerY, width, height, cloneMarker, opacity) {\n    if (cloneMarker != null) {\n      var oldGlobalAlpha = context.globalAlpha;\n      context.globalAlpha = opacity;\n      var oldStyle = context.fillStyle;\n      context.fillStyle = $$.sbgn.colors.clone;\n      context.beginPath();\n      var markerBeginX = centerX - width / 2 * Math.sin(Math.PI / 3);\n      var markerBeginY = centerY + height / 2 * Math.cos(Math.PI / 3);\n      var markerEndX = centerX;\n      var markerEndY = markerBeginY;\n      context.moveTo(markerBeginX, markerBeginY);\n      context.lineTo(markerEndX, markerEndY);\n      context.arc(centerX, centerY, width / 2, 3 * Math.PI / 6, 5 * Math.PI / 6);\n      context.closePath();\n      context.fill();\n      context.fillStyle = oldStyle;\n      context.globalAlpha = oldGlobalAlpha;\n    }\n  }\n\n  ;\n\n  function simpleChemicalRightClone(context, centerX, centerY, width, height, cloneMarker, opacity) {\n    if (cloneMarker != null) {\n      var oldGlobalAlpha = context.globalAlpha;\n      context.globalAlpha = opacity;\n      var oldStyle = context.fillStyle;\n      context.fillStyle = $$.sbgn.colors.clone;\n      context.beginPath();\n      var markerBeginX = centerX;\n      var markerBeginY = centerY + height / 2 * Math.cos(Math.PI / 3);\n      var markerEndX = centerX + width / 2 * Math.sin(Math.PI / 3);\n      var markerEndY = markerBeginY;\n      context.moveTo(markerBeginX, markerBeginY);\n      context.lineTo(markerEndX, markerEndY);\n      context.arc(centerX, centerY, width / 2, Math.PI / 6, 3 * Math.PI / 6);\n      context.closePath();\n      context.fill();\n      context.fillStyle = oldStyle;\n      context.globalAlpha = oldGlobalAlpha;\n    }\n  }\n\n  ;\n\n  $$.sbgn.drawEllipsePath = function (context, x, y, width, height) {\n    cyBaseNodeShapes['ellipse'].drawPath(context, x, y, width, height);\n  };\n\n  $$.sbgn.drawBarrel = function (context, x, y, width, height) {\n    cyBaseNodeShapes['barrel'].draw(context, x, y, width, height);\n    context.fill();\n  };\n\n  $$.sbgn.drawBottomRoundRectangle = function (context, x, y, width, height) {\n    cyBaseNodeShapes['bottomroundrectangle'].draw(context, x, y, width, height);\n    context.fill();\n  }; // The old draw implementation for nucleic acid feature\n  // now only used for clone marker drawing of nucleic acid feature\n  // and macromolecule shapes because 'bottomroundrectangle' function\n  // of cytoscape.js did not fit well for this purpose.\n  // Did not change the name yet directly as drawNucAcidFeatureClone etc.\n  // because it actually draws a nucleic acid feature in a different way.\n\n\n  $$.sbgn.drawNucAcidFeature2 = function (context, centerX, centerY, width, height, cornerRadius) {\n    cornerRadius = cornerRadius || cyMath.getRoundRectangleRadius(width, height);\n    var halfWidth = width / 2;\n    var halfHeight = height / 2;\n    var left = centerX - halfWidth,\n        right = centerX + halfWidth;\n    var bottom = centerY - halfHeight,\n        top = centerY + halfHeight;\n    context.beginPath();\n    context.moveTo(left, bottom);\n    context.lineTo(right, bottom);\n    context.lineTo(right, centerY);\n    context.arcTo(right, top, centerX, top, cornerRadius);\n    context.arcTo(left, top, left, centerY, cornerRadius);\n    context.lineTo(left, bottom);\n    context.closePath();\n    context.fill();\n  };\n  /*\n   * Code taken from https://jsperf.com/string-prototype-endswith\n   * Direct implementation seems to work better.\n   * Using this improves isMultimer() performance.\n   * Makes it take 0.1 or 0.2% less time from the whole\n   * loading process, down from ~0.4% initially.\n   */\n\n\n  function endsWith(str, pattern) {\n    for (var i = pattern.length, l = str.length; i--;) {\n      if (str.charAt(--l) != pattern.charAt(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  $$.sbgn.isMultimer = function (node) {\n    var sbgnClass = node._private.data[\"class\"];\n    if (sbgnClass && endsWith(sbgnClass, \"multimer\")) return true;\n    return false;\n  }; //this function is created to have same corner length when\n  //complex's width or height is changed\n\n\n  $$.sbgn.generateComplexShapePoints = function (cornerLength, width, height) {\n    //cp stands for corner proportion\n    var cpX = Math.min(cornerLength, 0.5 * width) / width;\n    var cpY = Math.min(cornerLength, 0.5 * height) / height;\n    var complexPoints = [-1 + cpX, -1, -1, -1 + cpY, -1, 1 - cpY, -1 + cpX, 1, 1 - cpX, 1, 1, 1 - cpY, 1, -1 + cpY, 1 - cpX, -1];\n    return complexPoints;\n  };\n\n  $$.sbgn.generatePerturbingAgentPoints = function () {\n    return [-1, -1, -0.5, 0, -1, 1, 1, 1, 0.5, 0, 1, -1];\n  };\n\n  $$.sbgn.getDefaultMultimerPadding = function () {\n    return 5;\n  }; // draw background image of nodes\n\n\n  $$.sbgn.drawImage = function (context, imgObj) {\n    if (imgObj) {\n      context.clip();\n      context.drawImage(imgObj.img, 0, 0, imgObj.imgW, imgObj.imgH, imgObj.x, imgObj.y, imgObj.w, imgObj.h);\n      context.restore();\n    }\n  };\n\n  cyStyleProperties.types.nodeShape.enums.push('empty set', 'nucleic acid feature', 'complex', 'macromolecule', 'simple chemical', 'biological activity', 'compartment');\n\n  $$.sbgn.registerSbgnNodeShapes = function () {\n    function generateDrawFcn(_ref2) {\n      var plainDrawFcn = _ref2.plainDrawFcn,\n          extraDrawFcn = _ref2.extraDrawFcn,\n          canBeMultimer = _ref2.canBeMultimer,\n          cloneMarkerFcn = _ref2.cloneMarkerFcn,\n          canHaveInfoBox = _ref2.canHaveInfoBox,\n          multimerPadding = _ref2.multimerPadding;\n      return function (context, node, imgObj) {\n        var borderWidth = parseFloat(node.css('border-width'));\n        var width = node.outerWidth() - borderWidth;\n        var height = node.outerHeight() - borderWidth;\n        var centerX = node._private.position.x;\n        var centerY = node._private.position.y;\n        var bgOpacity = node.css('background-opacity');\n        var isCloned = cloneMarkerFcn != null && node._private.data.clonemarker;\n\n        if (canBeMultimer && $$.sbgn.isMultimer(node)) {\n          //add multimer shape\n          plainDrawFcn(context, centerX + multimerPadding, centerY + multimerPadding, width, height);\n          $$.sbgn.drawBorder({\n            context: context,\n            node: node\n          });\n\n          if (extraDrawFcn) {\n            extraDrawFcn(context, centerX + multimerPadding, centerY + multimerPadding, width, height);\n            $$.sbgn.drawBorder({\n              context: context,\n              node: node\n            });\n          }\n\n          if (isCloned) {\n            cloneMarkerFcn(context, centerX + multimerPadding, centerY + multimerPadding, width - borderWidth, height - borderWidth, isCloned, true, bgOpacity);\n          }\n        }\n\n        plainDrawFcn(context, centerX, centerY, width, height);\n        $$.sbgn.drawBorder({\n          context: context,\n          node: node\n        });\n        $$.sbgn.drawImage(context, imgObj);\n\n        if (extraDrawFcn) {\n          extraDrawFcn(context, centerX, centerY, width, height);\n          $$.sbgn.drawBorder({\n            context: context,\n            node: node\n          });\n        }\n\n        if (isCloned) {\n          cloneMarkerFcn(context, centerX, centerY, width - borderWidth, height - borderWidth, isCloned, false, bgOpacity);\n        }\n\n        if (canHaveInfoBox) {\n          var oldStyle = context.fillStyle;\n          $$.sbgn.forceOpacityToOne(node, context);\n          $$.sbgn.drawStateAndInfos(node, context, centerX, centerY);\n          context.fillStyle = oldStyle;\n        }\n      };\n    }\n\n    function generateIntersectLineFcn(_ref3) {\n      var plainIntersectLineFcn = _ref3.plainIntersectLineFcn,\n          canBeMultimer = _ref3.canBeMultimer,\n          cloneMarkerFcn = _ref3.cloneMarkerFcn,\n          canHaveInfoBox = _ref3.canHaveInfoBox,\n          multimerPadding = _ref3.multimerPadding;\n      return function (node, x, y) {\n        var borderWidth = parseFloat(node.css('border-width'));\n        var padding = borderWidth / 2;\n        var width = node.outerWidth() - borderWidth;\n        var height = node.outerHeight() - borderWidth;\n        var centerX = node._private.position.x;\n        var centerY = node._private.position.y;\n        var intersections = [];\n\n        if (canHaveInfoBox) {\n          var stateAndInfoIntersectLines = $$.sbgn.intersectLineStateAndInfoBoxes(node, x, y);\n          intersections = intersections.concat(stateAndInfoIntersectLines);\n        }\n\n        var nodeIntersectLines = plainIntersectLineFcn(centerX, centerY, width, height, x, y, padding);\n        intersections = intersections.concat(nodeIntersectLines);\n\n        if (canBeMultimer && $$.sbgn.isMultimer(node)) {\n          var multimerIntersectionLines = plainIntersectLineFcn(centerX + multimerPadding, centerY + multimerPadding, width, height, x, y, padding);\n          intersections = intersections.concat(multimerIntersectionLines);\n        }\n\n        return $$.sbgn.closestIntersectionPoint([x, y], intersections);\n      };\n    }\n\n    function generateCheckPointFcn(_ref4) {\n      var plainCheckPointFcn = _ref4.plainCheckPointFcn,\n          canBeMultimer = _ref4.canBeMultimer,\n          cloneMarkerFcn = _ref4.cloneMarkerFcn,\n          canHaveInfoBox = _ref4.canHaveInfoBox,\n          multimerPadding = _ref4.multimerPadding;\n      return function (x, y, node, threshold) {\n        threshold = threshold || 0;\n        var borderWidth = parseFloat(node.css('border-width'));\n        var width = node.outerWidth() - borderWidth + 2 * threshold;\n        var height = node.outerHeight() - borderWidth + 2 * threshold;\n        var centerX = node._private.position.x;\n        var centerY = node._private.position.y;\n        var padding = borderWidth / 2;\n\n        var nodeCheck = function nodeCheck() {\n          return plainCheckPointFcn(x, y, padding, width, height, centerX, centerY);\n        };\n\n        var stateAndInfoCheck = function stateAndInfoCheck() {\n          return canHaveInfoBox && $$.sbgn.checkPointStateAndInfoBoxes(x, y, node, threshold);\n        };\n\n        var multimerCheck = function multimerCheck() {\n          return canBeMultimer && $$.sbgn.isMultimer(node) && plainCheckPointFcn(x, y, padding, width, height, centerX + multimerPadding, centerY + multimerPadding);\n        };\n\n        return nodeCheck() || stateAndInfoCheck() || multimerCheck();\n      };\n    }\n\n    var shapeNames = [\"simple chemical\", \"macromolecule\", \"complex\", \"nucleic acid feature\", \"empty set\", \"biological activity\", \"compartment\", \"oldCompartment\"];\n    shapeNames.forEach(function (shapeName) {\n      var plainDrawFcn = $$.sbgn.plainDraw[shapeName];\n      var plainIntersectLineFcn = $$.sbgn.plainIntersectLine[shapeName];\n      var plainCheckPointFcn = $$.sbgn.plainCheckPoint[shapeName];\n      var canBeMultimer = $$.sbgn.canBeMultimerShapes[shapeName];\n      var cloneMarkerFcn = $$.sbgn.cloneMarker[shapeName];\n      var canHaveInfoBox = $$.sbgn.canHaveInfoBoxShapes[shapeName];\n      var multimerPadding = $$.sbgn.getDefaultMultimerPadding();\n      var extraDrawFcn = $$.sbgn.extraDraw[shapeName];\n      var draw = generateDrawFcn({\n        plainDrawFcn: plainDrawFcn,\n        canBeMultimer: canBeMultimer,\n        cloneMarkerFcn: cloneMarkerFcn,\n        canHaveInfoBox: canHaveInfoBox,\n        multimerPadding: multimerPadding,\n        extraDrawFcn: extraDrawFcn\n      });\n      var intersectLine = totallyOverridenNodeShapes[shapeName] ? generateIntersectLineFcn({\n        plainIntersectLineFcn: plainIntersectLineFcn,\n        canBeMultimer: canBeMultimer,\n        cloneMarkerFcn: cloneMarkerFcn,\n        canHaveInfoBox: canHaveInfoBox,\n        multimerPadding: multimerPadding\n      }) : plainIntersectLineFcn;\n      var checkPoint = totallyOverridenNodeShapes[shapeName] ? generateCheckPointFcn({\n        plainCheckPointFcn: plainCheckPointFcn,\n        canBeMultimer: canBeMultimer,\n        cloneMarkerFcn: cloneMarkerFcn,\n        canHaveInfoBox: canHaveInfoBox,\n        multimerPadding: multimerPadding\n      }) : plainCheckPointFcn;\n      var shape = {\n        draw: draw,\n        intersectLine: intersectLine,\n        checkPoint: checkPoint,\n        multimerPadding: multimerPadding\n      };\n      cyBaseNodeShapes[shapeName] = shape;\n    });\n  };\n\n  $$.sbgn.drawEllipse = function (context, x, y, width, height) {\n    //$$.sbgn.drawEllipsePath(context, x, y, width, height);\n    //context.fill();\n    cyBaseNodeShapes['ellipse'].draw(context, x, y, width, height);\n  };\n\n  $$.sbgn.drawComplex = function (context, x, y, width, height, cornerLength) {\n    cornerLength = cornerLength || $$.sbgn.getDefaultComplexCornerLength();\n    var points = $$.sbgn.generateComplexShapePoints(cornerLength, width, height);\n    drawPolygonPath(context, x, y, width, height, points);\n    context.fill();\n  };\n\n  $$.sbgn.drawCrossLine = function (context, x, y, width, height) {\n    var points = cyMath.generateUnitNgonPoints(4, 0);\n    context.beginPath();\n    var scaleX = width * Math.sqrt(2) / 2,\n        scaleY = height * Math.sqrt(2) / 2;\n    context.moveTo(x + scaleX * points[2], y + scaleY * points[3]);\n    context.lineTo(x + scaleX * points[6], y + scaleY * points[7]);\n    context.closePath();\n  };\n\n  $$.sbgn.drawBiologicalActivity = function (context, x, y, width, height) {\n    var points = $$.sbgn.generateBiologicalActivityPoints();\n    drawPolygonPath(context, x, y, width, height, points);\n    context.fill();\n  };\n\n  $$.sbgn.drawRoundRectangle = function (context, x, y, width, height) {\n    drawRoundRectanglePath(context, x, y, width, height);\n    context.fill();\n  };\n\n  $$.sbgn.generateNucleicAcidPoints = function () {\n    return cyMath.generateUnitNgonPointsFitToSquare(4, 0);\n  };\n\n  $$.sbgn.generateBiologicalActivityPoints = function () {\n    return cyMath.generateUnitNgonPointsFitToSquare(4, 0);\n  };\n\n  $$.sbgn.generateCompartmentPoints = function () {\n    return math.generateUnitNgonPointsFitToSquare(4, 0);\n  };\n\n  $$.sbgn.plainDraw = {\n    \"simple chemical\": $$.sbgn.drawSimpleChemical,\n    \"macromolecule\": $$.sbgn.drawRoundRectangle,\n    \"complex\": $$.sbgn.drawComplex,\n    \"nucleic acid feature\": $$.sbgn.drawBottomRoundRectangle,\n    \"empty set\": $$.sbgn.drawEllipse,\n    \"biological activity\": $$.sbgn.drawBiologicalActivity,\n    \"compartment\": $$.sbgn.drawBarrel,\n    \"oldCompartment\": $$.sbgn.drawRoundRectangle\n  }; // To define an extra drawing for the node that is rendered at the very end,\n  // even after the node background image is drawn.\n  // E.g. cross lines of \"empty set\" nodes.\n\n  $$.sbgn.extraDraw = {\n    \"empty set\": $$.sbgn.drawCrossLine\n  };\n  $$.sbgn.plainIntersectLine = {\n    \"simple chemical\": function simpleChemical(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"ellipse\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    },\n    \"macromolecule\": function macromolecule(centerX, centerY, width, height, x, y, padding) {\n      return $$.sbgn.roundRectangleIntersectLine(x, y, centerX, centerY, centerX, centerY, width, height, cyMath.getRoundRectangleRadius(width, height), padding);\n    },\n    \"complex\": function complex(centerX, centerY, width, height, x, y, padding) {\n      var points = $$.sbgn.generateComplexShapePoints($$.sbgn.getDefaultComplexCornerLength(), width, height);\n      return cyMath.polygonIntersectLine(x, y, points, centerX, centerY, width / 2, height / 2, padding);\n    },\n    \"nucleic acid feature\": function nucleicAcidFeature(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"bottomroundrectangle\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    },\n    \"empty set\": function emptySet(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"ellipse\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    },\n    \"biological activity\": function biologicalActivity(centerX, centerY, width, height, x, y, padding) {\n      var points = $$.sbgn.generateBiologicalActivityPoints();\n      return cyMath.polygonIntersectLine(x, y, points, centerX, centerY, width / 2, height / 2, padding);\n    },\n    \"compartment\": function compartment(centerX, centerY, width, height, x, y, padding) {\n      return cyBaseNodeShapes[\"barrel\"].intersectLine(centerX, centerY, width, height, x, y, padding);\n    },\n    \"oldCompartment\": function oldCompartment(centerX, centerY, width, height, x, y, padding) {\n      return cyMath.roundRectangleIntersectLine(x, y, centerX, centerY, width, height, padding);\n    }\n  };\n  $$.sbgn.plainCheckPoint = {\n    \"simple chemical\": function simpleChemical(x, y, padding, width, height, centerX, centerY) {\n      var points = cyMath.generateUnitNgonPointsFitToSquare(4, 0);\n      var halfWidth = width / 2;\n      var halfHeight = height / 2; //var cornerRadius = $$.math.getRoundRectangleRadius(width, height);\n\n      var cornerRadius = Math.min(halfWidth, halfHeight); //var cornerRadius = math.getRoundRectangleRadius( width, height );\n\n      var diam = cornerRadius * 2; // Check hBox\n\n      if (cyMath.pointInsidePolygon(x, y, points, centerX, centerY, width, height - diam, [0, -1], padding)) {\n        return true;\n      } // Check vBox\n\n\n      if (cyMath.pointInsidePolygon(x, y, points, centerX, centerY, width - diam, height, [0, -1], padding)) {\n        return true;\n      } // Check top left quarter circle\n\n\n      if (cyMath.checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY - height / 2 + cornerRadius, padding)) {\n        return true;\n      } // Check top right quarter circle\n\n\n      if (cyMath.checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY - height / 2 + cornerRadius, padding)) {\n        return true;\n      } // Check bottom right quarter circle\n\n\n      if (cyMath.checkInEllipse(x, y, diam, diam, centerX + width / 2 - cornerRadius, centerY + height / 2 - cornerRadius, padding)) {\n        return true;\n      } // Check bottom left quarter circle\n\n\n      if (cyMath.checkInEllipse(x, y, diam, diam, centerX - width / 2 + cornerRadius, centerY + height / 2 - cornerRadius, padding)) {\n        return true;\n      }\n\n      return false; //return cyBaseNodeShapes[\"ellipse\"].checkPoint( x, y, padding, width, height, centerX, centerY );\n    },\n    \"macromolecule\": function macromolecule(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"complex\": function complex(x, y, padding, width, height, centerX, centerY) {\n      var points = $$.sbgn.generateComplexShapePoints($$.sbgn.getDefaultComplexCornerLength(), width, height);\n      return cyMath.pointInsidePolygon(x, y, points, centerX, centerY, width, height, [0, -1], padding);\n    },\n    \"nucleic acid feature\": function nucleicAcidFeature(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"bottomroundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"empty set\": function emptySet(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"ellipse\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"biological activity\": function biologicalActivity(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"rectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"compartment\": function compartment(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"barrel\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    },\n    \"oldCompartment\": function oldCompartment(x, y, padding, width, height, centerX, centerY) {\n      return cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, width, height, centerX, centerY);\n    }\n  };\n  $$.sbgn.cloneMarker = {\n    \"simple chemical\": function simpleChemical(context, centerX, centerY, width, height, cloneMarker, isMultimer, opacity) {\n      if (cloneMarker != null) {\n        var cornerRadius = Math.min(width / 2, height / 2);\n        var firstCircleCenterX = centerX - width / 2 + cornerRadius;\n        var firstCircleCenterY = centerY;\n        var secondCircleCenterX = centerX + width / 2 - cornerRadius;\n        var secondCircleCenterY = centerY;\n        var bottomCircleCenterX = centerX;\n        var bottomCircleCenterY = centerY + height / 2 - cornerRadius;\n\n        if (width < height) {\n          simpleChemicalLeftClone(context, bottomCircleCenterX, bottomCircleCenterY, 2 * cornerRadius, 2 * cornerRadius, cloneMarker, opacity);\n          simpleChemicalRightClone(context, bottomCircleCenterX, bottomCircleCenterY, 2 * cornerRadius, 2 * cornerRadius, cloneMarker, opacity);\n        } else {\n          simpleChemicalLeftClone(context, firstCircleCenterX, firstCircleCenterY, 2 * cornerRadius, 2 * cornerRadius, cloneMarker, opacity);\n          simpleChemicalRightClone(context, secondCircleCenterX, secondCircleCenterY, 2 * cornerRadius, 2 * cornerRadius, cloneMarker, opacity);\n        }\n\n        var oldStyle = context.fillStyle;\n        context.fillStyle = $$.sbgn.colors.clone;\n        var oldGlobalAlpha = context.globalAlpha;\n        context.globalAlpha = opacity;\n        var recPoints = cyMath.generateUnitNgonPointsFitToSquare(4, 0);\n        var cloneX = centerX;\n        var cloneY = centerY + 3 / 4 * cornerRadius;\n        var cloneWidth = width - 2 * cornerRadius;\n        var cloneHeight = cornerRadius / 2;\n        drawPolygonPath(context, cloneX, cloneY, cloneWidth, cloneHeight, recPoints);\n        context.fill();\n        context.fillStyle = oldStyle;\n        context.globalAlpha = oldGlobalAlpha;\n      }\n    },\n    \"nucleic acid feature\": function nucleicAcidFeature(context, centerX, centerY, width, height, cloneMarker, isMultimer, opacity) {\n      if (cloneMarker != null) {\n        var cloneWidth = width;\n        var cloneHeight = height / 4;\n        var cloneX = centerX;\n        var cloneY = centerY + 3 * height / 8;\n        var oldStyle = context.fillStyle;\n        context.fillStyle = $$.sbgn.colors.clone;\n        var oldGlobalAlpha = context.globalAlpha;\n        context.globalAlpha = opacity;\n        var cornerRadius = cyMath.getRoundRectangleRadius(width, height);\n        $$.sbgn.drawNucAcidFeature2(context, cloneX, cloneY, cloneWidth, cloneHeight, cornerRadius);\n        context.fillStyle = oldStyle;\n        context.globalAlpha = oldGlobalAlpha;\n      }\n    },\n    \"macromolecule\": function macromolecule(context, centerX, centerY, width, height, cloneMarker, isMultimer, opacity) {\n      $$.sbgn.cloneMarker[\"nucleic acid feature\"](context, centerX, centerY, width, height, cloneMarker, isMultimer, opacity);\n    },\n    \"complex\": function complex(context, centerX, centerY, width, height, cloneMarker, isMultimer, opacity) {\n      if (cloneMarker != null) {\n        var cornerLength = $$.sbgn.getDefaultComplexCornerLength();\n        var cpX = width >= 50 ? cornerLength / width : cornerLength / 50;\n        var cpY = height >= 50 ? cornerLength / height : cornerLength / 50;\n        var cloneWidth = width;\n        var cloneHeight = height * cpY / 2;\n        var cloneX = centerX;\n        var cloneY = centerY + height / 2 - cloneHeight / 2;\n        var markerPoints = [-1, -1, 1, -1, 1 - cpX, 1, -1 + cpX, 1];\n        var oldStyle = context.fillStyle;\n        context.fillStyle = $$.sbgn.colors.clone;\n        var oldGlobalAlpha = context.globalAlpha;\n        context.globalAlpha = opacity;\n        drawPolygonPath(context, cloneX, cloneY, cloneWidth, cloneHeight, markerPoints);\n        context.fill();\n        context.fillStyle = oldStyle;\n        context.globalAlpha = oldGlobalAlpha;\n      }\n    }\n  };\n\n  $$.sbgn.closestIntersectionPoint = function (point, intersections) {\n    if (intersections.length <= 0) return [];\n    var closestIntersection = [];\n    var minDistance = Number.MAX_VALUE;\n\n    for (var i = 0; i < intersections.length; i = i + 2) {\n      var checkPoint = [intersections[i], intersections[i + 1]];\n      var distance = cyMath.calculateDistance(point, checkPoint);\n\n      if (distance < minDistance) {\n        minDistance = distance;\n        closestIntersection = checkPoint;\n      }\n    }\n\n    return closestIntersection;\n  };\n\n  $$.sbgn.nucleicAcidIntersectionLine = function (x, y, nodeX, nodeY, width, height, cornerRadius, padding) {\n    // var nodeX = node._private.position.x;\n    // var nodeY = node._private.position.y;\n    // var width = node.width();\n    // var height = node.height();\n    // var padding = parseInt(node.css('border-width')) / 2;\n    var halfWidth = width / 2;\n    var halfHeight = height / 2;\n    var straightLineIntersections; // Top segment, left to right\n\n    {\n      var topStartX = nodeX - halfWidth - padding;\n      var topStartY = nodeY - halfHeight - padding;\n      var topEndX = nodeX + halfWidth + padding;\n      var topEndY = topStartY;\n      straightLineIntersections = cyMath.finiteLinesIntersect(x, y, nodeX, nodeY, topStartX, topStartY, topEndX, topEndY, false);\n\n      if (straightLineIntersections.length > 0) {\n        return straightLineIntersections;\n      }\n    } // Right segment, top to bottom\n\n    {\n      var rightStartX = nodeX + halfWidth + padding;\n      var rightStartY = nodeY - halfHeight - padding;\n      var rightEndX = rightStartX;\n      var rightEndY = nodeY + halfHeight - cornerRadius + padding;\n      straightLineIntersections = cyMath.finiteLinesIntersect(x, y, nodeX, nodeY, rightStartX, rightStartY, rightEndX, rightEndY, false);\n\n      if (straightLineIntersections.length > 0) {\n        return straightLineIntersections;\n      }\n    } // Bottom segment, left to right\n\n    {\n      var bottomStartX = nodeX - halfWidth + cornerRadius - padding;\n      var bottomStartY = nodeY + halfHeight + padding;\n      var bottomEndX = nodeX + halfWidth - cornerRadius + padding;\n      var bottomEndY = bottomStartY;\n      straightLineIntersections = cyMath.finiteLinesIntersect(x, y, nodeX, nodeY, bottomStartX, bottomStartY, bottomEndX, bottomEndY, false);\n\n      if (straightLineIntersections.length > 0) {\n        return straightLineIntersections;\n      }\n    } // Left segment, top to bottom\n\n    {\n      var leftStartX = nodeX - halfWidth - padding;\n      var leftStartY = nodeY - halfHeight - padding;\n      var leftEndX = leftStartX;\n      var leftEndY = nodeY + halfHeight - cornerRadius + padding;\n      straightLineIntersections = cyMath.finiteLinesIntersect(x, y, nodeX, nodeY, leftStartX, leftStartY, leftEndX, leftEndY, false);\n\n      if (straightLineIntersections.length > 0) {\n        return straightLineIntersections;\n      }\n    } // Check intersections with arc segments, we have only two arcs for\n    //nucleic acid features\n\n    var arcIntersections; // Bottom Right\n\n    {\n      var bottomRightCenterX = nodeX + halfWidth - cornerRadius;\n      var bottomRightCenterY = nodeY + halfHeight - cornerRadius;\n      arcIntersections = cyMath.intersectLineCircle(x, y, nodeX, nodeY, bottomRightCenterX, bottomRightCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle\n\n      if (arcIntersections.length > 0 && arcIntersections[0] >= bottomRightCenterX && arcIntersections[1] >= bottomRightCenterY) {\n        return [arcIntersections[0], arcIntersections[1]];\n      }\n    } // Bottom Left\n\n    {\n      var bottomLeftCenterX = nodeX - halfWidth + cornerRadius;\n      var bottomLeftCenterY = nodeY + halfHeight - cornerRadius;\n      arcIntersections = cyMath.intersectLineCircle(x, y, nodeX, nodeY, bottomLeftCenterX, bottomLeftCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle\n\n      if (arcIntersections.length > 0 && arcIntersections[0] <= bottomLeftCenterX && arcIntersections[1] >= bottomLeftCenterY) {\n        return [arcIntersections[0], arcIntersections[1]];\n      }\n    }\n    return []; // if nothing\n  }; //this function gives the intersections of any line with the upper half of perturbing agent\n\n\n  $$.sbgn.perturbingAgentIntersectLine = function (x1, y1, x2, y2, nodeX, nodeY, width, height, padding) {\n    var halfWidth = width / 2;\n    var halfHeight = height / 2; // Check intersections with straight line segments\n\n    var straightLineIntersections = []; // Top segment, left to right\n\n    {\n      var topStartX = nodeX - halfWidth - padding;\n      var topStartY = nodeY - halfHeight - padding;\n      var topEndX = nodeX + halfWidth + padding;\n      var topEndY = topStartY;\n      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, topStartX, topStartY, topEndX, topEndY, false);\n\n      if (intersection.length > 0) {\n        straightLineIntersections = straightLineIntersections.concat(intersection);\n      }\n    } // Right segment, top to bottom\n\n    {\n      var rightStartX = nodeX + halfWidth + padding;\n      var rightStartY = nodeY - halfHeight - padding;\n      var rightEndX = rightStartX - halfWidth / 2;\n      var rightEndY = nodeY + padding;\n      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, rightStartX, rightStartY, rightEndX, rightEndY, false);\n\n      if (intersection.length > 0) {\n        straightLineIntersections = straightLineIntersections.concat(intersection);\n      }\n    } // Left segment, top to bottom\n\n    {\n      var leftStartX = nodeX - halfWidth - padding;\n      var leftStartY = nodeY - halfHeight - padding;\n      var leftEndX = leftStartX + halfWidth / 2;\n      var leftEndY = nodeY + padding;\n      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, leftStartX, leftStartY, leftEndX, leftEndY, false);\n\n      if (intersection.length > 0) {\n        straightLineIntersections = straightLineIntersections.concat(intersection);\n      }\n    }\n    return straightLineIntersections;\n  }; //this function gives the intersections of any line with a round rectangle\n\n\n  $$.sbgn.roundRectangleIntersectLine = function (x1, y1, x2, y2, nodeX, nodeY, width, height, cornerRadius, padding) {\n    var halfWidth = width / 2;\n    var halfHeight = height / 2; // Check intersections with straight line segments\n\n    var straightLineIntersections = []; // Top segment, left to right\n\n    {\n      var topStartX = nodeX - halfWidth + cornerRadius - padding;\n      var topStartY = nodeY - halfHeight - padding;\n      var topEndX = nodeX + halfWidth - cornerRadius + padding;\n      var topEndY = topStartY;\n      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, topStartX, topStartY, topEndX, topEndY, false);\n\n      if (intersection.length > 0) {\n        straightLineIntersections = straightLineIntersections.concat(intersection);\n      }\n    } // Right segment, top to bottom\n\n    {\n      var rightStartX = nodeX + halfWidth + padding;\n      var rightStartY = nodeY - halfHeight + cornerRadius - padding;\n      var rightEndX = rightStartX;\n      var rightEndY = nodeY + halfHeight - cornerRadius + padding;\n      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, rightStartX, rightStartY, rightEndX, rightEndY, false);\n\n      if (intersection.length > 0) {\n        straightLineIntersections = straightLineIntersections.concat(intersection);\n      }\n    } // Bottom segment, left to right\n\n    {\n      var bottomStartX = nodeX - halfWidth + cornerRadius - padding;\n      var bottomStartY = nodeY + halfHeight + padding;\n      var bottomEndX = nodeX + halfWidth - cornerRadius + padding;\n      var bottomEndY = bottomStartY;\n      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, bottomStartX, bottomStartY, bottomEndX, bottomEndY, false);\n\n      if (intersection.length > 0) {\n        straightLineIntersections = straightLineIntersections.concat(intersection);\n      }\n    } // Left segment, top to bottom\n\n    {\n      var leftStartX = nodeX - halfWidth - padding;\n      var leftStartY = nodeY - halfHeight + cornerRadius - padding;\n      var leftEndX = leftStartX;\n      var leftEndY = nodeY + halfHeight - cornerRadius + padding;\n      var intersection = cyMath.finiteLinesIntersect(x1, y1, x2, y2, leftStartX, leftStartY, leftEndX, leftEndY, false);\n\n      if (intersection.length > 0) {\n        straightLineIntersections = straightLineIntersections.concat(intersection);\n      }\n    } // Check intersections with arc segments\n\n    var arcIntersections; // Top Left\n\n    {\n      var topLeftCenterX = nodeX - halfWidth + cornerRadius;\n      var topLeftCenterY = nodeY - halfHeight + cornerRadius;\n      arcIntersections = cyMath.intersectLineCircle(x1, y1, x2, y2, topLeftCenterX, topLeftCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle\n\n      if (arcIntersections.length > 0 && arcIntersections[0] <= topLeftCenterX && arcIntersections[1] <= topLeftCenterY) {\n        straightLineIntersections = straightLineIntersections.concat(arcIntersections);\n      }\n    } // Top Right\n\n    {\n      var topRightCenterX = nodeX + halfWidth - cornerRadius;\n      var topRightCenterY = nodeY - halfHeight + cornerRadius;\n      arcIntersections = cyMath.intersectLineCircle(x1, y1, x2, y2, topRightCenterX, topRightCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle\n\n      if (arcIntersections.length > 0 && arcIntersections[0] >= topRightCenterX && arcIntersections[1] <= topRightCenterY) {\n        straightLineIntersections = straightLineIntersections.concat(arcIntersections);\n      }\n    } // Bottom Right\n\n    {\n      var bottomRightCenterX = nodeX + halfWidth - cornerRadius;\n      var bottomRightCenterY = nodeY + halfHeight - cornerRadius;\n      arcIntersections = cyMath.intersectLineCircle(x1, y1, x2, y2, bottomRightCenterX, bottomRightCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle\n\n      if (arcIntersections.length > 0 && arcIntersections[0] >= bottomRightCenterX && arcIntersections[1] >= bottomRightCenterY) {\n        straightLineIntersections = straightLineIntersections.concat(arcIntersections);\n      }\n    } // Bottom Left\n\n    {\n      var bottomLeftCenterX = nodeX - halfWidth + cornerRadius;\n      var bottomLeftCenterY = nodeY + halfHeight - cornerRadius;\n      arcIntersections = cyMath.intersectLineCircle(x1, y1, x2, y2, bottomLeftCenterX, bottomLeftCenterY, cornerRadius + padding); // Ensure the intersection is on the desired quarter of the circle\n\n      if (arcIntersections.length > 0 && arcIntersections[0] <= bottomLeftCenterX && arcIntersections[1] >= bottomLeftCenterY) {\n        straightLineIntersections = straightLineIntersections.concat(arcIntersections);\n      }\n    }\n    if (straightLineIntersections.length > 0) return straightLineIntersections;\n    return []; // if nothing\n  };\n\n  $$.sbgn.intersectLineEllipse = function (x1, y1, x2, y2, centerX, centerY, width, height, padding) {\n    var w = width / 2 + padding;\n    var h = height / 2 + padding;\n    var an = centerX;\n    var bn = centerY;\n    var d = [x2 - x1, y2 - y1];\n    var m = d[1] / d[0];\n    var n = -1 * m * x2 + y2;\n    var a = h * h + w * w * m * m;\n    var b = -2 * an * h * h + 2 * m * n * w * w - 2 * bn * m * w * w;\n    var c = an * an * h * h + n * n * w * w - 2 * bn * w * w * n + bn * bn * w * w - h * h * w * w;\n    var discriminant = b * b - 4 * a * c;\n\n    if (discriminant < 0) {\n      return [];\n    }\n\n    var t1 = (-b + Math.sqrt(discriminant)) / (2 * a);\n    var t2 = (-b - Math.sqrt(discriminant)) / (2 * a);\n    var xMin = Math.min(t1, t2);\n    var xMax = Math.max(t1, t2);\n    var yMin = m * xMin - m * x2 + y2;\n    var yMax = m * xMax - m * x2 + y2;\n    return [xMin, yMin, xMax, yMax];\n  };\n\n  $$.sbgn.intersectLineStateAndInfoBoxes = function (node, x, y) {\n    var centerX = node._private.position.x;\n    var centerY = node._private.position.y;\n    var padding = parseInt(node.css('border-width')) / 2;\n    var stateAndInfos = node._private.data.statesandinfos;\n    var intersections = [];\n\n    for (var i = 0; i < stateAndInfos.length; i++) {\n      var state = stateAndInfos[i];\n\n      if (!state.isDisplayed) {\n        continue;\n      }\n\n      var infoBoxWidth = state.bbox.w;\n      var infoBoxHeight = state.bbox.h;\n      var currIntersections = null;\n\n      if (state.clazz == \"state variable\") {\n        var coord = classes.StateVariable.getAbsoluteCoord(state, node.cy());\n        currIntersections = $$.sbgn.intersectLineEllipse(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth, infoBoxHeight, padding);\n      } else if (state.clazz == \"unit of information\") {\n        var coord = classes.UnitOfInformation.getAbsoluteCoord(state, node.cy());\n\n        if (node.data(\"class\") == \"BA macromolecule\" || node.data(\"class\") == \"BA nucleic acid feature\" || node.data(\"class\") == \"BA complex\") {\n          currIntersections = $$.sbgn.roundRectangleIntersectLine(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth, infoBoxHeight, 5, padding);\n        } else if (node.data(\"class\") == \"BA unspecified entity\") {\n          currIntersections = $$.sbgn.intersectLineEllipse(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth, infoBoxHeight, padding);\n        } else if (node.data(\"class\") == \"BA simple chemical\") {\n          currIntersections = cyMath.intersectLineCircle(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth / 4);\n        } else if (node.data(\"class\") == \"BA perturbing agent\") {\n          currIntersections = $$.sbgn.perturbingAgentIntersectLine(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth, infoBoxHeight, padding);\n        } else {\n          currIntersections = $$.sbgn.roundRectangleIntersectLine(x, y, centerX, centerY, coord.x, coord.y, infoBoxWidth, infoBoxHeight, 0, padding);\n        }\n      }\n\n      intersections = intersections.concat(currIntersections);\n    }\n\n    return intersections;\n  };\n\n  $$.sbgn.checkPointStateAndInfoBoxes = function (x, y, node, threshold) {\n    return classes.AuxiliaryUnit.checkPoint(x, y, node, threshold);\n  };\n\n  $$.sbgn.isNodeShapeTotallyOverriden = function (render, node) {\n    if (totallyOverridenNodeShapes[render.getNodeShape(node)]) {\n      return true;\n    }\n\n    return false;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/sbgn-extensions/sbgn-cy-renderer.js\n");

/***/ }),

/***/ "./src/utilities/cd-to-sbgnml-converter-factory.js":
/*!*********************************************************!*\
  !*** ./src/utilities/cd-to-sbgnml-converter-factory.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var jsonToSbgnml, elementUtilities, cy;\n\n  function cdToSbgnml(param) {\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    elementUtilities = param.elementUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n\n  cdToSbgnml.convert = function (xml, callback) {\n    $.ajax({\n      type: 'post',\n      url: \"http://web.newteditor.org:8080/cd2sbgnml\",\n      data: xml,\n      success: function success(data) {\n        callback(data);\n      },\n      error: function error(_error) {\n        callback(null);\n      }\n    });\n  };\n\n  return cdToSbgnml;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vc3JjL3V0aWxpdGllcy9jZC10by1zYmdubWwtY29udmVydGVyLWZhY3RvcnkuanM/NTY4MyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwianNvblRvU2Jnbm1sIiwiZWxlbWVudFV0aWxpdGllcyIsImN5IiwiY2RUb1NiZ25tbCIsInBhcmFtIiwianNvblRvU2Jnbm1sQ29udmVydGVyIiwic2JnbkN5SW5zdGFuY2UiLCJnZXRDeSIsImNvbnZlcnQiLCJ4bWwiLCJjYWxsYmFjayIsIiQiLCJhamF4IiwidHlwZSIsInVybCIsImRhdGEiLCJzdWNjZXNzIiwiZXJyb3IiXSwibWFwcGluZ3MiOiJBQUVBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsWUFBVztBQUV4QixNQUFJQyxZQUFKLEVBQWtCQyxnQkFBbEIsRUFBb0NDLEVBQXBDOztBQUVBLFdBQVNDLFVBQVQsQ0FBb0JDLEtBQXBCLEVBQTJCO0FBQ3pCSixJQUFBQSxZQUFZLEdBQUdJLEtBQUssQ0FBQ0MscUJBQXJCO0FBQ0FKLElBQUFBLGdCQUFnQixHQUFHRyxLQUFLLENBQUNILGdCQUF6QjtBQUNBQyxJQUFBQSxFQUFFLEdBQUdFLEtBQUssQ0FBQ0UsY0FBTixDQUFxQkMsS0FBckIsRUFBTDtBQUNEOztBQUdESixFQUFBQSxVQUFVLENBQUNLLE9BQVgsR0FBcUIsVUFBVUMsR0FBVixFQUFjQyxRQUFkLEVBQXdCO0FBRXpDQyxJQUFBQSxDQUFDLENBQUNDLElBQUYsQ0FBTztBQUNIQyxNQUFBQSxJQUFJLEVBQUUsTUFESDtBQUVIQyxNQUFBQSxHQUFHLEVBQUUsMENBRkY7QUFHSEMsTUFBQUEsSUFBSSxFQUFFTixHQUhIO0FBSUhPLE1BQUFBLE9BQU8sRUFBRSxpQkFBVUQsSUFBVixFQUFnQjtBQUNyQkwsUUFBQUEsUUFBUSxDQUFDSyxJQUFELENBQVI7QUFDSCxPQU5FO0FBT0hFLE1BQUFBLEtBQUssRUFBRSxlQUFVQSxNQUFWLEVBQWlCO0FBQ3ZCUCxRQUFBQSxRQUFRLENBQUMsSUFBRCxDQUFSO0FBQ0E7QUFURSxLQUFQO0FBV0gsR0FiRDs7QUFlQSxTQUFPUCxVQUFQO0FBRUQsQ0E1QkgiLCJzb3VyY2VzQ29udGVudCI6WyJcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcblxuICAgIHZhciBqc29uVG9TYmdubWwsIGVsZW1lbnRVdGlsaXRpZXMsIGN5O1xuICBcbiAgICBmdW5jdGlvbiBjZFRvU2Jnbm1sKHBhcmFtKSB7XG4gICAgICBqc29uVG9TYmdubWwgPSBwYXJhbS5qc29uVG9TYmdubWxDb252ZXJ0ZXI7XG4gICAgICBlbGVtZW50VXRpbGl0aWVzID0gcGFyYW0uZWxlbWVudFV0aWxpdGllcztcbiAgICAgIGN5ID0gcGFyYW0uc2JnbkN5SW5zdGFuY2UuZ2V0Q3koKTtcbiAgICB9XG4gIFxuIFxuICAgIGNkVG9TYmdubWwuY29udmVydCA9IGZ1bmN0aW9uICh4bWwsY2FsbGJhY2spIHtcblxuICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgdHlwZTogJ3Bvc3QnLFxuICAgICAgICAgICAgdXJsOiBcImh0dHA6Ly93ZWIubmV3dGVkaXRvci5vcmc6ODA4MC9jZDJzYmdubWxcIixcbiAgICAgICAgICAgIGRhdGE6IHhtbCxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZGF0YSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIHJldHVybiBjZFRvU2Jnbm1sO1xuICBcbiAgfVxuICBcblxuIl0sImZpbGUiOiIuL3NyYy91dGlsaXRpZXMvY2QtdG8tc2Jnbm1sLWNvbnZlcnRlci1mYWN0b3J5LmpzLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/utilities/cd-to-sbgnml-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/classes.js":
/*!**********************************!*\
  !*** ./src/utilities/classes.js ***!
  \**********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var libs = __webpack_require__(/*! ../utilities/lib-utilities */ \"./src/utilities/lib-utilities.js\").getLibs();\n\nvar jQuery = $ = libs.jQuery;\nvar cytoscape = libs.cytoscape; // var optionUtilities = require('./option-utilities');\n// var options = optionUtilities.getOptions();\n\nvar truncate = __webpack_require__(/*! ./text-utilities */ \"./src/utilities/text-utilities.js\").truncate; // only functions not depending on the instances can be used in this way\n// e.g. elementUtilities.generateStateVarId()\n\n\nvar elementUtilities = __webpack_require__(/*! ./element-utilities-factory */ \"./src/utilities/element-utilities-factory.js\")();\n\nvar ns = {}; // Keep in mind that for each method 'mainObj' parameter refers to the main object for which the operation will be done.\n// It refers to the object that could be refered by 'this' while there was prototyping in these classes.\n// For example AuxiliaryUnit.copy(mainObj, existingInstance, newParent, newId) copies the variable passed by 'mainObj'\n// parameter and in this case 'mainObj' can be considered as `the object to be copied`\n// The old constructors are replaced by 'construct()' methods while removing prototyping from the classes.\n// 'AuxiliaryUnit' and 'AuxUnitLayout' objects keep the id of their parent nodes instead of the nodes themselves to avoid circular references.\n// To maintain this property related methods to get and set parent nodes should be used instead of directly accessing the parent object.\n// Also, there is a parent-child relationship between the AuxiliaryUnit class and StateVariable and UnitOfInformation\n// classes. While calling a method of AuxiliaryUnit class that method should be called from\n// the actual class of related auxilary unit (Would be StateVariable or UnitOfInformation. This is needed to prevent conflictions when the\n// methods of AuxiliaryUnit class is overriden by these classes). That class can be obtained by calling 'getAuxUnitClass(mainObj)'\n// method for the auxilary unit object.\n\nvar getAuxUnitClass = function getAuxUnitClass(unit) {\n  // Unit parameter may pass the unit itself or the type of the unit check it\n  var unitType = typeof unit === 'string' ? unit : unit.clazz; // Retrieve and return unit class according to the unit type\n\n  var className = unitType === 'state variable' ? 'StateVariable' : 'UnitOfInformation';\n  return ns[className];\n};\n\nns.getAuxUnitClass = getAuxUnitClass; // Expose getAuxUnitClass method\n\nvar AuxiliaryUnit = {}; // -------------- AuxiliaryUnit -------------- //\n// constructs a new auxiliary unit object and returns it\n\nAuxiliaryUnit.construct = function (parent) {\n  var obj = {};\n  AuxiliaryUnit.setParentRef(obj, parent);\n  obj.id = null;\n  obj.bbox = null;\n  obj.anchorSide = null;\n  obj.isDisplayed = false;\n  obj.style = null;\n  return obj;\n};\n\nAuxiliaryUnit.getParent = function (mainObj, cy) {\n  var parent = mainObj.parent; // If parent variable stores the id of parent instead of the actual parent get the actual parent by id\n\n  if (typeof parent === 'string') {\n    return cy.getElementById(parent);\n  }\n\n  return parent;\n};\n\nAuxiliaryUnit.setParentRef = function (mainObj, newParent) {\n  if (mainObj && newParent) {\n    // Reference to id instead of the node itself to avaoid circular reference\n    mainObj.parent = typeof newParent === 'string' ? newParent : newParent.id();\n  }\n};\n\nAuxiliaryUnit.checkPoint = function (x, y, node, threshold) {\n  var centerX = node._private.position.x;\n  var centerY = node._private.position.y;\n  var padding = parseInt(node.css('border-width')) / 2;\n  var stateAndInfos = node._private.data.statesandinfos;\n  var cyBaseNodeShapes = cytoscape.baseNodeShapes; //    threshold = parseFloat(threshold);\n\n  for (var i = 0; i < stateAndInfos.length; i++) {\n    var state = stateAndInfos[i];\n\n    if (!state.isDisplayed) {\n      continue;\n    }\n\n    var stateWidth = parseFloat(state.bbox.w) + threshold;\n    var stateHeight = parseFloat(state.bbox.h) + threshold;\n    var coord = AuxiliaryUnit.getAbsoluteCoord(state, node.cy());\n    var stateCenterX = coord.x;\n    var stateCenterY = coord.y;\n    var checkPoint;\n\n    if (state.clazz == \"state variable\") {\n      checkPoint = cyBaseNodeShapes[\"ellipse\"].checkPoint(x, y, padding, stateWidth, stateHeight, stateCenterX, stateCenterY);\n    } else if (state.clazz == \"unit of information\") {\n      checkPoint = cyBaseNodeShapes[\"roundrectangle\"].checkPoint(x, y, padding, stateWidth, stateHeight, stateCenterX, stateCenterY);\n    }\n\n    if (checkPoint == true) {\n      return state;\n    }\n  }\n\n  return null;\n};\n/*\n * Return a new AuxiliaryUnit object. A new parent reference and new id can\n * optionnally be passed.\n */\n\n\nAuxiliaryUnit.copy = function (mainObj, cy, existingInstance, newParent, newId) {\n  var newUnit = existingInstance ? existingInstance : AuxiliaryUnit.construct();\n  var parentToSet = newParent || getAuxUnitClass(mainObj).getParent(mainObj, cy);\n  AuxiliaryUnit.setParentRef(newUnit, parentToSet);\n  newUnit.id = newId ? newId : mainObj.id;\n  newUnit.bbox = jQuery.extend(true, {}, mainObj.bbox);\n  newUnit.coordType = mainObj.coordType;\n  newUnit.anchorSide = mainObj.anchorSide;\n  newUnit.isDisplayed = mainObj.isDisplayed;\n  newUnit.style = mainObj.style;\n  return newUnit;\n}; // draw the auxiliary unit at its position\n\n\nAuxiliaryUnit.draw = function (mainObj, cy, context) {\n  var unitClass = getAuxUnitClass(mainObj);\n  var coords = unitClass.getAbsoluteCoord(mainObj, cy);\n  unitClass.drawShape(mainObj, cy, context, coords.x, coords.y);\n\n  if (unitClass.hasText(mainObj, cy)) {\n    unitClass.drawText(mainObj, cy, context, coords.x, coords.y);\n  }\n\n  mainObj.isDisplayed = true;\n}; // to be implemented by children\n\n\nAuxiliaryUnit.getText = function (mainObj, cy) {\n  throw new Error(\"Abstract method!\");\n};\n\nAuxiliaryUnit.hasText = function (mainObj, cy) {\n  throw new Error(\"Abstract method!\");\n};\n\nAuxiliaryUnit.drawShape = function (mainObj, cy, context, x, y) {\n  var style = mainObj.style;\n  cytoscape.sbgn.drawInfoBox(context, x, y, mainObj.bbox.w, mainObj.bbox.h, style['shape-name']);\n  var tmp_ctxt = context.fillStyle;\n  context.fillStyle = style['background-color'];\n  context.fill();\n  context.fillStyle = tmp_ctxt;\n  var parent = getAuxUnitClass(mainObj).getParent(mainObj, cy);\n  var borderStyle = style.dashed ? 'dashed' : undefined;\n  var borderWidth = style['border-width']; // Selected nodes have a specific border color so infobox should have the same\n  // border color when the node is selected. May need to be updated if style of\n  // selected nodes is updated in a different way.\n\n  var borderColor = parent.selected() ? null : style['border-color'];\n  cytoscape.sbgn.drawBorder({\n    context: context,\n    node: parent,\n    borderStyle: borderStyle,\n    borderColor: borderColor,\n    borderWidth: borderWidth\n  });\n}; // draw the statesOrInfo's label at given position\n\n\nAuxiliaryUnit.drawText = function (mainObj, cy, context, centerX, centerY) {\n  // access the sbgnvizParams set for cy\n  var options = cy.scratch('_sbgnviz').sbgnvizParams.optionUtilities.getOptions();\n  var unitClass = getAuxUnitClass(mainObj);\n  var parent = unitClass.getParent(mainObj, cy);\n  var style = mainObj.style; // part of : $$.sbgn.drawText(context, textProp);\n  // save style before modification\n\n  var oldFont = context.font;\n  var oldStyle = context.fillStyle;\n  var oldOpacity = context.globalAlpha;\n  context.font = style['font-style'] + \" \" + style['font-weight'] + \" \" + style['font-size'] + \"px \" + style['font-family'];\n  context.fillStyle = style['font-color'];\n  context.textAlign = \"center\";\n  context.textBaseline = \"middle\";\n  context.globalAlpha = parent.css('text-opacity') * parent.css('opacity'); // ?\n\n  var text;\n\n  if (options.fitLabelsToInfoboxes()) {\n    // here we memoize the truncated text into _textCache,\n    // as it is not something that changes so much\n    text = unitClass.getText(mainObj, cy);\n    var key = text + context.font + mainObj.bbox.w;\n\n    if (mainObj._textCache && mainObj._textCache[key]) {\n      text = mainObj._textCache[key];\n    } else {\n      text = truncate(unitClass.getText(mainObj, cy), context.font, mainObj.bbox.w);\n\n      if (!mainObj._textCache) {\n        mainObj._textCache = {};\n      }\n\n      mainObj._textCache[key] = text;\n    }\n  } else {\n    text = unitClass.getText(mainObj, cy);\n  }\n\n  context.fillText(text, centerX, centerY); // restore saved style\n\n  context.fillStyle = oldStyle;\n  context.font = oldFont;\n  context.globalAlpha = oldOpacity;\n};\n\nAuxiliaryUnit.getAbsoluteCoord = function (mainObj, cy) {\n  var parent = getAuxUnitClass(mainObj).getParent(mainObj, cy);\n  var position = parent.position();\n  var padding = parent.padding();\n  /* if(parent.data().complexCalculatedPadding){\n    padding = Number(parent.data().complexCalculatedPadding);\n    //delete parent._private.data.complexCalculatedPadding;\n  }else{\n    padding = parent.padding();\n  } */\n\n  var parentWidth = parent.width();\n  var parentHeight = parent.height();\n  var borderWidth = Number(parent.css(\"border-width\").replace(\"px\", \"\")); //parent.data()['border-width'];\n\n  var position = parent.position();\n\n  if (mainObj === undefined || parent === undefined || position === undefined) {\n    return;\n  }\n\n  var borderWidth = parent.data()[\"border-width\"];\n\n  if (borderWidth === undefined) {\n    return;\n  }\n\n  var absX, absY;\n\n  if (mainObj.anchorSide == \"top\" || mainObj.anchorSide == \"bottom\") {\n    absX = mainObj.bbox.x * (parent.outerWidth() - borderWidth) / 100 + (position.x - parentWidth / 2 - padding);\n    absY = mainObj.anchorSide == \"top\" ? position.y - parentHeight / 2 - padding : position.y + parentHeight / 2 + padding;\n  } else {\n    absY = mainObj.bbox.y * (parent.outerHeight() - borderWidth) / 100 + (position.y - parentHeight / 2 - padding);\n    absX = mainObj.anchorSide == \"left\" ? position.x - parentWidth / 2 - padding : position.x + parentWidth / 2 + padding;\n  } // due to corner of barrel shaped compartment shift absX to right\n\n  /*  if (parent.data(\"class\") == \"compartment\"){\n       absX += parent.outerWidth() * 0.1;\n   } */\n\n\n  return {\n    x: absX,\n    y: absY\n  };\n};\n\nAuxiliaryUnit.convertToAbsoluteCoord = function (mainObj, relX, relY, cy) {\n  var parent = getAuxUnitClass(mainObj).getParent(mainObj, cy);\n  var position = parent.position();\n  var padding = parent.padding();\n  var parentWidth = parent.width();\n  var parentHeight = parent.height();\n  var borderWidth = Number(parent.css(\"border-width\").replace(\"px\", \"\"));\n  var absX, absY;\n\n  if (mainObj.anchorSide == \"top\" || mainObj.anchorSide == \"bottom\") {\n    absX = relX * (parent.outerWidth() - borderWidth) / 100 + (position.x - parentWidth / 2 - padding);\n    absY = mainObj.anchorSide == \"top\" ? position.y - parentHeight / 2 - padding : position.y + parentHeight / 2 + padding;\n  } else {\n    absY = relY * (parent.outerHeight() - borderWidth) / 100 + (position.y - parentHeight / 2 - padding);\n    absX = mainObj.anchorSide == \"left\" ? position.x - parentWidth / 2 - padding : position.x + parentWidth / 2 + padding;\n  }\n  /*  if (parent.data(\"class\") == \"compartment\"){\n     absX += parent.outerWidth() * 0.1;\n   }; */\n\n\n  return {\n    x: absX,\n    y: absY\n  };\n};\n\nAuxiliaryUnit.convertToRelativeCoord = function (mainObj, absX, absY, cy, parentNode) {\n  if (mainObj === undefined) {\n    return;\n  }\n\n  if (parentNode !== undefined) {\n    var parent = parentNode;\n  } else {\n    var parent = getAuxUnitClass(mainObj).getParent(mainObj, cy);\n  }\n\n  var position = parent.position();\n  var parentWidth = parent.width();\n  var parentHeight = parent.height();\n  var padding = parent.padding();\n  /*  if(parent.data().complexCalculatedPadding){\n     padding = Number(parent.data().complexCalculatedPadding)\n   }else{\n     padding = parent.padding();\n   } */\n\n  var borderWidth = Number(parent.css(\"border-width\").replace(\"px\", \"\"));\n  /* if (parent.data(\"class\") == \"compartment\"){\n    absX -= parent.outerWidth() * 0.1;\n  } */\n\n  var relX, relY;\n\n  if (mainObj.anchorSide == \"top\" || mainObj.anchorSide == \"bottom\") {\n    relX = (absX - (position.x - parentWidth / 2 - padding)) * 100 / (parent.outerWidth() - borderWidth);\n    relY = mainObj.anchorSide == \"top\" ? 0 : 100;\n  } else {\n    relX = mainObj.anchorSide == \"left\" ? 0 : 100;\n    relY = (absY - (position.y - parentHeight / 2 - padding)) * 100 / (parent.outerHeight() - borderWidth);\n  }\n\n  relX = relX < 0 ? 0 : relX;\n  relX = relX > 100 ? 100 : relX;\n  relY = relY < 0 ? 0 : relY;\n  relY = relY > 100 ? 100 : relY;\n  return {\n    x: relX,\n    y: relY\n  };\n};\n\nAuxiliaryUnit.setAnchorSide = function (mainObj, node) {\n  var thisX = mainObj.bbox.x;\n  var thisY = mainObj.bbox.y;\n  var thisH = mainObj.bbox.h;\n  var thisW = mainObj.bbox.w;\n  var width, height, padding;\n\n  if (node.data(\"originalW\")) {\n    width = node.data(\"originalW\");\n    padding = 0;\n  } else {\n    width = node.width();\n    padding = node.data('class') == \"complex\" ? Number(node.data().complexCalculatedPadding) : node.padding();\n  }\n\n  if (node.data(\"originalH\")) {\n    height = node.data(\"originalH\");\n    padding = 0;\n  } else {\n    height = node.height();\n    padding = node.data('class') == \"complex\" ? Number(node.data().complexCalculatedPadding) : node.padding();\n  }\n\n  var parentX = node.data('class') == \"compartment\" || node.data('class') == \"complex\" ? node.data('bbox').x : node.position().x;\n  var parentY = node.data('class') == \"compartment\" || node.data('class') == \"complex\" ? node.data('bbox').y : node.position().y;\n  var parentX1 = Number((parentX - width / 2 - padding).toFixed(2));\n  var parentX2 = Number((parentX + width / 2 + padding).toFixed(2));\n  var parentY1 = Number((parentY - height / 2 - padding).toFixed(2));\n  var parentY2 = Number((parentY + height / 2 + padding).toFixed(2));\n  var centerX = Number((thisX + thisW / 2).toFixed(2));\n  var centerY = Number((thisY + thisH / 2).toFixed(2));\n\n  if (centerY == parentY1) {\n    mainObj.anchorSide = \"top\";\n  } else if (centerY == parentY2) {\n    mainObj.anchorSide = \"bottom\";\n  } else if (centerX == parentX1) {\n    mainObj.anchorSide = \"left\";\n  } else if (centerX <= parentX2 + 2 && centerX >= parentX2 - 2) {\n    mainObj.anchorSide = \"right\";\n  } else {\n    return false;\n  }\n\n  return true;\n};\n\nAuxiliaryUnit.addToParent = function (mainObj, cy, parentNode, location, position, index) {\n  // add state var to the parent's statesandinfos\n  if (typeof index != \"undefined\") {\n    // specific index provided (for undo/redo consistency)\n    parentNode.data('statesandinfos').splice(index, 0, mainObj);\n  } else {\n    parentNode.data('statesandinfos').push(mainObj);\n  }\n\n  if (!parentNode.data('auxunitlayouts')) {\n    // ensure minimal initialization\n    parentNode.data('auxunitlayouts', {});\n  }\n\n  if (!location) {\n    // location not provided, need to define it automatically\n    location = AuxUnitLayout.selectNextAvailable(parentNode, cy);\n  } // here we are sure to have a location even if it was not provided as argument\n  // get or create the necessary layout\n\n\n  if (!parentNode.data('auxunitlayouts')[location]) {\n    parentNode.data('auxunitlayouts')[location] = AuxUnitLayout.construct(parentNode, location);\n  }\n\n  var layout = parentNode.data('auxunitlayouts')[location];\n  mainObj.anchorSide = location;\n\n  switch (location) {\n    case \"top\":\n      mainObj.bbox.y = 0;\n      break;\n\n    case \"bottom\":\n      mainObj.bbox.y = 100;\n      break;\n\n    case \"left\":\n      mainObj.bbox.x = 0;\n      break;\n\n    case \"right\":\n      mainObj.bbox.x = 100;\n      break;\n  } // add stateVar to layout, precomputing of relative coords will be triggered accordingly\n\n\n  var insertedPosition = AuxUnitLayout.addAuxUnit(layout, cy, mainObj, position);\n  return insertedPosition;\n};\n\nAuxiliaryUnit.removeFromParent = function (mainObj, cy) {\n  var parent = getAuxUnitClass(mainObj).getParent(mainObj, cy);\n  var parentLayout = parent.data('auxunitlayouts')[mainObj.anchorSide];\n  AuxUnitLayout.removeAuxUnit(parentLayout, cy, mainObj);\n\n  if (AuxUnitLayout.isEmpty(parentLayout)) {\n    delete parent.data('auxunitlayouts')[mainObj.anchorSide];\n  }\n\n  var statesandinfos = parent.data('statesandinfos');\n  var index = statesandinfos.indexOf(mainObj);\n  statesandinfos.splice(index, 1);\n};\n\nAuxiliaryUnit.getPositionIndex = function (mainObj, cy) {\n  return getAuxUnitClass(mainObj).getParent(mainObj, cy).data('auxunitlayouts')[mainObj.anchorSide].units.indexOf(mainObj);\n};\n\nns.AuxiliaryUnit = AuxiliaryUnit; // -------------- END AuxiliaryUnit -------------- //\n// -------------- StateVariable -------------- //\n\n/**\n * parent has to be a stateful EPN (complex, macromolecule or nucleic acid)\n */\n\nvar StateVariable = {}; // StateVariable extends AuxiliaryUnit by inheriting each static property of it\n\nfor (var prop in AuxiliaryUnit) {\n  StateVariable[prop] = AuxiliaryUnit[prop];\n} // Construct a state variable object by extending default behaviours of a AuxiliaryUnit object and returns that object\n\n\nStateVariable.construct = function (value, stateVariableDefinition, parent, id) {\n  var obj = AuxiliaryUnit.construct(parent);\n  obj.id = id || elementUtilities.generateStateVarId();\n  obj.state = {};\n  obj.state.value = value;\n  obj.state.variable = null;\n  obj.stateVariableDefinition = stateVariableDefinition;\n  obj.clazz = \"state variable\";\n  return obj;\n};\n\nStateVariable.getText = function (mainObj) {\n  var stateValue = mainObj.state.value || '';\n  var stateVariable = mainObj.state.variable ? \"@\" + mainObj.state.variable : \"\";\n  return stateValue + stateVariable;\n};\n\nStateVariable.hasText = function (mainObj) {\n  return mainObj.state.value && mainObj.state.value != \"\" || mainObj.state.variable && mainObj.state.variable != \"\";\n};\n/*this function is called upon creation of state variable and it returns the location information of the added state variable\n*/\n\n\nStateVariable.create = function (parentNode, cy, value, variable, bbox, location, position, style, index, id) {\n  // create the new state var of info\n  var stateVar = StateVariable.construct();\n  StateVariable.setParentRef(stateVar, parentNode);\n  stateVar.value = value;\n  stateVar.variable = variable;\n  stateVar.state = {\n    value: value,\n    variable: variable\n  };\n  stateVar.bbox = bbox;\n  stateVar.style = style;\n\n  if (id) {\n    stateVar.id = id;\n  } // link to layout\n\n\n  position = StateVariable.addToParent(stateVar, cy, parentNode, location, position, index);\n  return {\n    index: StateVariable.getParent(stateVar, cy).data('statesandinfos').indexOf(stateVar),\n    location: stateVar.anchorSide,\n    position: position\n  };\n};\n\nStateVariable.remove = function (mainObj, cy) {\n  var position = StateVariable.getPositionIndex(mainObj, cy);\n  var index = StateVariable.getParent(mainObj, cy).data('statesandinfos').indexOf(mainObj);\n  StateVariable.removeFromParent(mainObj, cy); //console.log(\"after remove\", this.parent.data('auxunitlayouts'), this.parent.data('statesandinfos'));\n\n  return {\n    clazz: \"state variable\",\n    state: {\n      value: mainObj.state.value,\n      variable: mainObj.state.variable\n    },\n    bbox: {\n      w: mainObj.bbox.w,\n      h: mainObj.bbox.h\n    },\n    location: mainObj.anchorSide,\n    position: position,\n    index: index,\n    style: mainObj.style\n  };\n};\n\nStateVariable.copy = function (mainObj, cy, newParent, newId) {\n  var newStateVar = AuxiliaryUnit.copy(mainObj, cy, StateVariable.construct(), newParent, newId);\n  newStateVar.state = jQuery.extend(true, {}, mainObj.state);\n  newStateVar.stateVariableDefinition = mainObj.stateVariableDefinition;\n  newStateVar.clazz = mainObj.clazz;\n  return newStateVar;\n};\n\nns.StateVariable = StateVariable; // -------------- END StateVariable -------------- //\n// -------------- UnitOfInformation -------------- //\n\n/**\n * parent can be an EPN, compartment or subunit\n */\n\nvar UnitOfInformation = {}; // UnitOfInformation extends AuxiliaryUnit by inheriting each static property of it\n\nfor (var prop in AuxiliaryUnit) {\n  UnitOfInformation[prop] = AuxiliaryUnit[prop];\n} // Constructs a UnitOfInformation object by extending properties of an AuxiliaryUnit object and return that object\n\n\nUnitOfInformation.construct = function (value, parent, id) {\n  var obj = AuxiliaryUnit.construct(parent);\n  obj.id = id || elementUtilities.generateUnitOfInfoId();\n  obj.label = {\n    text: value\n  }; // from legacy code, contains {text: }\n\n  obj.clazz = \"unit of information\";\n  return obj;\n};\n\nUnitOfInformation.getText = function (mainObj) {\n  return mainObj.label.text;\n};\n\nUnitOfInformation.hasText = function (mainObj) {\n  return mainObj.label.text && mainObj.label.text != \"\";\n};\n/**\n * Creates a unit of info and links everything accordingly\n * @param parentNode - the cytoscape element hosting the unit of information\n * @param value - its text\n * @param [location] - the side where it will be placed top, bottom, right, left or undefined (auto placement)\n * @param [position] - its position in the order of elements placed on the same location\n * @param [index] - its index in the statesandinfos list\n */\n\n\nUnitOfInformation.create = function (parentNode, cy, value, bbox, location, position, style, index, id) {\n  // create the new unit of info\n  var unit = UnitOfInformation.construct(value, parentNode);\n  unit.bbox = bbox;\n  unit.style = style;\n\n  if (id) {\n    unit.id = id;\n  } //console.log(\"will insert on\", location, position);\n\n\n  position = UnitOfInformation.addToParent(unit, cy, parentNode, location, position, index);\n  return {\n    index: UnitOfInformation.getParent(unit, cy).data('statesandinfos').indexOf(unit),\n    location: unit.anchorSide,\n    position: position\n  };\n};\n\nUnitOfInformation.remove = function (mainObj, cy) {\n  var position = UnitOfInformation.getPositionIndex(mainObj, cy);\n  var index = UnitOfInformation.getParent(mainObj, cy).data('statesandinfos').indexOf(mainObj);\n  UnitOfInformation.removeFromParent(mainObj, cy); //console.log(\"after remove\", this.parent.data('auxunitlayouts'), this.parent.data('statesandinfos'));\n\n  return {\n    clazz: \"unit of information\",\n    label: {\n      text: mainObj.label.text\n    },\n    bbox: {\n      w: mainObj.bbox.w,\n      h: mainObj.bbox.h\n    },\n    location: mainObj.anchorSide,\n    position: position,\n    index: index,\n    style: mainObj.style\n  };\n};\n\nUnitOfInformation.copy = function (mainObj, cy, newParent, newId) {\n  var newUnitOfInfo = AuxiliaryUnit.copy(mainObj, cy, UnitOfInformation.construct(), newParent, newId);\n  newUnitOfInfo.label = jQuery.extend(true, {}, mainObj.label);\n  newUnitOfInfo.clazz = mainObj.clazz;\n  return newUnitOfInfo;\n};\n\nns.UnitOfInformation = UnitOfInformation; // -------------- END UnitOfInformation -------------- //\n// -------------- EntityType -------------- //\n\n/**\n * The type of the EPN, for example there can be severals myosin EPN, but only one myosin EntityType\n * This class will hold the information regarding state variable, that are shared between all myosins\n */\n\nvar EntityType = {}; // Constructs an EntityType object and returns it\n\nEntityType.construct = function (name, EPN) {\n  var obj = {};\n  obj.name = name; // normally the same as its EPNs\n\n  obj.stateVariableDefinitions = []; // 0 or many shared state definitions\n\n  obj.EPNs = []; // there should always be at least 1 element, else no reason to exist\n\n  return obj;\n};\n\nEntityType.createNewDefinitionFor = function (mainObj, stateVar) {\n  var newDefinition = StateVariableDefinition.construct();\n  newDefinition.entityType = mainObj;\n  newDefinition.stateVariables.push(stateVar);\n  stateVar.stateVariableDefinition = newDefinition;\n  stateVar.parent.data('entityType', mainObj);\n  mainObj.stateVariableDefinitions.push(newDefinition);\n};\n\nEntityType.assignStateVariable = function (mainObj, stateVar) {\n  // first trivial case, no stateDefinition yet for this entityType, so this is a new one\n  if (mainObj.stateVariableDefinitions.length == 0) {\n    EntityType.createNewDefinitionFor(mainObj, stateVar);\n  } else {\n    // if definitions are already present, we need to match those to the current stateVariable\n    for (var i = 0; i < mainObj.stateVariableDefinitions.length; i++) {\n      var matchStateDef = mainObj.stateVariableDefinitions[i];\n\n      if (StateVariableDefinition.matchStateVariable(matchStateDef, stateVar)) {\n        matchStateDef.stateVariables.push(stateVar);\n        stateVar.stateVariableDefinition = matchStateDef;\n        stateVar.parent.data('entityType', mainObj);\n        return;\n      }\n    } // if nothing was matched among the current stateVarDef of this entityType, create new one\n\n\n    EntityType.createNewDefinitionFor(mainObj, stateVar);\n  }\n};\n\nns.EntityType = EntityType; // -------------- END EntityType -------------- //\n// -------------- StateVariableDefinition -------------- //\n\n/**\n * The state variable definition is something shared across different EPNs\n * The concerned EPNs are linked through the entitype reference\n */\n\nvar StateVariableDefinition = {}; // Constructs a new StateVariableDefinition object and returns it\n\nStateVariableDefinition.construct = function (name, entityType) {\n  var obj = {};\n  obj.name = name;\n  obj.entityType = entityType; // reference to owning entity type\n\n  obj.stateVariables = []; // there should always be at least 1 element, else no reason to exist\n\n  return obj;\n};\n/**\n * returns an array of elements that share this state definition\n */\n\n\nStateVariableDefinition.getConcernedEPNs = function (mainObj) {\n  return mainObj.entityType.EPNs;\n};\n/**\n * Guess if the provided stateVariable belongs to this stateVarDefinition\n * We consider it does, if either the statevar.value or statevar.variable are matching one\n * if the statevar in the set of the StateVarDef\n * This is because we normally compare only stateVariables from the same entityType\n */\n\n\nStateVariableDefinition.matchStateVariable = function (mainObj, stateVar) {\n  for (var i = 0; i < mainObj.stateVariables.length; i++) {\n    var matchStateVar = mainObj.stateVariables[i]; // Don't match a stateVar against another one from the same element.\n    // If 2 statevar on the same element, then they have to belong to 2 different stateVarDefinitions\n\n    if (matchStateVar.parent === stateVar.parent) {\n      continue;\n    } //console.log(\"try\", [matchStateVar.value, matchStateVar.variable], [stateVar.value, stateVar.variable]);\n    // normal sure case. Example:\n    // P T134 - undefined T134\n    // P undef - P undef\n\n\n    if ( //(matchStateVar.value && stateVar.value && matchStateVar.value == stateVar.value ) ||\n    matchStateVar.variable && stateVar.variable && matchStateVar.variable == stateVar.variable) {\n      return true;\n    } // more subtle case, with empty stateVar. Look only at value and discard variable\n    // example: undef undef - P undef\n    else if (!matchStateVar.variable && !stateVar.variable && (matchStateVar.value || stateVar.value)) {\n        return true;\n      }\n  }\n\n  return false;\n};\n\nns.StateVariableDefinition = StateVariableDefinition; // -------------- END StateVariableDefinition -------------- //\n// -------------- AuxUnitLayout -------------- //\n\n/**\n * Responsible for laying out the auxiliary units contained on a same edge\n */\n\nvar AuxUnitLayout = {};\n\nAuxUnitLayout.construct = function (parentNode, location, alignment) {\n  var obj = {};\n  obj.units = [];\n  obj.location = location;\n  obj.alignment = alignment || \"left\"; // this was intended to be used, but it isn't for now\n\n  AuxUnitLayout.setParentNodeRef(obj, parentNode);\n  obj.renderLengthCache = [];\n  obj.lengthUsed = 0; // specific rules for the layout\n\n  if (parentNode.data('class') == \"simple chemical\") {\n    obj.outerMargin = 3;\n  }\n\n  return obj;\n};\n\nAuxUnitLayout.getParentNode = function (mainObj, cy) {\n  //console.log(mainObj);\n  var parentNode = mainObj.parentNode; // If parentNode is id of parent node rather than being itself get the parent node by that id\n\n  if (typeof parentNode === 'string') {\n    return cy.getElementById(parentNode);\n  }\n\n  return parentNode;\n};\n\nAuxUnitLayout.setParentNodeRef = function (mainObj, parentNode) {\n  if (mainObj && parentNode) {\n    // Keep id of parent node to avaoid circular references\n    mainObj.parentNode = typeof parentNode === 'string' ? parentNode : parentNode.id();\n  }\n};\n/**\n * outerMargin: the left and right space left between the side of the node, and the first (and last) box\n * unitGap: the space between the auxiliary units\n * alwaysShowAuxUnits: bypasses any limit of units displayed, and prevent units from disappearing,\n * forcing a minimum size for the node\n * maxUnitDisplayed: show at most this amount of units, even when there is enough space\n *\n * These options can be defined at the instance level. If it is found in an instance, then it\n * takes precedence. If not found, the following class' values are used.\n */\n\n\nAuxUnitLayout.outerMargin = 5;\nAuxUnitLayout.unitGap = 5;\nAuxUnitLayout.currentTopUnitGap = 5;\nAuxUnitLayout.currentBottomUnitGap = 5;\nAuxUnitLayout.currentLeftUnitGap = 5;\nAuxUnitLayout.currentRightUnitGap = 5;\nAuxUnitLayout.alwaysShowAuxUnits = true;\nAuxUnitLayout.maxUnitDisplayed = -1;\nAuxUnitLayout.lastPos = -1;\n\nAuxUnitLayout.update = function (mainObj, cy) {//AuxUnitLayout.precomputeCoords(mainObj, cy);\n};\n\nAuxUnitLayout.addAuxUnit = function (mainObj, cy, unit, position, preComputed) {\n  if (typeof position != \"undefined\") {\n    //console.log(\"add unit at positiion\", position);\n    mainObj.units.splice(position, 0, unit);\n  } else {\n    mainObj.units.push(unit);\n    position = mainObj.units.length - 1;\n  }\n\n  if (preComputed === undefined || preComputed === false) {\n    AuxUnitLayout.computeCoords(mainObj, cy, unit);\n    var parentNode = AuxUnitLayout.getParentNode(mainObj, cy);\n    var locations = AuxUnitLayout.checkFit(parentNode, cy);\n\n    if (locations.filter(function (loc) {\n      return loc == mainObj.location;\n    }).length > 0) {\n      AuxUnitLayout.fitUnits(parentNode, cy, [mainObj.location]);\n    }\n  } //AuxUnitLayout.updateLengthCache(mainObj, cy);\n  //AuxUnitLayout.update(mainObj, cy, true);\n\n  /*if (AuxUnitLayout.getAlwaysShowAuxUnits(mainObj)) {\n    // set a minimum size according to both sides on the same orientation\n    AuxUnitLayout.setParentMinLength(mainObj, cy);\n    // need to resize the parent in case the space was too small\n    AuxUnitLayout.resizeParent(mainObj, cy, mainObj.lengthUsed);\n  }*/\n  //cy.style().update(); // <- was it really necessary ?\n\n\n  return position;\n};\n\nAuxUnitLayout.computeCoords = function (mainObj, cy, unit) {\n  AuxUnitLayout.setDisplayedUnits(mainObj, cy);\n  var location = mainObj.location;\n  var node = AuxUnitLayout.getParentNode(mainObj, cy);\n\n  if (location === \"top\" || location === \"bottom\") {\n    var position = node.position();\n    var parentWidth = node.data('bbox').w;\n    var padding = node.padding();\n    var parentWidth = node.width();\n    var parentHeight = node.height();\n    var parentX1 = position.x - parentWidth / 2 - padding;\n    var parentX2 = position.x + parentWidth / 2 + padding;\n    var parentY1 = position.y - parentHeight / 2 - padding;\n    var parentY2 = position.y + parentHeight / 2 + padding;\n\n    if (mainObj.units.length === 1) {\n      var relativeCoords = AuxiliaryUnit.convertToRelativeCoord(unit, unit.bbox.w / 2 + parentX1 + AuxUnitLayout.getCurrentGap(location), parentY1 + AuxUnitLayout.getCurrentGap(location), cy);\n      unit.bbox.x = relativeCoords.x;\n      unit.bbox.y = relativeCoords.y;\n    } else {\n      var lastUnit = mainObj.units[mainObj.units.length - 2]; //Get the position of the last unit\n\n      var lastUnitAbsCord = AuxiliaryUnit.convertToAbsoluteCoord(lastUnit, lastUnit.bbox.x, lastUnit.bbox.y, cy);\n      var relativeCoords = AuxiliaryUnit.convertToRelativeCoord(unit, unit.bbox.w / 2 + lastUnitAbsCord.x + lastUnit.bbox.w / 2 + AuxUnitLayout.getCurrentGap(location), parentY1 + AuxUnitLayout.getCurrentGap(location), cy);\n      unit.bbox.x = relativeCoords.x;\n      unit.bbox.y = relativeCoords.y; // unit.bbox.x = mainObj.units[lastUnit].bbox.x +  mainObj.units[lastUnit].bbox.w/2 + unit.bbox.w/2 + AuxUnitLayout.getCurrentGap(location);\n    }\n\n    unit.bbox.y = location === \"top\" ? 0 : 100;\n  } //We don't have the right or left addition cases yet\n\n};\n\nAuxUnitLayout.removeAuxUnit = function (mainObj, cy, unit) {\n  var index = mainObj.units.indexOf(unit);\n  mainObj.units.splice(index, 1); //AuxUnitLayout.updateLengthCache(mainObj, cy);\n\n  /*AuxUnitLayout.update(mainObj, cy, true);\n  if (AuxUnitLayout.getAlwaysShowAuxUnits(mainObj)) {\n    // set a minimum size according to both sides on the same orientation\n    AuxUnitLayout.setParentMinLength(mainObj, cy);\n  }*/\n\n  var parentNode = AuxUnitLayout.getParentNode(mainObj, cy); //TODO find a way to elimate this redundancy to update info-box positions\n\n  parentNode.data('border-width', parentNode.data('border-width'));\n};\n/**\n * reorder boxes using their defined positions. From left to right and top to bottom.\n * this ensures that their order in the layout's list corresponds to the reality of the map.\n */\n\n\nAuxUnitLayout.reorderFromPositions = function (mainObj, cy) {\n  mainObj.units.sort(function (a, b) {\n    if (mainObj.location == \"top\" || mainObj.location == \"bottom\") {\n      if (a.bbox.x < b.bbox.x) {\n        return -1;\n      }\n\n      if (a.bbox.x > b.bbox.x) {\n        return 1;\n      }\n    } else {\n      if (a.bbox.y < b.bbox.y) {\n        return -1;\n      }\n\n      if (a.bbox.y > b.bbox.y) {\n        return 1;\n      }\n    }\n\n    return 0;\n  }); //console.log(\"units after reoarder\", this.units);\n\n  /*AuxUnitLayout.updateLengthCache(mainObj, cy);\n  AuxUnitLayout.update(mainObj, cy, true);*/\n};\n/**\n * use a cached list to determine what is the length needed to draw x aux units.\n * can then be compared against the parent node's dimensions, to decide how many\n * aux units to draw.\n */\n\n\nAuxUnitLayout.updateLengthCache = function (mainObj, cy) {\n  mainObj.renderLengthCache = [0];\n  var previous = AuxUnitLayout.getOuterMargin(mainObj);\n\n  for (var i = 0; i < mainObj.units.length; i++) {\n    var currentLength;\n\n    if (AuxUnitLayout.isTorB(mainObj)) {\n      currentLength = mainObj.units[i].bbox.w;\n    } else {\n      currentLength = mainObj.units[i].bbox.h;\n    }\n\n    mainObj.renderLengthCache.push(previous + currentLength + AuxUnitLayout.getOuterMargin(mainObj));\n    previous += currentLength + AuxUnitLayout.getUnitGap(mainObj);\n  }\n};\n/**\n * Use the cached precomputed lengths to decide how many units we are capable of drawing,\n * considering the size of the parent node.\n * The number returned says: we are able to draw the N first units of the lists.\n * Unused for now.\n */\n\n\nAuxUnitLayout.getDrawableUnitAmount = function (mainObj) {\n  if (AuxUnitLayout.getAlwaysShowAuxUnits(mainObj)) {\n    // bypass all this\n    return mainObj.units.length;\n  } // get the length of the side on which we draw\n\n\n  var availableSpace;\n\n  if (AuxUnitLayout.isTorB(mainObj)) {\n    availableSpace = AuxUnitLayout.getParentNode(mainObj, cy).outerWidth();\n  } else {\n    availableSpace = AuxUnitLayout.getParentNode(mainObj, cy).outerHeight();\n  } // loop over the cached precomputed lengths\n\n\n  for (var i = 0; i < mainObj.renderLengthCache.length; i++) {\n    if (mainObj.renderLengthCache[i] > availableSpace) {\n      // stop if we overflow\n      return i - 1;\n    }\n  }\n\n  return mainObj.units.length;\n};\n\nAuxUnitLayout.setDisplayedUnits = function (mainObj, cy) {\n  // get the length of the side on which we draw\n  var availableSpace;\n\n  if (AuxUnitLayout.isTorB(mainObj)) {\n    availableSpace = AuxUnitLayout.getParentNode(mainObj, cy).outerWidth(); // due to corner of barrel shaped compartment decrease availableSpace -- no infobox on corners\n\n    if (AuxUnitLayout.getParentNode(mainObj, cy).data(\"class\") == \"compartment\") availableSpace *= 0.8;\n  } else {\n    availableSpace = AuxUnitLayout.getParentNode(mainObj, cy).outerHeight();\n  } // there is always n+1 elements in the cachedLength for n units\n\n\n  var alwaysShowAuxUnits = AuxUnitLayout.getAlwaysShowAuxUnits(mainObj);\n  var maxUnitDisplayed = AuxUnitLayout.getMaxUnitDisplayed(mainObj);\n\n  for (var i = 0; i < mainObj.units.length; i++) {\n    if (mainObj.renderLengthCache[i + 1] <= availableSpace // do we have enough space?\n    && (maxUnitDisplayed == -1 || i < maxUnitDisplayed) || // is there no limit? or are we under that limit?\n    alwaysShowAuxUnits) {\n      // do we always want to show everything regardless?\n      mainObj.units[i].isDisplayed = true;\n    } else {\n      mainObj.units[i].isDisplayed = false;\n    }\n  }\n};\n\nAuxUnitLayout.getUsedWidth = function (node, tb) {\n  var units = tb.units;\n  var totalWidth = 0;\n\n  for (var i = 0; i < units.length; i++) {\n    totalWidth += units[i].bbox.w;\n  }\n\n  return totalWidth;\n};\n\nAuxUnitLayout.getUsedHeight = function (node, tb) {\n  var units = tb.units;\n  var totalHeight = 0;\n\n  for (var i = 0; i < units.length; i++) {\n    totalHeight += units[i].bbox.h;\n  }\n\n  return totalHeight;\n};\n\nAuxUnitLayout.getUsedLengthTB = function (node, tb) {\n  var units = tb.units;\n  return AuxUnitLayout.getUsedWidth(node, tb) + (units.length + 1) * AuxUnitLayout.unitGap; //One gap for leftmost outer margin\n};\n\nAuxUnitLayout.getUsedLengthLR = function (node, tb) {\n  var units = tb.units;\n  return AuxUnitLayout.getUsedHeight(node, tb) + (units.length + 1) * AuxUnitLayout.unitGap; //One gap for leftmost outer margin\n};\n\nAuxUnitLayout.setCurrentGap = function (location, value) {\n  if (location === \"top\") {\n    AuxUnitLayout.currentTopUnitGap = value;\n  } else if (location === \"bottom\") {\n    AuxUnitLayout.currentBottomUnitGap = value;\n  } else if (location === \"right\") {\n    AuxUnitLayout.currentRightUnitGap = value;\n  } else {\n    AuxUnitLayout.currentLeftUnitGap = value;\n  }\n};\n\nAuxUnitLayout.getCurrentGap = function (location) {\n  if (location === \"top\") {\n    return AuxUnitLayout.currentTopUnitGap;\n  } else if (location === \"bottom\") {\n    return AuxUnitLayout.currentBottomUnitGap;\n  } else if (location === \"right\") {\n    return AuxUnitLayout.currentRightUnitGap;\n  } else {\n    return AuxUnitLayout.currentLeftUnitGap;\n  }\n};\n\nAuxUnitLayout.checkFit = function (node, cy, forceCheck) {\n  var fitLocations = [];\n\n  for (var location in node.data('auxunitlayouts')) {\n    if (forceCheck !== undefined && location !== forceCheck) {\n      continue;\n    }\n\n    if (AuxUnitLayout.getCurrentGap(location) < AuxUnitLayout.unitGap) {\n      fitLocations.push(location);\n      continue;\n    }\n\n    var unit = node.data('auxunitlayouts')[location];\n    var units = unit.units;\n\n    if (units.length === 0) {\n      continue;\n    }\n\n    var firstUnit = units[0];\n    var lastUnit = units[units.length - 1];\n    var coordsFirst = AuxiliaryUnit.convertToAbsoluteCoord(firstUnit, firstUnit.bbox.x, firstUnit.bbox.y, cy);\n    var coordsLast = AuxiliaryUnit.convertToAbsoluteCoord(lastUnit, lastUnit.bbox.x, lastUnit.bbox.y, cy);\n    var gap = AuxUnitLayout.getCurrentGap(location);\n    var padding = node.padding();\n\n    if (units.length > 0) {\n      //For any case of removal\n      if (location === \"top\" || location === \"bottom\") {\n        var parentX1 = node.position().x - node.width() / 2 - padding;\n        var parentX2 = node.position().x + node.width() / 2 + padding;\n        var firstX1 = coordsFirst.x - firstUnit.bbox.w / 2;\n        var lastX2 = coordsLast.x + lastUnit.bbox.w / 2;\n\n        if (parentX2 < lastX2 + gap) {\n          fitLocations.push(location);\n        }\n        /* if (parentX1 + gap > firstX1 || parentX2 - gap < lastX2) {\n            fitLocations.push(location);\n        } */\n\n      } else {\n        var parentY1 = node.position().y - node.height() / 2 - padding;\n        var parentY2 = node.position().y + node.height() / 2 + padding;\n        var firstY1 = coordsFirst.y - firstUnit.bbox.h / 2;\n        var lastY2 = coordsLast.y + lastUnit.bbox.h / 2;\n\n        if (parentY2 < lastY2 + gap) {\n          fitLocations.push(location);\n        }\n        /* if (parentY1 + gap > firstY1 || parentY2 - gap < lastY2) {\n            fitLocations.push(location);\n        } */\n\n      }\n    }\n  }\n\n  return fitLocations;\n};\n\nAuxUnitLayout.setIdealGap = function (node, location) {\n  var parentWidth = node.width();\n  var parentHeight = node.height();\n  var padding = node.padding();\n  var position = node.position();\n  var parentX1 = position.x - parentWidth / 2 - padding;\n  var parentY1 = position.y - parentHeight / 2 - padding;\n  var estimatedGap;\n  var auxUnit = node.data('auxunitlayouts')[location];\n\n  if (auxUnit === undefined) {\n    return 0;\n  }\n\n  if (auxUnit.units.length <= 0 || !auxUnit.units) {\n    return 0;\n  }\n\n  var units = auxUnit.units;\n\n  if (location === \"top\" || location === \"bottom\") {\n    usedLength = AuxUnitLayout.getUsedLengthTB(node, auxUnit);\n    var totalWidth = AuxUnitLayout.getUsedWidth(node, auxUnit);\n    estimatedGap = (parentWidth + 2 * padding - totalWidth) / (units.length + 1);\n\n    if (estimatedGap > AuxUnitLayout.unitGap) {\n      estimatedGap = AuxUnitLayout.unitGap;\n    } //var firstPosition = AuxiliaryUnit.convertToRelativeCoord(units[0], unit[0].bbox.w/2 + (parentX1) + estimatedGap, (parentY1) + estimatedGap, undefined, node);//Position of the first unit\n\n\n    var usedLength = estimatedGap;\n\n    for (var i = 0; i < units.length; i++) {\n      var relativeCord = AuxiliaryUnit.convertToRelativeCoord(units[i], parentX1 + usedLength + units[i].bbox.w / 2, parentY1, undefined, node);\n      units[i].bbox.x = relativeCord.x;\n      units[i].bbox.y = relativeCord.y;\n      usedLength += units[i].bbox.w + estimatedGap;\n    }\n\n    AuxUnitLayout.setCurrentGap(location, estimatedGap);\n  } else {\n    //Find total left length\n    usedLength = AuxUnitLayout.getUsedLengthLR(node, auxUnit); //Compare the side lengths\n\n    var totalHeight = AuxUnitLayout.getUsedHeight(node, auxUnit);\n    estimatedGap = (parentHeight + 2 * padding - totalHeight) / (units.length + 1);\n\n    if (estimatedGap > AuxUnitLayout.unitGap) {\n      estimatedGap = AuxUnitLayout.unitGap;\n    } //Else scale by using available space, reducing margins and gaps.\n    //Check if new gap is enough to fit\n\n\n    var usedLength = estimatedGap;\n\n    for (var i = 0; i < units.length; i++) {\n      var relativeCord = AuxiliaryUnit.convertToRelativeCoord(units[i], parentX1, parentY1 + usedLength + units[i].bbox.h / 2, undefined, node);\n      units[i].bbox.x = relativeCord.x;\n      units[i].bbox.y = relativeCord.y;\n      usedLength += units[i].bbox.h + estimatedGap;\n    } //AuxUnitLayout.currentLeftUnitGap = estimatedGap;\n\n  }\n\n  AuxUnitLayout.setCurrentGap(location, estimatedGap);\n};\n\nAuxUnitLayout.fitUnits = function (node, cy, locations) {\n  var parentWidth = node.width();\n  var parentHeight = node.height();\n  var padding = node.padding();\n  var position = node.position();\n  var parentX1 = position.x - parentWidth / 2 - padding;\n  var parentX2 = position.x + parentWidth / 2 + padding;\n  var parentY1 = position.y - parentHeight / 2 - padding;\n  var parentY2 = position.y + parentHeight / 2 + padding; //Get Parent node and find parent width\n\n  var estimatedGap;\n\n  for (var index = 0; index < locations.length; index++) {\n    var location = locations[index];\n    var auxUnit = node.data('auxunitlayouts')[location];\n\n    if (auxUnit === undefined) {\n      continue;\n    }\n\n    if (auxUnit.units.length <= 0 || !auxUnit.units) {\n      continue;\n    }\n\n    var units = auxUnit.units;\n\n    if (location === \"top\" || location === \"bottom\") {\n      usedLength = AuxUnitLayout.getUsedLengthTB(node, auxUnit);\n      var totalWidth = AuxUnitLayout.getUsedWidth(node, auxUnit);\n      estimatedGap = (parentWidth + 2 * padding - totalWidth) / (units.length + 1);\n\n      if (estimatedGap > AuxUnitLayout.unitGap) {\n        estimatedGap = AuxUnitLayout.unitGap;\n      } //var firstPosition = AuxiliaryUnit.convertToRelativeCoord(units[0], unit[0].bbox.w/2 + (parentX1) + estimatedGap, (parentY1) + estimatedGap, undefined, node);//Position of the first unit\n\n\n      var usedLength = estimatedGap;\n\n      for (var i = 0; i < units.length; i++) {\n        var relativeCord = AuxiliaryUnit.convertToRelativeCoord(units[i], parentX1 + usedLength + units[i].bbox.w / 2, parentY1, undefined, node);\n        units[i].bbox.x = relativeCord.x;\n        units[i].bbox.y = relativeCord.y;\n        usedLength += units[i].bbox.w + estimatedGap;\n      }\n\n      AuxUnitLayout.setCurrentGap(location, estimatedGap);\n    } else {\n      //Find total left length\n      usedLength = AuxUnitLayout.getUsedLengthLR(node, auxUnit); //Compare the side lengths\n\n      var totalHeight = AuxUnitLayout.getUsedHeight(node, auxUnit);\n      estimatedGap = (parentHeight + 2 * padding - totalHeight) / (units.length + 1);\n\n      if (estimatedGap > AuxUnitLayout.unitGap) {\n        estimatedGap = AuxUnitLayout.unitGap;\n      } //Else scale by using available space, reducing margins and gaps.\n      //Check if new gap is enough to fit\n\n\n      var usedLength = estimatedGap;\n\n      for (var i = 0; i < units.length; i++) {\n        var relativeCord = AuxiliaryUnit.convertToRelativeCoord(units[i], parentX1, parentY1 + usedLength + units[i].bbox.h / 2, undefined, node);\n        units[i].bbox.x = relativeCord.x;\n        units[i].bbox.y = relativeCord.y;\n        usedLength += units[i].bbox.h + estimatedGap;\n      } //AuxUnitLayout.currentLeftUnitGap = estimatedGap;\n\n    }\n\n    AuxUnitLayout.setCurrentGap(location, estimatedGap);\n  } //TODO find a way to elimate this redundancy to update info-box positions\n\n\n  node.data('border-width', node.data('border-width'));\n}; // Calculate total length used in a side\n// TODO find a way to refactor, remove ugliness of top-bottom/left-right.\n\n\nAuxUnitLayout.precomputeCoords = function (mainObj, cy, doForceUpdate) {\n  AuxUnitLayout.setDisplayedUnits(mainObj, cy);\n  var lengthUsed = AuxUnitLayout.getOuterMargin(mainObj);\n  var finalLengthUsed = lengthUsed;\n  var unitGap = AuxUnitLayout.getUnitGap(mainObj);\n  var parentNode = AuxUnitLayout.getParentNode(mainObj, cy);\n\n  for (var i = 0; i < mainObj.units.length; i++) {\n    // change the coordinate system of the auxiliary unit according to the chosen layout\n    var auxUnit = mainObj.units[i];\n\n    if (auxUnit.coordType != \"relativeToSide\" || doForceUpdate) {\n      if (auxUnit.coordType == \"relativeToCenter\" || doForceUpdate) {\n        if (AuxUnitLayout.isTorB(mainObj)) {\n          //auxUnit.bbox.y = 0;\n          auxUnit.bbox.x = lengthUsed + auxUnit.bbox.w / 2;\n        } else {\n          //auxUnit.bbox.x = 0;\n          auxUnit.bbox.y = lengthUsed + auxUnit.bbox.h / 2;\n        }\n      }\n\n      auxUnit.coordType = \"relativeToSide\";\n    }\n\n    if (AuxUnitLayout.isTorB(mainObj)) {\n      //auxUnit.bbox.y = 0;\n      lengthUsed += auxUnit.bbox.w + unitGap;\n    } else {\n      //auxUnit.bbox.x = 0;\n      lengthUsed += auxUnit.bbox.h + unitGap;\n    }\n\n    if (auxUnit.isDisplayed) {\n      finalLengthUsed = lengthUsed;\n    }\n  } // adjust the length, should be composed of outerMargin on the end, not unitGap\n\n\n  finalLengthUsed = finalLengthUsed - unitGap + AuxUnitLayout.getOuterMargin(mainObj);\n  mainObj.lengthUsed = finalLengthUsed;\n};\n\nAuxUnitLayout.draw = function (mainObj, cy, context) {\n  for (var i = 0; i < mainObj.units.length; i++) {\n    var auxUnit = mainObj.units[i];\n    getAuxUnitClass(auxUnit).draw(auxUnit, cy, context);\n  }\n};\n\nAuxUnitLayout.modifyUnits = function (parentNode, unit, oldLocation, cy) {\n  var location = unit.anchorSide;\n  var posX = unit.bbox.x;\n  var posY = unit.bbox.y;\n\n  if (!parentNode.data('auxunitlayouts')[oldLocation]) {\n    parentNode.data('auxunitlayouts')[oldLocation] = AuxUnitLayout.construct(parentNode, oldLocation);\n  }\n\n  var oldAuxUnit = parentNode.data('auxunitlayouts')[oldLocation];\n  var deleteUnits = oldAuxUnit.units; //Delete from old location\n\n  var deleteIndex;\n\n  for (var i = 0; i < deleteUnits.length; i++) {\n    if (deleteUnits[i] === unit) {\n      deleteIndex = i;\n      break;\n    }\n  }\n\n  deleteUnits.splice(deleteIndex, 1); //If new is not constructed contruct interval\n\n  if (!parentNode.data('auxunitlayouts')[location]) {\n    parentNode.data('auxunitlayouts')[location] = AuxUnitLayout.construct(parentNode, location);\n  }\n\n  var insertAuxUnit = insertUnits = parentNode.data('auxunitlayouts')[location];\n  var insertUnits = insertAuxUnit.units;\n  var index = 0; //Insert into new unit array\n\n  if (location === \"top\" || location === \"bottom\") {\n    while (insertUnits[index] !== undefined && posX > insertUnits[index].bbox.x) {\n      index++;\n    }\n  } else {\n    while (insertUnits[index] !== undefined && posY > insertUnits[index].bbox.y) {\n      index++;\n    }\n  }\n\n  insertUnits.splice(index, 0, unit);\n};\n\nAuxUnitLayout.isEmpty = function (mainObj) {\n  return mainObj.units.length == 0;\n};\n\nAuxUnitLayout.unitCount = function (mainObj) {\n  return mainObj.units.length;\n};\n\nAuxUnitLayout.unitLength = function (mainObj) {\n  var units = mainObj.units;\n  var rightMostPoint = 0;\n\n  for (var i = 0; i < units.length; i++) {\n    var box = units[i].bbox;\n\n    if (box.x + box.w / 2 > rightMostPoint) {\n      rightMostPoint = box.x + box.w / 2;\n    }\n  }\n\n  return rightMostPoint;\n}; //Get Unit Gaps\n\n\nAuxUnitLayout.getCurrentTopGap = function () {\n  return AuxUnitLayout.currentTopUnitGap;\n};\n\nAuxUnitLayout.getCurrentBottomGap = function () {\n  return AuxUnitLayout.currentBottomUnitGap;\n};\n\nAuxUnitLayout.getCurrentLeftGap = function () {\n  return AuxUnitLayout.currentLeftUnitGap;\n};\n\nAuxUnitLayout.getCurrentRightGap = function () {\n  return AuxUnitLayout.currentRightUnitGap;\n};\n/**\n * Auto choose the next layout. To add a new aux unit, for example.\n */\n\n\nAuxUnitLayout.selectNextAvailable = function (node) {\n  var top = node.data('auxunitlayouts').top;\n  var bottom = node.data('auxunitlayouts').bottom;\n  var resultLocation = \"top\"; // start by adding on top if free\n\n  if (!top || AuxUnitLayout.isEmpty(top)) {\n    resultLocation = \"top\";\n  } else if (!bottom || AuxUnitLayout.isEmpty(bottom)) {\n    resultLocation = \"bottom\";\n  } else {\n    // choose the side (top or bottom) that has the most space available to the right of the rightmost infobox\n    if (AuxUnitLayout.unitLength(top) <= AuxUnitLayout.unitLength(bottom)) {\n      resultLocation = \"top\";\n    } else {\n      resultLocation = \"bottom\";\n    }\n  }\n\n  AuxUnitLayout.lastPos = resultLocation; //Set last used position\n\n  return resultLocation;\n};\n\nAuxUnitLayout.resizeParent = function (mainObj, cy, length) {\n  var parentNode = AuxUnitLayout.getParentNode(mainObj, cy);\n\n  if (AuxUnitLayout.isTorB(mainObj)) {\n    if (parentNode.data('bbox').w < length) {\n      cy.trigger(\"nodeediting.resizestart\", [\"centerright\", parentNode]);\n      parentNode.data('bbox').w = length;\n      cy.trigger(\"nodeediting.resizeend\", [\"centerright\", parentNode]);\n    }\n  } else {\n    if (parentNode.data('bbox').h < length) {\n      cy.trigger(\"nodeediting.resizestart\", [\"bottomcenter\", parentNode]);\n      parentNode.data('bbox').h = length;\n      cy.trigger(\"nodeediting.resizeend\", [\"bottomcenter\", parentNode]);\n    }\n  }\n};\n\nAuxUnitLayout.isTorB = function (mainObj) {\n  return mainObj.location == \"top\" || mainObj.location == \"bottom\";\n};\n\nAuxUnitLayout.isLorR = function (mainObj) {\n  return mainObj.location == \"left\" || mainObj.location == \"right\";\n};\n\nAuxUnitLayout.setParentMinLength = function (mainObj, cy) {\n  var parentNode = AuxUnitLayout.getParentNode(mainObj, cy);\n  var parentLayouts = parentNode.data('auxunitlayouts');\n\n  switch (mainObj.location) {\n    case \"top\":\n      var compareVal = parentLayouts.bottom ? parentLayouts.bottom.lengthUsed : 0;\n      break;\n\n    case \"bottom\":\n      var compareVal = parentLayouts.top ? parentLayouts.top.lengthUsed : 0;\n      break;\n\n    case \"left\":\n      var compareVal = parentLayouts.right ? parentLayouts.right.lengthUsed : 0;\n      break;\n\n    case \"right\":\n      var compareVal = parentLayouts.left ? parentLayouts.left.lengthUsed : 0;\n      break;\n  }\n\n  if (AuxUnitLayout.isTorB(mainObj)) {\n    parentNode.data('resizeMinWidth', Math.max(mainObj.lengthUsed, compareVal));\n  } else {\n    parentNode.data('resizeMinHeight', Math.max(mainObj.lengthUsed, compareVal));\n  }\n};\n\nAuxUnitLayout.getOuterMargin = function (mainObj) {\n  if (typeof mainObj.outerMargin !== \"undefined\" && mainObj.outerMargin !== null) {\n    return mainObj.outerMargin;\n  } else {\n    return AuxUnitLayout.outerMargin;\n  }\n};\n\nAuxUnitLayout.getUnitGap = function (mainObj) {\n  if (typeof mainObj.unitGap !== \"undefined\" && mainObj.unitGap !== null) {\n    return mainObj.unitGap;\n  } else {\n    return AuxUnitLayout.unitGap;\n  }\n};\n\nAuxUnitLayout.getAlwaysShowAuxUnits = function (mainObj) {\n  if (typeof mainObj.alwaysShowAuxUnits !== \"undefined\" && mainObj.alwaysShowAuxUnits !== null) {\n    return mainObj.alwaysShowAuxUnits;\n  } else {\n    return AuxUnitLayout.alwaysShowAuxUnits;\n  }\n};\n\nAuxUnitLayout.getMaxUnitDisplayed = function (mainObj) {\n  if (typeof mainObj.maxUnitDisplayed !== \"undefined\" && mainObj.maxUnitDisplayed !== null) {\n    return mainObj.maxUnitDisplayed;\n  } else {\n    return AuxUnitLayout.maxUnitDisplayed;\n  }\n};\n/*\n *  Duplicate a layout. Doesn't copy the units attribute, reset it instead.\n */\n\n\nAuxUnitLayout.copy = function (mainObj, cy, newParent) {\n  var newLayout = AuxUnitLayout.construct(newParent); // Copying the same reference to units would be inconsistent.\n  // Duplicating owned units goes beyonnd the scope, because we need to assign\n  // ids that are tied to the global cound of units of a node.\n  // So duplicating units is something that should be properly done outside of this function.\n  // TODO that is a bit dirty, find a nice modular way to arrange that\n\n  newLayout.units = [];\n  newLayout.location = mainObj.location;\n  newLayout.alignment = mainObj.alignment;\n  AuxUnitLayout.setParentNodeRef(newLayout, newParent);\n  newLayout.renderLengthCache = mainObj.renderLengthCache;\n  newLayout.lengthUsed = mainObj.lengthUsed;\n\n  if (typeof mainObj.outerMargin !== \"undefined\") {\n    newLayout.outerMargin = mainObj.outerMargin;\n  }\n\n  if (typeof mainObj.unitGap !== \"undefined\") {\n    newLayout.unitGap = mainObj.unitGap;\n  }\n\n  if (typeof mainObj.alwaysShowAuxUnits !== \"undefined\") {\n    newLayout.alwaysShowAuxUnits = mainObj.alwaysShowAuxUnits;\n  }\n\n  if (typeof mainObj.maxUnitDisplayed !== \"undefined\") {\n    newLayout.maxUnitDisplayed = mainObj.maxUnitDisplayed;\n  }\n\n  return newLayout;\n};\n\nns.AuxUnitLayout = AuxUnitLayout; // -------------- END AuxUnitLayout -------------- //\n\nmodule.exports = ns;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/classes.js\n");

/***/ }),

/***/ "./src/utilities/element-utilities-factory.js":
/*!****************************************************!*\
  !*** ./src/utilities/element-utilities-factory.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/*\n * Common utilities for elements includes both general utilities and sbgn specific utilities\n */\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\n\nvar textUtilities = __webpack_require__(/*! ./text-utilities */ \"./src/utilities/text-utilities.js\");\n\nvar libs = libUtilities.getLibs();\nvar jQuery = $ = libs.jQuery;\n\nvar classes = __webpack_require__(/*! ./classes */ \"./src/utilities/classes.js\");\n\nmodule.exports = function () {\n  var optionUtilities, graphUtilities;\n  var options;\n  var cy;\n\n  function elementUtilities(param) {\n    // Init params to be accessed by elementUtilities\n    optionUtilities = param.optionUtilities;\n    options = optionUtilities.getOptions();\n    graphUtilities = param.graphUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n\n  var inArray = function inArray(value, arr) {\n    return $.inArray(value, arr) !== -1;\n  }; // initialize map type\n\n\n  elementUtilities.mapType = 'PD';\n  elementUtilities.fileFormat = undefined;\n  elementUtilities.PD = {}; // namespace for all PD specific stuff\n\n  elementUtilities.AF = {}; // namespace for all AF specific stuff\n\n  elementUtilities.SIF = {}; // namespace for all SIF specific stuff\n\n  elementUtilities.graphTopologyLocked = false; // see http://stackoverflow.com/a/8809472\n  // we need to take care of our own IDs because the ones automatically generated by cytoscape (also UUID)\n  // don't comply with xsd:SID type that must not begin with a number\n\n  elementUtilities.generateUUID = function () {\n    // Public Domain/MIT\n    var d = Date.now();\n\n    if (typeof performance !== 'undefined' && typeof performance.now === 'function') {\n      d += performance.now(); //use high-precision timer if available\n    }\n\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n      var r = (d + Math.random() * 16) % 16 | 0;\n      d = Math.floor(d / 16);\n      return (c === 'x' ? r : r & 0x3 | 0x8).toString(16);\n    });\n  };\n\n  elementUtilities.generateNodeId = function () {\n    return 'nwtN_' + elementUtilities.generateUUID();\n  };\n\n  elementUtilities.generateEdgeId = function () {\n    return 'nwtE_' + elementUtilities.generateUUID();\n  };\n\n  elementUtilities.generateStateVarId = function () {\n    return 'nwtSV_' + elementUtilities.generateUUID();\n  };\n\n  elementUtilities.generateUnitOfInfoId = function () {\n    return 'nwtUOI_' + elementUtilities.generateUUID();\n  };\n  /*\n    see http://journal.imbio.de/articles/pdf/jib-263.pdf p.41 <-- but beware, outdated\n    following tables have been updated with PD lvl1 v2.0 of November 7, 2016 working draft\n    only the following things have been changed from 2.0 (this version is not clear on connectivity):\n     - empty set has no limit on its edge count\n     - logic operators can be source and target\n     - limit of 1 catalysis and 1 necessary stimulation on a process\n     for each edge class and nodeclass define 2 cases:\n     - node can be a source of this edge -> asSource\n     - node can be a target of this edge -> asTarget\n    for both cases, tells if it is allowed and what is the limit of edges allowed.\n    Limits can concern only this type of edge (maxEdge) or the total number of edges for this node (maxTotal).\n    Consider undefined things as false/unallowed -> whitelist behavior.\n     the nodes/edges class listed below are those used in the program.\n    For instance \"compartment\" isn't a node in SBGN specs.\n  */\n\n\n  elementUtilities.PD.connectivityConstraints = {\n    \"consumption\": {\n      \"macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        }\n      },\n      \"and\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"production\": {\n      \"macromolecule\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"simple chemical\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"unspecified entity\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"complex\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"nucleic acid feature\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"perturbing agent\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"process\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"association\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"modulation\": {\n      \"macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"stimulation\": {\n      \"macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"catalysis\": {\n      \"macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"inhibition\": {\n      \"macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"necessary stimulation\": {\n      \"macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1\n        }\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      }\n    },\n    \"logic arc\": {\n      \"macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"empty set\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"or\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"not\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        }\n      }\n    },\n    \"equivalence arc\": {\n      \"macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"unspecified entity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"complex\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"nucleic acid feature\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"empty set\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"perturbing agent\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"omitted process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"uncertain process\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"association\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"dissociation\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {},\n        asTarget: {}\n      }\n    }\n  };\n  /* AF node connectivity rules\n   * See: Systems Biology Graphical Notation: Activity Flow language Level 1, Version 1.2, Date: July 27, 2015\n   *   Section 3.3.1: Activity Nodes connectivity definition\n   *   URL: https://doi.org/10.2390/biecoll-jib-2015-265\n   */\n\n  elementUtilities.AF.connectivityConstraints = {\n    \"positive influence\": {\n      \"biological activity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"delay\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"negative influence\": {\n      \"biological activity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"delay\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"unknown influence\": {\n      \"biological activity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"delay\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"necessary stimulation\": {\n      \"biological activity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"delay\": {\n        asSource: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        },\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"logic arc\": {\n      \"biological activity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"phenotype\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"and\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"or\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"not\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        }\n      },\n      \"delay\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true,\n          maxEdge: 1,\n          maxTotal: 1\n        }\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"equivalence arc\": {\n      \"biological activity\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"phenotype\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"tag\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"submap\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"and\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"or\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"not\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"delay\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"compartment\": {\n        asSource: {},\n        asTarget: {}\n      }\n    }\n  };\n  elementUtilities.SIF.connectivityConstraints = {\n    \"controls-state-change-of\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"controls-transport-of\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"controls-phosphorylation-of\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"controls-expression-of\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"catalysis-precedes\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"in-complex-with\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"interacts-with\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"neighbor-of\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"consumption-controled-by\": {\n      \"SIF macromolecule\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      }\n    },\n    \"controls-production-of\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      }\n    },\n    \"controls-transport-of-chemical\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      }\n    },\n    \"chemical-affects\": {\n      \"SIF macromolecule\": {\n        asSource: {},\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {}\n      }\n    },\n    \"reacts-with\": {\n      \"SIF macromolecule\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"SIF simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      }\n    },\n    \"used-to-produce\": {\n      \"SIF macromolecule\": {\n        asSource: {},\n        asTarget: {}\n      },\n      \"SIF simple chemical\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      }\n    },\n    \"activates\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"inhibits\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"phosphorylates\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"dephosphorylates\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"upregulates-expression\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"downregulates-expression\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"activates-gtpase\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"inhibits-gtpase\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"acetylates\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"deacetylates\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"methylates\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    },\n    \"demethylates\": {\n      \"SIF macromolecule\": {\n        asSource: {\n          isAllowed: true\n        },\n        asTarget: {\n          isAllowed: true\n        }\n      },\n      \"SIF simple chemical\": {\n        asSource: {},\n        asTarget: {}\n      }\n    }\n  };\n  elementUtilities.logicalOperatorTypes = ['and', 'or', 'not', 'delay'];\n  elementUtilities.processTypes = ['process', 'omitted process', 'uncertain process', 'association', 'dissociation', 'phenotype'];\n  elementUtilities.biologicalActivityTypes = ['biological activity', 'BA plain', 'BA unspecified entity', 'BA simple chemical', 'BA macromolecule', 'BA nucleic acid feature', 'BA perturbing agent', 'BA complex'];\n  elementUtilities.epnTypes = ['macromolecule', 'nucleic acid feature', 'simple chemical', 'empty set', 'unspecified entity', 'perturbing agent', 'complex', 'nucleic acid feature multimer', 'macromolecule multimer', 'simple chemical multimer', 'complex multimer'];\n  elementUtilities.sifTypes = ['SIF macromolecule', 'SIF simple chemical'];\n  elementUtilities.otherNodeTypes = ['compartment', 'tag', 'submap', 'topology group'];\n  elementUtilities.nodeTypes = elementUtilities.epnTypes.concat(elementUtilities.logicalOperatorTypes).concat(elementUtilities.processTypes).concat(elementUtilities.biologicalActivityTypes).concat(elementUtilities.sifTypes).concat(elementUtilities.otherNodeTypes);\n  elementUtilities.compoundNodeTypes = ['complex', 'compartment', 'submap'];\n  elementUtilities.simpleNodeTypes = $(elementUtilities.nodeTypes).not(elementUtilities.compoundNodeTypes).get();\n  elementUtilities.sifEdgeTypes = ['neighbor-of', 'interacts-with', 'in-complex-with', 'controls-state-change-of', 'controls-transport-of', 'controls-phosphorylation-of', 'catalysis-precedes', 'controls-expression-of', 'consumption-controled-by', 'controls-production-of', 'controls-transport-of-chemical', 'chemical-affects', 'reacts-with', 'used-to-produce', 'phosphorylates', 'dephosphorylates', 'upregulates-expression', 'downregulates-expression', 'activates', 'inhibits', 'activates-gtpase', 'inhibits-gtpase', 'acetylates', 'deacetylates', 'methylates', 'demethylates'];\n  elementUtilities.edgeTypes = ['consumption', 'production', 'modulation', 'stimulation', 'catalysis', 'inhibition', 'necessary stimulation', 'logic arc', 'equivalence arc', 'unknown influence', 'positive influence', 'negative influence', 'controls-state-change-of', 'controls-transport-of', 'controls-phosphorylation-of', 'controls-expression-of', 'catalysis-precedes', 'in-complex-with', 'interacts-with', 'neighbor-of', 'consumption-controled-by', 'controls-production-of', 'controls-transport-of-chemical', 'chemical-affects', 'reacts-with', 'used-to-produce', 'activates', 'inhibits', 'phosphorylates', 'dephosphorylates', 'upregulates-expression', 'downregulates-expression', 'activates-gtpase', 'inhibits-gtpase', 'acetylates', 'deacetylates', 'methylates', 'demethylates'];\n  elementUtilities.undirectedEdgeTypes = ['in-complex-with', 'interacts-with', 'neighbor-of', 'logic arc', 'equivalence arc'];\n  elementUtilities.elementTypes = elementUtilities.nodeTypes.concat(elementUtilities.edgeTypes);\n  /*\n  * Get sbgnclass of the given element. If the parameter is a string return it\n  * by assuming that it is the sbgnclass itself.\n  */\n\n  elementUtilities.getSbgnClass = function (ele) {\n    if (ele == null) {\n      return null;\n    }\n\n    var sbgnclass = typeof ele === 'string' ? ele : ele.data('class');\n    return sbgnclass;\n  };\n  /*\n  * Get sbgn class omitting the multimer information\n  */\n\n\n  elementUtilities.getPureSbgnClass = function (ele) {\n    if (ele == null) {\n      return null;\n    }\n\n    return elementUtilities.getSbgnClass(ele).replace(' multimer', '');\n  };\n  /*\n   * Returns if the elements with the given parent class can be parent of the elements with the given node class\n   */\n\n\n  elementUtilities.isValidParent = function (_nodeClass, _parentClass, node) {\n    // If nodeClass and parentClass params are elements itselves instead of their class names handle it\n    var nodeClass = typeof _nodeClass !== 'string' ? _nodeClass.data('class') : _nodeClass;\n    var parentClass = _parentClass != undefined && typeof _parentClass !== 'string' ? _parentClass.data('class') : _parentClass;\n\n    if (parentClass == undefined || parentClass === 'compartment' || parentClass === 'submap') {\n      // Compartments, submaps and the root can include any type of nodes\n      return true;\n    } else if (parentClass.startsWith('complex') && (!node || node.connectedEdges().length == 0 // Complexes can only include EPNs which do not have edges\n    || elementUtilities.mapType == \"HybridAny\" || elementUtilities.mapType == \"HybridSbgn\")) {\n      // When map type is unknown, allow complexes to include EPNs with edges\n      return elementUtilities.isEPNClass(nodeClass);\n    }\n\n    return false; // Currently just 'compartment' and 'complex' compounds are supported return false for any other parentClass\n  }; // Get common properties of given elements. Returns null if the given element list is empty or the\n  // property is not common for all elements. dataOrCss parameter specify whether to check the property on data or css.\n  // The default value for it is data. If propertyName parameter is given as a function instead of a string representing the\n  // property name then use what that function returns.\n\n\n  elementUtilities.getCommonProperty = function (elements, propertyName, dataOrCss) {\n    if (elements.length == 0) {\n      return null;\n    }\n\n    var isFunction; // If we are not comparing the properties directly users can specify a function as well\n\n    if (typeof propertyName === 'function') {\n      isFunction = true;\n    } // Use data as default\n\n\n    if (!isFunction && !dataOrCss) {\n      dataOrCss = 'data';\n    }\n\n    var getVal = function getVal(index) {\n      var val = isFunction ? propertyName(elements[index]) : elements[index][dataOrCss](propertyName);\n      return val;\n    };\n\n    var value = getVal(0);\n\n    for (var i = 1; i < elements.length; i++) {\n      if (getVal(i) != value) {\n        return null;\n      }\n    }\n\n    return value;\n  }; // Returns if the function returns a truthy value for all of the given elements.\n\n\n  elementUtilities.trueForAllElements = function (elements, fcn) {\n    for (var i = 0; i < elements.length; i++) {\n      if (!fcn(elements[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }; // Returns whether the give element can have sbgncardinality\n\n\n  elementUtilities.canHaveSBGNCardinality = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass == 'consumption' || sbgnclass == 'production';\n  }; // Returns whether the give element can have sbgnlabel\n\n\n  elementUtilities.canHaveSBGNLabel = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass != 'and' && sbgnclass != 'or' && sbgnclass != 'not' && sbgnclass != 'delay' && sbgnclass != 'association' && sbgnclass != 'dissociation' && sbgnclass != 'empty set' && !sbgnclass.endsWith('process');\n  }; // Returns whether the give element have unit of information\n\n\n  elementUtilities.canHaveUnitOfInformation = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n\n    if (sbgnclass == 'simple chemical' || sbgnclass == 'macromolecule' || sbgnclass == 'nucleic acid feature' || sbgnclass == 'complex' || sbgnclass == 'simple chemical multimer' || sbgnclass == 'macromolecule multimer' || sbgnclass == 'nucleic acid feature multimer' || sbgnclass == 'complex multimer' || sbgnclass.startsWith('BA') && sbgnclass != \"BA plain\" || sbgnclass == 'compartment' || sbgnclass == 'SIF macromolecule' || sbgnclass == 'SIF simple chemical') {\n      return true;\n    }\n\n    return false;\n  }; // Returns whether the given element can have more than one units of information\n\n\n  elementUtilities.canHaveMultipleUnitOfInformation = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return !sbgnclass.startsWith('BA');\n  }; // Returns whether the give element have state variable\n\n\n  elementUtilities.canHaveStateVariable = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n\n    if (sbgnclass == 'macromolecule' || sbgnclass == 'nucleic acid feature' || sbgnclass == 'complex' || sbgnclass == 'macromolecule multimer' || sbgnclass == 'nucleic acid feature multimer' || sbgnclass == 'complex multimer') {\n      return true;\n    }\n\n    return false;\n  }; // Returns whether the given ele should be square in shape\n\n\n  elementUtilities.mustBeSquare = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass.indexOf('process') != -1 || sbgnclass == 'empty set' || sbgnclass == 'and' || sbgnclass == 'or' || sbgnclass == 'not' || sbgnclass == 'association' || sbgnclass == 'dissociation' || sbgnclass == 'delay';\n  }; // Returns whether any of the given nodes must not be in square shape\n\n\n  elementUtilities.someMustNotBeSquare = function (nodes) {\n    for (var i = 0; i < nodes.length; i++) {\n      var node = nodes[i];\n\n      if (!elementUtilities.mustBeSquare(node.data('class'))) {\n        return true;\n      }\n    }\n\n    return false;\n  }; // Returns whether the gives element can be cloned\n\n\n  elementUtilities.canBeCloned = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    var list = {\n      'unspecified entity': true,\n      'macromolecule': true,\n      'complex': true,\n      'nucleic acid feature': true,\n      'simple chemical': true,\n      'perturbing agent': true\n    };\n    return list[sbgnclass] ? true : false;\n  }; // Returns whether the gives element can be cloned\n\n\n  elementUtilities.canBeMultimer = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    var list = {\n      'macromolecule': true,\n      'complex': true,\n      'nucleic acid feature': true,\n      'simple chemical': true\n    };\n    return list[sbgnclass] ? true : false;\n  };\n\n  elementUtilities.isBiologicalActivity = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return inArray(sbgnclass, elementUtilities.biologicalActivityTypes);\n  };\n\n  elementUtilities.isSIFNode = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return inArray(sbgnclass, elementUtilities.sifTypes);\n  };\n\n  elementUtilities.isSIFEdge = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return inArray(sbgnclass, elementUtilities.sifEdgeTypes);\n  };\n\n  elementUtilities.isUndirectedEdge = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return inArray(sbgnclass, elementUtilities.undirectedEdgeTypes);\n  };\n\n  elementUtilities.isDirectedEdge = function (ele) {\n    return !elementUtilities.isUndirectedEdge(ele);\n  }; // Returns whether the given element is an EPN\n\n\n  elementUtilities.isEPNClass = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return inArray(sbgnclass, elementUtilities.epnTypes);\n  }; // Returns whether the given element is a PN\n\n\n  elementUtilities.isPNClass = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return inArray(sbgnclass, elementUtilities.processTypes);\n  }; // Returns wether the given element or string is of the special empty set/empty set class\n\n\n  elementUtilities.isEmptySetClass = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass == 'empty set';\n  }; // Returns whether the given element is a logical operator\n\n\n  elementUtilities.isLogicalOperator = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return inArray(sbgnclass, elementUtilities.logicalOperatorTypes);\n  }; // Returns whether the class of given element is a equivalance class\n\n\n  elementUtilities.convenientToEquivalence = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass == 'tag' || sbgnclass == 'terminal';\n  }; // Returns whether the class of given element is a modulation arc as defined in PD specs\n\n\n  elementUtilities.isModulationArcClass = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass == 'modulation' || sbgnclass == 'stimulation' || sbgnclass == 'catalysis' || sbgnclass == 'inhibition' || sbgnclass == 'necessary stimulation';\n  }; // Returns whether the class of given element is an arc of AF specs except logical arc\n\n\n  elementUtilities.isAFArcClass = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass == 'positive influence' || sbgnclass == 'negative influence' || sbgnclass == 'unknown influence' || sbgnclass == 'necessary stimulation';\n  }; // Returns whether the given element or elements with the given class can have ports.\n\n\n  elementUtilities.canHavePorts = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n    return sbgnclass != 'phenotype' && sbgnclass != 'delay' && (elementUtilities.isLogicalOperator(sbgnclass) || elementUtilities.isPNClass(sbgnclass));\n  }; // Section Start\n  // General Element Utilities\n  //this method returns the nodes non of whose ancestors is not in given nodes\n\n\n  elementUtilities.getTopMostNodes = function (nodes) {\n    var nodesMap = {};\n\n    for (var i = 0; i < nodes.length; i++) {\n      nodesMap[nodes[i].id()] = true;\n    }\n\n    var roots = nodes.filter(function (ele, i) {\n      if (typeof ele === \"number\") {\n        ele = i;\n      }\n\n      var parent = ele.parent()[0];\n\n      while (parent != null) {\n        if (nodesMap[parent.id()]) {\n          return false;\n        }\n\n        parent = parent.parent()[0];\n      }\n\n      return true;\n    });\n    return roots;\n  }; //This method checks if all of the given nodes have the same parent assuming that the size\n  //of  nodes is not 0\n\n\n  elementUtilities.allHaveTheSameParent = function (nodes) {\n    if (nodes.length == 0) {\n      return true;\n    }\n\n    var parent = nodes[0].data(\"parent\");\n\n    for (var i = 0; i < nodes.length; i++) {\n      var node = nodes[i];\n\n      if (node.data(\"parent\") != parent) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  elementUtilities.moveNodes = function (positionDiff, nodes, notCalcTopMostNodes) {\n    var topMostNodes = notCalcTopMostNodes ? nodes : this.getTopMostNodes(nodes);\n\n    for (var i = 0; i < topMostNodes.length; i++) {\n      var node = topMostNodes[i];\n      var oldX = node.position(\"x\");\n      var oldY = node.position(\"y\");\n      node.position({\n        x: oldX + positionDiff.x,\n        y: oldY + positionDiff.y\n      });\n      var children = node.children();\n      this.moveNodes(positionDiff, children, true);\n    }\n  };\n\n  elementUtilities.convertToModelPosition = function (renderedPosition) {\n    var pan = cy.pan();\n    var zoom = cy.zoom();\n    var x = (renderedPosition.x - pan.x) / zoom;\n    var y = (renderedPosition.y - pan.y) / zoom;\n    return {\n      x: x,\n      y: y\n    };\n  };\n\n  elementUtilities.convertToRenderedPosition = function (modelPos, pan, zoom) {\n    pan = pan || cy.pan();\n    zoom = zoom || cy.zoom();\n    var res = {};\n    ['x', 'y'].forEach(function (dim) {\n      res[dim] = modelPos[dim] * zoom + pan[dim];\n    });\n    return res;\n  }; // Section End\n  // General Element Utilities\n  // Section Start\n  // Element Filtering Utilities\n  // SBGN specific utilities\n\n\n  elementUtilities.getProcessesOfSelected = function () {\n    var selectedEles = cy.elements(\":selected\");\n    selectedEles = this.extendNodeList(selectedEles);\n    return selectedEles;\n  };\n\n  elementUtilities.getNeighboursOfSelected = function () {\n    var selectedEles = cy.elements(\":selected\");\n    var elesToHighlight = this.getNeighboursOfNodes(selectedEles);\n    return elesToHighlight;\n  };\n\n  elementUtilities.getNeighboursOfNodes = function (_nodes) {\n    var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes\n\n\n    nodes = nodes.add(nodes.parents(\"node[class^='complex']\"));\n    nodes = nodes.add(nodes.descendants());\n    var neighborhoodEles = nodes.neighborhood();\n    var elesToReturn = nodes.add(neighborhoodEles);\n    elesToReturn = elesToReturn.add(elesToReturn.descendants());\n    return elesToReturn;\n  };\n\n  elementUtilities.extendNodeList = function (nodesToShow) {\n    var self = this; //add children\n\n    nodesToShow = nodesToShow.add(nodesToShow.nodes().descendants()); //add parents\n\n    nodesToShow = nodesToShow.add(nodesToShow.parents()); //add complex children\n\n    nodesToShow = nodesToShow.add(nodesToShow.nodes(\"node[class^='complex']\").descendants()); // var processes = nodesToShow.nodes(\"node[class='process']\");\n    // var nonProcesses = nodesToShow.nodes(\"node[class!='process']\");\n    // var neighborProcesses = nonProcesses.neighborhood(\"node[class='process']\");\n\n    extendNodeTypes = ['process', 'omitted process', 'uncertain process', 'association', 'dissociation', 'phenotype', 'and', 'or', 'not', 'delay']; //Here, logical operators are also considered as processes, since they also get inputs and outputs\n\n    var processes = nodesToShow.filter(function (ele, i) {\n      if (typeof ele === \"number\") {\n        ele = i;\n      }\n\n      return inArray(ele._private.data[\"class\"], extendNodeTypes);\n    });\n    var nonProcesses = nodesToShow.filter(function (ele, i) {\n      if (typeof ele === \"number\") {\n        ele = i;\n      }\n\n      return !inArray(ele._private.data[\"class\"], extendNodeTypes);\n    });\n    var neighborProcesses = nonProcesses.neighborhood().union(processes.neighborhood()).filter(function (ele, i) {\n      if (typeof ele === \"number\") {\n        ele = i;\n      }\n\n      return inArray(ele._private.data[\"class\"], extendNodeTypes);\n    }); //For AF support, subject to change\n\n    var neighborNonProcesses = nonProcesses.union(nonProcesses.neighborhood(\":hidden\")).filter(function (ele, i) {\n      if (typeof ele === \"number\") {\n        ele = i;\n      }\n\n      return !inArray(ele._private.data[\"class\"], extendNodeTypes);\n    });\n    nodesToShow = nodesToShow.add(processes.neighborhood());\n    nodesToShow = nodesToShow.add(neighborProcesses);\n    nodesToShow = nodesToShow.add(neighborProcesses.neighborhood());\n    nodesToShow = nodesToShow.add(neighborNonProcesses);\n    neighborProcesses.neighborhood().forEach(function (ele) {\n      if (inArray(ele._private.data[\"class\"], extendNodeTypes)) {\n        nodesToShow = nodesToShow.add(ele.neighborhood());\n      }\n    }); //add parents\n\n    nodesToShow = nodesToShow.add(nodesToShow.nodes().parents()); //add children\n\n    nodesToShow = nodesToShow.add(nodesToShow.nodes(\"node[class^='complex']\").descendants());\n    return nodesToShow;\n  };\n\n  elementUtilities.extendRemainingNodes = function (nodesToFilter, allNodes) {\n    nodesToFilter = this.extendNodeList(nodesToFilter);\n    var nodesToShow = allNodes.not(nodesToFilter);\n    nodesToShow = this.extendNodeList(nodesToShow);\n    return nodesToShow;\n  };\n\n  elementUtilities.getProcessesOfNodes = function (nodes) {\n    return this.extendNodeList(nodes);\n  }; // general utilities\n\n\n  elementUtilities.noneIsNotHighlighted = function () {\n    var viewUtilities = cy.viewUtilities('get');\n    var highlightClasses = viewUtilities.getAllHighlightClasses();\n\n    for (var i = 0; i < highlightClasses.length; i++) {\n      if (cy.$('.' + highlightClasses[i]).is(':visible')) {\n        return false;\n      }\n    }\n\n    return true;\n  }; // Section End\n  // Element Filtering Utilities\n  // Section Start\n  // Add remove utilities\n  // SBGN specific utilities\n\n\n  elementUtilities.deleteNodesSmart = function (_nodes) {\n    var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes\n\n\n    var allNodes = cy.nodes();\n    cy.elements().unselect();\n    var nodesToKeep = this.extendRemainingNodes(nodes, allNodes);\n    var nodesNotToKeep = allNodes.not(nodesToKeep);\n    return nodesNotToKeep.remove();\n  };\n\n  elementUtilities.deleteElesSimple = function (eles) {\n    cy.elements().unselect();\n    return eles.remove();\n  }; // general utilities\n\n\n  elementUtilities.restoreEles = function (eles) {\n    eles.restore();\n    return eles;\n  }; // Section End\n  // Add remove utilities\n  // Section Start\n  // Stylesheet helpers\n  // SBGN specific utilities\n\n\n  elementUtilities.getArrayLineStyle = function (ele) {\n    var sbgnclass = elementUtilities.getPureSbgnClass(ele);\n\n    switch (sbgnclass) {\n      case 'controls-expression-of':\n      case 'upregulates-expression':\n      case 'downregulates-expression':\n        return 'dashed';\n\n      default:\n        return 'solid';\n    }\n  };\n\n  elementUtilities.getCyShape = function (ele) {\n    var _class = ele.data('class'); // Get rid of rectangle postfix to have the actual node class\n\n\n    if (_class.endsWith(' multimer')) {\n      _class = _class.replace(' multimer', '');\n    }\n\n    if (_class == 'compartment') {\n      return 'compartment';\n    }\n\n    if (_class == 'phenotype') {\n      return 'hexagon';\n    }\n\n    if (_class == 'perturbing agent' || _class == 'tag') {\n      return 'polygon';\n    }\n\n    if (_class == 'SIF macromolecule') {\n      return 'macromolecule';\n    }\n\n    if (_class == 'SIF simple chemical') {\n      return 'simple chemical';\n    }\n\n    if (_class.startsWith('BA')) {\n      return 'biological activity';\n    }\n\n    if (_class == 'submap' || _class == 'topology group') {\n      return 'rectangle';\n    } // We need to define new node shapes with their class names for these nodes\n\n\n    if (_class == 'empty set' || _class == 'nucleic acid feature' || _class == 'macromolecule' || _class == 'simple chemical' || _class == 'complex' || _class == 'biological activity') {\n      return _class;\n    } // These shapes can have ports. If they have ports we represent them by polygons, else they are represented by ellipses or rectangles\n    // conditionally.\n\n\n    if (this.canHavePorts(_class)) {\n      if (graphUtilities.portsEnabled === true && ele.data('ports').length === 2) {\n        return 'polygon'; // The node has ports represent it by polygon\n      } else if (_class == 'process' || _class == 'omitted process' || _class == 'uncertain process') {\n        return 'rectangle'; // If node has no port and has one of these classes it should be in a rectangle shape\n      }\n\n      return 'ellipse'; // Other nodes with no port should be in an ellipse shape\n    } // The remaining nodes are supposed to be in ellipse shape\n\n\n    return 'ellipse';\n  };\n\n  elementUtilities.getCyTargetArrowFill = function (ele) {\n    var _class = ele.data('class');\n\n    if (_class == 'inhibition' || _class == 'negative influence' || _class == 'production' || elementUtilities.isSIFEdge(_class)) {\n      return 'filled';\n    }\n\n    return 'hollow';\n  };\n\n  elementUtilities.getCyArrowShape = function (ele) {\n    var _class = ele.data('class');\n\n    switch (_class) {\n      case 'necessary stimulation':\n        return 'triangle-cross';\n\n      case 'inhibition':\n      case 'negative influence':\n      case 'inhibits':\n      case 'downregulates-expression':\n      case 'dephosphorylates':\n      case 'inhibits-gtpase':\n      case 'deacetylates':\n      case 'demethylates':\n        return 'tee';\n\n      case 'catalysis':\n        return 'circle';\n\n      case 'stimulation':\n      case 'production':\n      case 'positive influence':\n      case 'activates':\n      case 'phosphorylates':\n      case 'upregulates-expression':\n      case 'controls-state-change-of':\n      case 'chemical-affects':\n      case 'controls-transport-of':\n      case 'controls-phosphorylation-of':\n      case 'controls-expression-of':\n      case 'catalysis-precedes':\n      case 'consumption-controled-by':\n      case 'controls-production-of':\n      case 'controls-transport-of-chemical':\n      case 'used-to-produce':\n      case 'activates-gtpase':\n      case 'acetylates':\n      case 'methylates':\n        return 'triangle';\n\n      case 'modulation':\n      case 'unknown influence':\n        return 'diamond';\n\n      default:\n        return 'none';\n    }\n  };\n\n  elementUtilities.getElementContent = function (ele) {\n    var _class = ele.data('class');\n\n    if (_class.endsWith(' multimer')) {\n      _class = _class.replace(' multimer', '');\n    }\n\n    var content = \"\";\n\n    if (_class == 'macromolecule' || _class == 'simple chemical' || _class == 'phenotype' || _class == 'unspecified entity' || _class == 'nucleic acid feature' || _class == 'perturbing agent' || _class == 'tag' || _class == 'biological activity' || _class.startsWith('BA') || _class == 'submap' || _class == 'SIF macromolecule' || _class == 'SIF simple chemical') {\n      content = ele.data('label') ? ele.data('label') : \"\";\n    } else if (_class == 'compartment') {\n      content = ele.data('label') ? ele.data('label') : \"\";\n    } else if (_class == 'complex') {\n      if (ele.children().length == 0 || options.showComplexName) {\n        if (ele.data('label')) {\n          content = ele.data('label');\n        } else if (ele.data('infoLabel')) {\n          content = ele.data('infoLabel');\n        } else {\n          content = '';\n        }\n      } else {\n        content = '';\n      }\n    } else if (_class == 'and') {\n      content = 'AND';\n    } else if (_class == 'or') {\n      content = 'OR';\n    } else if (_class == 'not') {\n      content = 'NOT';\n    } else if (_class == 'omitted process') {\n      content = '\\\\\\\\';\n    } else if (_class == 'uncertain process') {\n      content = '?';\n    } else if (_class == 'dissociation') {\n      content = 'o';\n    } else if (_class == 'delay') {\n      content = \"\\u03C4\"; // tau\n    }\n\n    var textWidth = ele.outerWidth() || ele.data('bbox').w;\n    var textProp = {\n      label: content,\n      width: _class == 'perturbing agent' ? textWidth / 2 : textWidth\n    };\n    return textProp.label;\n  };\n\n  elementUtilities.getLabelTextSize = function (ele) {\n    var _class = ele.data('class'); // These types of nodes cannot have label but this is statement is needed as a workaround\n\n\n    if (_class === 'association') {\n      return 20;\n    }\n\n    if (this.canHavePorts(_class)) {\n      var coeff = 1; // The dynamic label size coefficient for these pseudo labels, it is 1 for logical operators\n      // Coeff is supposed to be 2 for dissociation and 1.5 for other processes\n\n      if (_class === 'dissociation') {\n        coeff = 2;\n      } else if (_class.endsWith('process')) {\n        coeff = 1.5;\n      }\n\n      var ports = ele.data('ports');\n\n      if (graphUtilities.portsEnabled === true && ports.length === 2) {\n        // We assume that the ports are symmetric to the node center so using just one of the ports is enough\n        var port = ports[0];\n        var orientation = port.x === 0 ? 'vertical' : 'horizontal'; // This is the ratio of the area occupied with ports over without ports\n\n        var ratio = orientation === 'vertical' ? Math.abs(port.y) / 50 : Math.abs(port.x) / 50;\n        coeff /= ratio; // Divide the coeff by ratio to fit into the bbox of the actual shape (discluding ports)\n      }\n\n      return this.getDynamicLabelTextSize(ele, coeff);\n    }\n\n    if (_class === 'delay') {\n      return this.getDynamicLabelTextSize(ele, 2);\n    }\n\n    return this.getDynamicLabelTextSize(ele);\n  };\n\n  elementUtilities.getStateVarShapeOptions = function (ele) {\n    if (!elementUtilities.canHaveStateVariable(ele)) {\n      return null;\n    }\n\n    return ['stadium'];\n  };\n\n  elementUtilities.getUnitOfInfoShapeOptions = function (ele) {\n    var type = elementUtilities.getPureSbgnClass(ele);\n\n    if (!elementUtilities.canHaveUnitOfInformation(type)) {\n      return null;\n    }\n\n    var opts = null;\n\n    if (elementUtilities.isSIFNode(type)) {\n      opts = ['rectangle', 'stadium'];\n    } else if (elementUtilities.isBiologicalActivity(type)) {\n      switch (type) {\n        case 'BA macromolecule':\n          opts = ['roundrectangle'];\n          break;\n\n        case 'BA nucleic acid feature':\n          opts = ['bottomroundrectangle'];\n          break;\n\n        case 'BA unspecified entity':\n          opts = ['ellipse'];\n          break;\n\n        case 'BA complex':\n          opts = ['complex'];\n          break;\n\n        case 'BA perturbing agent':\n          opts = ['perturbing agent'];\n          break;\n\n        case 'BA simple chemical':\n          opts = ['stadium'];\n          break;\n\n        default:\n          break;\n      }\n    } else {\n      opts = ['rectangle'];\n    }\n\n    return opts;\n  };\n\n  elementUtilities.getCardinalityDistance = function (ele) {\n    var srcPos = ele.source().position();\n    var tgtPos = ele.target().position();\n    var distance = Math.sqrt(Math.pow(srcPos.x - tgtPos.x, 2) + Math.pow(srcPos.y - tgtPos.y, 2));\n    return distance * 0.25;\n  };\n\n  elementUtilities.getInfoLabel = function (node) {\n    /* Info label of a collapsed node cannot be changed if\n    * the node is collapsed return the already existing info label of it\n    */\n    if (node._private.data.collapsedChildren != null) {\n      return node._private.data.infoLabel;\n    }\n    /*\n     * If the node is simple then it's infolabel is equal to it's label\n     */\n\n\n    if (node.children() == null || node.children().length == 0) {\n      return node._private.data.label;\n    }\n\n    var children = node.children();\n    var infoLabel = \"\";\n    /*\n     * Get the info label of the given node by it's children info recursively\n     */\n\n    for (var i = 0; i < children.length; i++) {\n      var child = children[i];\n      var childInfo = this.getInfoLabel(child);\n\n      if (childInfo == null || childInfo == \"\") {\n        continue;\n      }\n\n      if (infoLabel != \"\") {\n        infoLabel += \":\";\n      }\n\n      infoLabel += childInfo;\n    } //return info label\n\n\n    return infoLabel;\n  };\n\n  elementUtilities.getQtipContent = function (node) {\n    /* Check the label of the node if it is not valid\n    * then check the infolabel if it is also not valid do not show qtip\n    */\n    var label = node.data('label');\n\n    if (label == null || label == \"\") {\n      label = this.getInfoLabel(node);\n    }\n\n    if (label == null || label == \"\") {\n      return;\n    }\n\n    var contentHtml = \"<b style='text-align:center;font-size:16px;'>\" + label + \"</b>\";\n    var statesandinfos = node._private.data.statesandinfos;\n\n    for (var i = 0; i < statesandinfos.length; i++) {\n      var sbgnstateandinfo = statesandinfos[i];\n\n      if (sbgnstateandinfo.clazz == \"state variable\") {\n        var value = sbgnstateandinfo.state.value;\n        var variable = sbgnstateandinfo.state.variable;\n        var stateLabel = variable == null\n        /*|| typeof stateVariable === undefined */\n        ? value : value + \"@\" + variable;\n\n        if (stateLabel == null) {\n          stateLabel = \"\";\n        }\n\n        contentHtml += \"<div style='text-align:center;font-size:14px;'>\" + stateLabel + \"</div>\";\n      } else if (sbgnstateandinfo.clazz == \"unit of information\") {\n        var stateLabel = sbgnstateandinfo.label.text;\n\n        if (stateLabel == null) {\n          stateLabel = \"\";\n        }\n\n        contentHtml += \"<div style='text-align:center;font-size:14px;'>\" + stateLabel + \"</div>\";\n      }\n    }\n\n    return contentHtml;\n  }; // general utilities\n\n\n  elementUtilities.getDynamicLabelSizeCoefficient = function (dynamicLabelSize) {\n    var map = {\n      'small': 0.75,\n      'regular': 1,\n      'large': 1.25\n    };\n    return map[dynamicLabelSize];\n  };\n\n  elementUtilities.getDynamicLabelTextSize = function (ele, dynamicLabelSizeCoefficient) {\n    var sbgnclass, h; // ele can either be node itself or an object that has class and height fields\n\n    if (ele.isNode && ele.isNode()) {\n      sbgnclass = ele.data('class');\n      h = ele.height();\n    } else {\n      sbgnclass = ele['class'];\n      h = ele['height'];\n    }\n\n    var dynamicLabelSize = options.dynamicLabelSize;\n    dynamicLabelSize = typeof dynamicLabelSize === 'function' ? dynamicLabelSize.call() : dynamicLabelSize;\n\n    if (dynamicLabelSizeCoefficient === undefined) {\n      if (dynamicLabelSize == 'small') {\n        if (sbgnclass.startsWith(\"complex\")) return 10;else if (sbgnclass == \"compartment\" || sbgnclass == \"submap\") return 12;\n      } else if (dynamicLabelSize == 'regular') {\n        if (sbgnclass.startsWith(\"complex\")) return 11;else if (sbgnclass == \"compartment\" || sbgnclass == \"submap\") return 14;\n      } else if (dynamicLabelSize == 'large') {\n        if (sbgnclass.startsWith(\"complex\")) return 12;else if (sbgnclass == \"compartment\" || sbgnclass == \"submap\") return 16;\n      }\n\n      dynamicLabelSizeCoefficient = elementUtilities.getDynamicLabelSizeCoefficient(dynamicLabelSize);\n    }\n\n    var textHeight = parseInt(h / 2.45) * dynamicLabelSizeCoefficient;\n    return textHeight;\n  };\n  /*\n  * Get source/target end point of edge in 'x-value% y-value%' format. It returns 'outside-to-node' if there is no source/target port.\n  */\n\n\n  elementUtilities.getEndPoint = function (edge, sourceOrTarget) {\n    var portId = sourceOrTarget === 'source' ? edge.data('portsource') : edge.data('porttarget');\n\n    if (portId == null || !graphUtilities.portsEnabled) {\n      return 'outside-to-node'; // If there is no portsource return the default value which is 'outside-to-node'\n    }\n\n    var endNode = sourceOrTarget === 'source' ? edge.source() : edge.target();\n    var ports = endNode.data('ports');\n    var port;\n\n    for (var i = 0; i < ports.length; i++) {\n      if (ports[i].id === portId) {\n        port = ports[i];\n      }\n    }\n\n    if (port === undefined) {\n      return 'outside-to-node'; // If port is not found return the default value which is 'outside-to-node'\n    }\n\n    var x, y; // Note that for drawing ports we represent the whole shape by a polygon and ports are always 50% away from the node center\n\n    if (port.x != 0) {\n      x = Math.sign(port.x) * 50;\n      y = 0;\n    } else {\n      x = 0;\n      y = Math.sign(port.y) * 50;\n    }\n\n    return '' + x + '% ' + y + '%';\n  };\n  /*\n   * Return ordering of ports of a node.\n   * Possible return values are 'L-to-R', 'R-to-L', 'T-to-B', 'B-to-T', 'none'\n   */\n\n\n  elementUtilities.getPortsOrdering = function (node) {\n    // Return the cached portsordering if exists\n    if (node.data('portsordering')) {\n      return node.data('portsordering');\n    }\n\n    var ports = node.data('ports');\n\n    if (ports.length !== 2) {\n      node.data('portsordering', 'none'); // Cache the ports ordering\n\n      return 'none'; // Nodes are supposed to have 2 nodes or none\n    }\n    /*\n     * Retursn if the given portId is porttarget of any of the given edges.\n     * These edges are expected to be the edges connected to the node associated with that port.\n     */\n\n\n    var isPortTargetOfAnyEdge = function isPortTargetOfAnyEdge(edges, portId) {\n      for (var i = 0; i < edges.length; i++) {\n        if (edges[i].data('porttarget') === portId) {\n          return true;\n        }\n      }\n\n      return false;\n    }; // If the ports are located above/below of the node then the orientation is 'vertical' else it is 'horizontal'.\n\n\n    var orientation = ports[0].x === 0 ? 'vertical' : 'horizontal'; // We need the connected edges of the node to find out if a port is an input port or an output port\n\n    var connectedEdges = node.connectedEdges();\n    var portsordering;\n\n    if (orientation === 'horizontal') {\n      var leftPortId = ports[0].x < 0 ? ports[0].id : ports[1].id; // Left port is the port whose x value is negative\n      // If left port is port target for any of connected edges then the ordering is 'L-to-R' else it is 'R-to-L'\n\n      if (isPortTargetOfAnyEdge(connectedEdges, leftPortId)) {\n        portsordering = 'L-to-R';\n      } else {\n        portsordering = 'R-to-L';\n      }\n    } else {\n      var topPortId = ports[0].y < 0 ? ports[0].id : ports[1].id; // Top port is the port whose y value is negative\n      // If top  port is port target for any of connected edges then the ordering is 'T-to-B' else it is 'B-to-T'\n\n      if (isPortTargetOfAnyEdge(connectedEdges, topPortId)) {\n        portsordering = 'T-to-B';\n      } else {\n        portsordering = 'B-to-T';\n      }\n    } // Cache the portsordering and return it.\n\n\n    node.data('portsordering', portsordering);\n    return portsordering;\n  };\n  /*\n  * Sets the ordering of the given nodes.\n  * Ordering options are 'L-to-R', 'R-to-L', 'T-to-B', 'B-to-T', 'none'.\n  * If a node does not have any port before the operation and it is supposed to have some after operation the portDistance parameter is\n  * used to set the distance between the node center and the ports. The default port distance is 60.\n  */\n\n\n  elementUtilities.setPortsOrdering = function (nodes, ordering, portDistance) {\n    /*\n    * Returns if the given portId is porttarget of any of the given edges.\n    * These edges are expected to be the edges connected to the node associated with that port.\n    */\n    var isPortTargetOfAnyEdge = function isPortTargetOfAnyEdge(edges, portId) {\n      for (var i = 0; i < edges.length; i++) {\n        if (edges[i].data('porttarget') === portId) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n    /*\n    * Returns if the given portId is portsource of any of the given edges.\n    * These edges are expected to be the edges connected to the node associated with that port.\n    */\n\n\n    var isPortSourceOfAnyEdge = function isPortSourceOfAnyEdge(edges, portId) {\n      for (var i = 0; i < edges.length; i++) {\n        if (edges[i].data('portsource') === portId) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    portDistance = portDistance ? portDistance : 70; // The default port distance is 60\n\n    cy.startBatch();\n\n    for (var i = 0; i < nodes.length; i++) {\n      var node = nodes[i];\n      var currentOrdering = this.getPortsOrdering(node); // The current ports ordering of the node\n      // If the current ordering is already equal to the desired ordering pass this node directly\n\n      if (ordering === currentOrdering) {\n        continue;\n      }\n\n      if (ordering === 'none') {\n        // If the ordering is 'none' remove the ports of the node\n        elementUtilities.removePorts(node);\n      } else if (currentOrdering === 'none') {\n        // If the desired ordering is not 'none' but the current one is 'none' add ports with the given parameters.\n        elementUtilities.addPorts(node, ordering, portDistance);\n      } else {\n        // Else change the ordering by altering node 'ports'\n        var ports = node.data('ports'); // Ports of the node\n        // If currentOrdering is 'none' use the portDistance given by parameter else use the existing one\n\n        var dist = currentOrdering === 'none' ? portDistance : Math.abs(ports[0].x) || Math.abs(ports[0].y);\n        var connectedEdges = node.connectedEdges(); // The edges connected to the node\n\n        var portsource, porttarget; // The ports which are portsource/porttarget of the connected edges\n        // Determine the portsource and porttarget\n\n        if (isPortTargetOfAnyEdge(connectedEdges, ports[0].id) || isPortSourceOfAnyEdge(connectedEdges, ports[1].id)) {\n          porttarget = ports[0];\n          portsource = ports[1];\n        } else {\n          porttarget = ports[1];\n          portsource = ports[0];\n        }\n\n        if (ordering === 'L-to-R') {\n          // If ordering is 'L-to-R' the porttarget should be the left most port and the portsource should be the right most port\n          porttarget.x = -1 * dist;\n          portsource.x = dist;\n          porttarget.y = 0;\n          portsource.y = 0;\n        } else if (ordering === 'R-to-L') {\n          // If ordering is 'R-to-L' the porttarget should be the right most port and the portsource should be the left most port\n          porttarget.x = dist;\n          portsource.x = -1 * dist;\n          porttarget.y = 0;\n          portsource.y = 0;\n        } else if (ordering === 'T-to-B') {\n          // If ordering is 'T-to-B' the porttarget should be the top most port and the portsource should be the bottom most port\n          porttarget.x = 0;\n          portsource.x = 0;\n          porttarget.y = -1 * dist;\n          portsource.y = dist;\n        } else {\n          //if ordering is 'B-to-T'\n          // If ordering is 'B-to-T' the porttarget should be the bottom most port and the portsource should be the top most port\n          porttarget.x = 0;\n          portsource.x = 0;\n          porttarget.y = dist;\n          portsource.y = -1 * dist;\n        }\n      }\n\n      node.data('ports', ports); // Reset the node ports\n    }\n\n    nodes.data('portsordering', ordering); // Update the cached orderings of the nodes\n\n    cy.endBatch();\n  };\n  /*\n  * Add ports to the given node, with given ordering and port distance.\n  */\n\n\n  elementUtilities.addPorts = function (node, ordering, portDistance) {\n    var firstPortId = node.id() + \".1\"; // Id of first port\n\n    var secondPortId = node.id() + \".2\"; // Id of seconf port\n    // First port object x and y will be filled according to ordering, the first port is supposed to be the left most or the top most one\n\n    var firstPort = {\n      id: firstPortId\n    }; // Second port object x and y will be filled according to ordering, the second port is supposed to be the right most or the bottom most one\n\n    var secondPort = {\n      id: secondPortId\n    }; // Complete port objects according to ordering\n\n    if (ordering === 'L-to-R' || ordering === 'R-to-L') {\n      // If ordering is in horizontal axis first port is the left most one and the second port is the right most one\n      firstPort.x = -1 * portDistance;\n      secondPort.x = portDistance;\n      firstPort.y = 0;\n      secondPort.y = 0;\n    } else {\n      // If ordering is 'T-to-B' or 'B-to-T'\n      // If ordering is in vertical axis first port is the top most one and the second port is the bottom most one\n      firstPort.y = -1 * portDistance;\n      secondPort.y = portDistance;\n      firstPort.x = 0;\n      secondPort.x = 0;\n    }\n\n    var fromLorT = ordering === 'L-to-R' || ordering === 'T-to-B'; // Check if ordering starts from left or top\n\n    var ports = [firstPort, secondPort]; // Ports array for the node\n\n    var connectedEdges = node.connectedEdges(); // The edges connected to the node\n\n    cy.startBatch();\n    node.data('ports', ports); // Reset the portsource and porttarget for each edge connected to the node\n\n    for (var i = 0; i < connectedEdges.length; i++) {\n      var edge = connectedEdges[i];\n      var edgeClass = edge.data('class');\n      /*\n       * If the node is the edge target we may need to set the porttarget of the edge to the input port of the node (First or second port accoring to the orientation)\n       * if it is the edge soruce we may need to set the portsource of the edge to the output port similarly.\n       * Note that if fron left or top (fromLorT) is true then the first port is the source port and second port is the target port,\n       * else it is vice versa.\n       *\n       */\n\n      if (edge.data('target') === node.id()) {\n        if (edgeClass === 'production' || this.isModulationArcClass(edgeClass)) {\n          continue; // production or modulation type of edges cannot be connected to any port of target node (A production can have a process as target node but it is supposed to be connected to that node from its body, not from a port)\n        }\n\n        if (fromLorT) {\n          edge.data('porttarget', firstPortId);\n        } else {\n          edge.data('porttarget', secondPortId);\n        }\n      } else {\n        if (edgeClass === 'consumption') {\n          continue; // consumpiton edge cannot be connected to any port of source node\n        }\n\n        if (fromLorT) {\n          edge.data('portsource', secondPortId);\n        } else {\n          edge.data('portsource', firstPortId);\n        }\n      }\n    }\n\n    cy.endBatch();\n  };\n  /*\n  * Remove the ports of the given node\n  */\n\n\n  elementUtilities.removePorts = function (node) {\n    var connectedEdges = node.connectedEdges();\n    var nodeId = node.id();\n    cy.startBatch(); // Reset portsource or porttarget of the connected edges to the node id\n\n    for (var i = 0; i < connectedEdges.length; i++) {\n      var edge = connectedEdges[i];\n\n      if (edge.data('source') === nodeId) {\n        edge.data('portsource', nodeId);\n      } else {\n        edge.data('porttarget', nodeId);\n      }\n    }\n\n    node.data('ports', []); // Clear ports data\n\n    cy.endBatch();\n  };\n\n  elementUtilities.changePortsOrientationAfterLayout = function () {\n    //Check all processes and logical operators with ports\n    cy.nodes().forEach(function (ele) {\n      if (ele.data('class') === 'process' || ele.data('class') === 'omitted process' || ele.data('class') === 'uncertain process' || ele.data('class') === 'association' || ele.data('class') === 'dissociation' || ele.data('class') === 'and' || ele.data('class') === 'or' || ele.data('class') === 'not') {\n        if (ele.data('ports').length === 2) {\n          var bestOrientation = elementUtilities.changePortsOrientation(ele);\n          elementUtilities.setPortsOrdering(ele, bestOrientation); // If improve-flow is checked we do the swaping of simple nodes with each other\n\n          var improveFlow = options.improveFlow;\n          improveFlow = typeof improveFlow === 'function' ? improveFlow.call() : improveFlow;\n\n          if (improveFlow) {\n            elementUtilities.postChangePortsOrientation(ele, bestOrientation);\n          }\n        }\n      }\n    });\n    cy.style().update();\n  };\n  /*\n   Calculates the best orientation for an 'ele' with port (process or logical operator) and returns it.\n   */\n\n\n  elementUtilities.changePortsOrientation = function (ele) {\n    var processId = ele.id();\n    var orientation = {\n      'L-to-R': 0,\n      'R-to-L': 0,\n      'T-to-B': 0,\n      'B-to-T': 0\n    };\n    var targetingEdges = cy.edges(\"[target='\" + processId + \"']\"); // Holds edges who have the input port as a target\n\n    var sourcingEdges = cy.edges(\"[source='\" + processId + \"']\"); // Holds edges who have the output port as a source\n    // Checks if the ports belong to a process or logial operator, it does the calculations based on the edges connected to its ports\n\n    if (ele.data('class') === 'process' || ele.data('class') === 'omitted process' || ele.data('class') === 'uncertain process' || ele.data('class') === 'association' || ele.data('class') === 'dissociation') {\n      targetingEdges.forEach(function (edge) {\n        if (edge.data('class') === 'consumption') {\n          var source = cy.getElementById(edge.data('source')); //Holds the element from the other side of edge\n\n          var simple = false; //Checks if it is a simple node - connected with only 1 edge\n\n          if (source.connectedEdges().length === 1) simple = true;\n          elementUtilities.calculateOrientationScore(ele, source, orientation, 'L-to-R', 'R-to-L', 'x', simple);\n          elementUtilities.calculateOrientationScore(ele, source, orientation, 'T-to-B', 'B-to-T', 'y', simple);\n        }\n      });\n      sourcingEdges.forEach(function (edge) {\n        if (edge.data('class') === 'production') {\n          var target = cy.getElementById(edge.data('target'));\n          var simple = false;\n          if (target.connectedEdges().length === 1) simple = true;\n          elementUtilities.calculateOrientationScore(ele, target, orientation, 'R-to-L', 'L-to-R', 'x', simple);\n          elementUtilities.calculateOrientationScore(ele, target, orientation, 'B-to-T', 'T-to-B', 'y', simple);\n        }\n      });\n    } else if (ele.data('class') === 'and' || ele.data('class') === 'or' || ele.data('class') === 'not') {\n      targetingEdges.forEach(function (edge) {\n        if (edge.data('class') === 'logic arc') {\n          var source = cy.getElementById(edge.data('source'));\n          var simple = false;\n          if (source.connectedEdges().length === 1) simple = true;\n          elementUtilities.calculateOrientationScore(ele, source, orientation, 'L-to-R', 'R-to-L', 'x', simple);\n          elementUtilities.calculateOrientationScore(ele, source, orientation, 'T-to-B', 'B-to-T', 'y', simple);\n        }\n      });\n      sourcingEdges.forEach(function (edge) {\n        if (edge.data('class') === 'modulation' || edge.data('class') === 'stimulation' || edge.data('class') === 'catalysis' || edge.data('class') === 'inhibition' || edge.data('class') === 'necessary stimulation' || edge.data('class') === 'logic arc') {\n          var target = cy.getElementById(edge.data('target'));\n          var simple = false;\n          if (target.connectedEdges().length === 1) simple = true;\n          elementUtilities.calculateOrientationScore(ele, target, orientation, 'R-to-L', 'L-to-R', 'x', simple);\n          elementUtilities.calculateOrientationScore(ele, target, orientation, 'B-to-T', 'T-to-B', 'y', simple);\n        }\n      });\n    } //Calculates the best orientation from all orientation scores\n\n\n    var bestOrientation = \"L-to-R\";\n    var bestScore = orientation['L-to-R']; //The score of the best orientation is always positive\n\n    for (var property in orientation) {\n      if (orientation[property] > bestScore) {\n        bestScore = orientation[property];\n        bestOrientation = property;\n      }\n    }\n\n    return bestOrientation;\n  };\n  /*\n   This function calculates the scores for each orientation\n   @param ele - is the node (process, logical operator) whose orientation will be changed. It can be process,omitted process,\n   uncertain process, association, dissociation, logical operator\n   @param other - is the other node, and based on its position scores are given to orientations\n   @param orientation - holds scores for each orientation\n   @param firstOrientation - can be L-to-R or T-to-B\n   @param oppositeOrientation - opposite of the upper orientation (R-to-L , B-to-T)\n   @param pos - can be 'x' or 'y' (based on vertical or horizontal direction of ports)\n   @param simple - checks if 'other' node is simple node (with degree 1)\n   */\n\n\n  elementUtilities.calculateOrientationScore = function (ele, other, orientation, firstOrientation, oppositeOrientation, pos, simple) {\n    var coeff = 0.5;\n    var score = 2;\n    if (simple) score = 1; // If it is a simple node, its score should affect less\n\n    var nodeWidthOrHeight = 0;\n    if (pos === 'x') nodeWidthOrHeight = ele.width() / 2;else if (pos === 'y') nodeWidthOrHeight = ele.height() / 2;\n\n    if (other.position(pos) < ele.position(pos) - nodeWidthOrHeight) {\n      orientation[firstOrientation] += score;\n      orientation[oppositeOrientation] -= score;\n    } else if (other.position(pos) >= ele.position(pos) - nodeWidthOrHeight && other.position(pos) <= ele.position(pos) + nodeWidthOrHeight) {\n      orientation[firstOrientation] += (ele.position(pos) - other.position(pos)) / nodeWidthOrHeight * coeff;\n      orientation[oppositeOrientation] -= (ele.position(pos) - other.position(pos)) / nodeWidthOrHeight * coeff;\n    } else if (other.position(pos) > ele.position(pos) + nodeWidthOrHeight) {\n      orientation[firstOrientation] -= score;\n      orientation[oppositeOrientation] += score;\n    }\n  };\n  /*\n  After a process is oriented, for each simple node that is on the wrong side of the port,\n  we try to find another simple node of degree 0 on the opposite side and swap them afterwards.\n  If from the opposide side we cannot find such a node then we try to swap it with an effector node of degree 1\n  */\n\n\n  elementUtilities.postChangePortsOrientation = function (ele, bestOrientation) {\n    var processId = ele.id();\n    var inputPort = []; // Holds all simple nodes connected with input port\n\n    var outputPort = []; // Holds all simple nodes connected with output port\n\n    var notConnectedToPort = []; // Holds all simple nodes not connected with input or output port\n\n    var targetingEdges = cy.edges(\"[target='\" + processId + \"']\");\n    var sourcingEdges = cy.edges(\"[source='\" + processId + \"']\"); // Checks simple nodes and add them to one of the arrays mentioned above\n\n    if (ele.data('class') === 'process' || ele.data('class') === 'omitted process' || ele.data('class') === 'uncertain process' || ele.data('class') === 'association' || ele.data('class') === 'dissociation') {\n      targetingEdges.forEach(function (edge) {\n        var source = cy.getElementById(edge.data('source'));\n\n        if (!source.isParent()) {\n          if (edge.data('class') === 'consumption') {\n            elementUtilities.addSimpleNodeToArray(ele, source, bestOrientation, inputPort, \"input\");\n          } else {\n            elementUtilities.addSimpleNodeToArray(ele, source, bestOrientation, notConnectedToPort, \"notConnected\");\n          }\n        }\n      });\n      sourcingEdges.forEach(function (edge) {\n        var target = cy.getElementById(edge.data('target'));\n\n        if (!target.isParent()) {\n          if (edge.data('class') === 'production') {\n            elementUtilities.addSimpleNodeToArray(ele, target, bestOrientation, outputPort, \"output\");\n          } else {\n            elementUtilities.addSimpleNodeToArray(ele, target, bestOrientation, notConnectedToPort, \"notConnected\");\n          }\n        }\n      });\n    } else if (ele.data('class') === 'and' || ele.data('class') === 'or' || ele.data('class') === 'not') {\n      targetingEdges.forEach(function (edge) {\n        var source = cy.getElementById(edge.data('source'));\n\n        if (!source.isParent()) {\n          if (edge.data('class') === 'logic arc') {\n            elementUtilities.addSimpleNodeToArray(ele, source, bestOrientation, inputPort, \"input\");\n          } else {\n            elementUtilities.addSimpleNodeToArray(ele, source, bestOrientation, notConnectedToPort, \"notConnected\");\n          }\n        }\n      });\n      sourcingEdges.forEach(function (edge) {\n        var target = cy.getElementById(edge.data('target'));\n\n        if (!target.isParent()) {\n          if (edge.data('class') === 'modulation' || edge.data('class') === 'stimulation' || edge.data('class') === 'catalysis' || edge.data('class') === 'inhibition' || edge.data('class') === 'necessary stimulation' || edge.data('class') === 'logic arc') {\n            elementUtilities.addSimpleNodeToArray(ele, target, bestOrientation, outputPort, \"output\");\n          } else {\n            elementUtilities.addSimpleNodeToArray(ele, target, bestOrientation, notConnectedToPort, \"notConnected\");\n          }\n        }\n      });\n    } //The arrays are sorted in order to keep the high priority of nodes positioned completely to the other side\n\n\n    inputPort.sort(function (a, b) {\n      return b.score - a.score;\n    });\n    outputPort.sort(function (a, b) {\n      return b.score - a.score;\n    });\n    notConnectedToPort.sort(function (a, b) {\n      return a.score - b.score;\n    }); //First we check for direct swaping between nodes from different ports positioned to the wrong side\n\n    var minLength = inputPort.length;\n    if (outputPort.length < minLength) minLength = outputPort.length;\n\n    for (i = 0; i < minLength; i++) {\n      var inputPortEle = inputPort.pop();\n      var outputPortEle = outputPort.pop(); //Checks if free nodes belong to the same compound\n\n      var firstNode = cy.getElementById(inputPortEle.id);\n      var secondNode = cy.getElementById(outputPortEle.id);\n\n      if (firstNode.data('parent') !== secondNode.data('parent')) {\n        continue;\n      }\n\n      elementUtilities.swapElements(inputPortEle, outputPortEle);\n    }\n    /*\n     After that we iterate over each element of effector nodes and see the scores it produces by swaping\n     with nodes connected to input or output ports\n     */\n\n\n    for (i = notConnectedToPort.length - 1; i >= 0; i--) {\n      var effector = notConnectedToPort[i];\n\n      if (outputPort.length > 0) {\n        var firstOutput = outputPort[outputPort.length - 1]; //Checks if free nodes belong to the same compound\n\n        var firstNode = cy.getElementById(effector.id);\n        var secondNode = cy.getElementById(firstOutput.id);\n\n        if (firstNode.data('parent') !== secondNode.data('parent')) {\n          continue;\n        }\n\n        elementUtilities.swapElements(effector, firstOutput);\n        var firstOutputScore = -elementUtilities.checkNegativeOrientationScore(ele, cy.getElementById(firstOutput.id), bestOrientation);\n\n        if (firstOutputScore > firstOutput.score) {\n          outputPort.pop();\n        } else elementUtilities.swapElements(effector, firstOutput); //swap back\n\n      } else if (inputPort.length > 0) {\n        var firstInput = inputPort[inputPort.length - 1]; //Checks if free nodes belong to the same compound\n\n        var firstNode = cy.getElementById(effector.id);\n        var secondNode = cy.getElementById(firstInput.id);\n\n        if (firstNode.data('parent') !== secondNode.data('parent')) {\n          continue;\n        }\n\n        elementUtilities.swapElements(effector, firstInput);\n        var firstInputScore = elementUtilities.checkNegativeOrientationScore(ele, cy.getElementById(firstInput.id), bestOrientation);\n\n        if (firstInputScore > firstInput.score) {\n          inputPort.pop();\n        } else elementUtilities.swapElements(effector, firstInput);\n      }\n    }\n  };\n  /*\n  * Adds simple nodes when they have negative score to inputPort, outputPort or notConnectedPort arrays\n  * */\n\n\n  elementUtilities.addSimpleNodeToArray = function (ele, other, orientation, array, connectedTo) {\n    if (other.connectedEdges().length === 1) {\n      var nodeScore;\n      var obj = {};\n\n      if (connectedTo === \"notConnected\") {\n        nodeScore = Math.abs(elementUtilities.checkNegativeOrientationScore(ele, other, orientation));\n        obj['id'] = other.id();\n        obj['score'] = nodeScore;\n        array.push(obj);\n      } else {\n        if (connectedTo === \"input\") nodeScore = elementUtilities.checkNegativeOrientationScore(ele, other, orientation);else if (connectedTo === \"output\") nodeScore = -elementUtilities.checkNegativeOrientationScore(ele, other, orientation);\n\n        if (nodeScore < 0) //if it is in the wrong side we add it to the input array\n          {\n            obj['id'] = other.id();\n            obj['score'] = nodeScore;\n            array.push(obj);\n          }\n      }\n    }\n  };\n  /*\n  This function calculates the score of a node based on its position with respect to a process/logical operator\n  @param ele - is the node with the ports. It can be process,omitted process,\n  uncertain process, association, dissociation, logical operator\n  @param other - is the other node, and based on its position score of a node is calculated\n  @param orientation - A string which holds current best orientation\n  */\n\n\n  elementUtilities.checkNegativeOrientationScore = function (ele, other, orientation) {\n    var coeff = 0.5;\n    var score = 1;\n\n    if (orientation === 'L-to-R' || orientation === 'R-to-L') {\n      var nodeWidth = ele.width() / 2;\n\n      if (other.position('x') < ele.position('x') - nodeWidth) {\n        if (orientation === 'L-to-R') return score;else if (orientation === 'R-to-L') return -score;\n      } else if (other.position('x') >= ele.position('x') - nodeWidth && other.position('x') <= ele.position('x') + nodeWidth) {\n        if (orientation === 'L-to-R') return (ele.position('x') - other.position('x')) / nodeWidth * coeff;else if (orientation === 'R-to-L') return -(ele.position('x') - other.position('x')) / nodeWidth * coeff;\n      } else if (other.position('x') > ele.position('x') + nodeWidth) {\n        if (orientation === 'L-to-R') return -score;else if (orientation === 'R-to-L') return score;\n      }\n    }\n\n    if (orientation === 'T-to-B' || orientation === 'B-to-T') {\n      var nodeHeight = ele.height() / 2;\n\n      if (other.position('y') < ele.position('y') - nodeHeight) {\n        if (orientation === 'T-to-B') return score;else if (orientation === 'B-to-T') return -score;\n      } else if (other.position('y') >= ele.position('y') - nodeHeight && other.position('y') <= ele.position('y') + nodeHeight) {\n        if (orientation === 'T-to-B') return (ele.position('y') - other.position('y')) / nodeHeight * coeff;else if (orientation === 'B-to-T') return -(ele.position('y') - other.position('y')) / nodeHeight * coeff;\n      } else if (other.position('y') > ele.position('y') + nodeHeight) {\n        if (orientation === 'T-to-B') return -score;else if (orientation === 'B-to-T') return score;\n      }\n    }\n  };\n  /*\n  Swaps the positions of 2 elements\n  */\n\n\n  elementUtilities.swapElements = function (firstEle, secondEle) {\n    var firstNode = cy.getElementById(firstEle.id);\n    var secondNode = cy.getElementById(secondEle.id);\n    var tempx = firstNode.position('x');\n    var tempy = firstNode.position('y');\n    firstNode.position('x', secondNode.position('x'));\n    firstNode.position('y', secondNode.position('y'));\n    secondNode.position('x', tempx);\n    secondNode.position('y', tempy);\n  }; // used for handling the variable property of complexes\n\n\n  elementUtilities.getComplexPadding = function (ele) {\n    // this property needs to take into account:\n    // - presence of a label\n    // - option to display complex labels\n    // - presence of states and info box on the bottom\n    var padding = graphUtilities.getCompoundPaddings();\n    padding = padding < 5 ? 5 : padding;\n\n    if (options.showComplexName && elementUtilities.getElementContent(ele)) {\n      padding += options.extraComplexPadding * 0.5; // if there is something on the bottom side\n\n      if (ele.data('auxunitlayouts') && ele.data('auxunitlayouts').bottom && ele.data('auxunitlayouts').bottom.units.length > 0) {\n        padding += options.extraComplexPadding * 0.5;\n      } else {\n        for (var i = 0; i < ele.data('statesandinfos').length; i++) {\n          var statesandinfos = ele.data('statesandinfos')[i];\n          var thisY = statesandinfos.bbox.y;\n          var thisH = statesandinfos.bbox.h;\n          var parentY = ele.data('class') == \"compartment\" || ele.data('class') == \"complex\" ? ele.data('bbox').y : ele.position().y;\n          var height = ele.data(\"originalH\") ? ele.data(\"originalH\") : ele.height();\n          var parentY2 = Number((parentY + height / 2).toFixed(2));\n          var centerY = Number((thisY + thisH / 2).toFixed(2));\n\n          if (centerY == parentY2) {\n            padding += options.extraComplexPadding * 0.5;\n            break;\n          }\n        }\n      }\n    } // for the case where the padding is the tightest, we need a bit of extra space\n    // to avoid touching the infoboxes of the complex\n    else {\n        if (ele.data('statesandinfos').length > 0) {\n          padding += 2;\n        }\n      }\n\n    return padding;\n  }; // used for handling the variable property of complexes\n\n\n  elementUtilities.getComplexMargin = function (ele) {\n    // this property needs to take into account:\n    // - presence of a label\n    // - option to display complex labels\n    // - presence of states and info box on the bottom\n    var margin = -1 * options.extraComplexPadding;\n\n    if (options.showComplexName && elementUtilities.getElementContent(ele) && ele.data('auxunitlayouts') && // check if there is something on the bottom side\n    ele.data('auxunitlayouts').bottom && ele.data('auxunitlayouts').bottom.units.length > 0) {\n      margin -= options.extraComplexPadding * 0.5;\n    }\n\n    if (ele.css(\"font-size\") == \"14px\") margin -= 2;\n    return margin;\n  }; // Set clone marker status of given nodes to the given status.\n\n\n  elementUtilities.setCloneMarkerStatus = function (node, status) {\n    if (status) node.data('clonemarker', true);else node.removeData('clonemarker');\n    if (node.data('class') !== \"unspecified entity\" && node.data('class') !== \"perturbing agent\") return;\n    var bgObj = {\n      'background-image': 'data:image/svg+xml;utf8,%3Csvg%20width%3D%22100%22%20height%3D%22100%22%20viewBox%3D%220%200%20100%20100%22%20style%3D%22fill%3Anone%3Bstroke%3Ablack%3Bstroke-width%3A0%3B%22%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20%3E%3Crect%20x%3D%220%22%20y%3D%220%22%20width%3D%22100%22%20height%3D%22100%22%20style%3D%22fill%3A%23838383%22/%3E%20%3C/svg%3E',\n      'background-position-x': '50%',\n      'background-position-y': '100%',\n      'background-width': '100%',\n      'background-height': '25%',\n      'background-fit': 'none',\n      'background-image-opacity': '0'\n    };\n    var imgs = node.data('background-image') ? node.data('background-image').split(\" \") : [];\n    var xPos = node.data('background-position-x') ? node.data('background-position-x').split(\" \") : [];\n    var yPos = node.data('background-position-y') ? node.data('background-position-y').split(\" \") : [];\n    var widths = node.data('background-width') ? node.data('background-width').split(\" \") : [];\n    var heights = node.data('background-height') ? node.data('background-height').split(\" \") : [];\n    var fits = node.data('background-fit') ? node.data('background-fit').split(\" \") : [];\n    var opacities = node.data('background-image-opacity') ? (\"\" + node.data('background-image-opacity')).split(\" \") : [];\n\n    if (status) {\n      var index = imgs.indexOf(bgObj['background-image']); // Already exists; Make opacity non-zero\n\n      if (index > -1) opacities[index] = node.css('background-opacity');else {\n        imgs.push(bgObj['background-image']);\n        xPos.push(bgObj['background-position-x']);\n        yPos.push(bgObj['background-position-y']);\n        widths.push(bgObj['background-width']);\n        heights.push(bgObj['background-height']);\n        fits.push(bgObj['background-fit']);\n        opacities.push(node.css('background-opacity'));\n      }\n    } else {\n      var index = imgs.indexOf(bgObj['background-image']); // Already exists; Make opacity zero\n\n      if (index > -1) opacities[index] = '0';\n    }\n\n    node.data('background-image', imgs.join(\" \"));\n    node.data('background-position-x', xPos.join(\" \"));\n    node.data('background-position-y', yPos.join(\" \"));\n    node.data('background-width', widths.join(\" \"));\n    node.data('background-height', heights.join(\" \"));\n    node.data('background-fit', fits.join(\" \"));\n    node.data('background-image-opacity', opacities.join(\" \"));\n  }; // Section End\n  // Stylesheet helpers\n\n\n  var defaultProperties = {};\n\n  var getDefaultNodeProperties = function getDefaultNodeProperties() {\n    return {\n      'border-width': 1.25,\n      'border-color': '#555555',\n      'background-color': '#ffffff',\n      'background-opacity': 1,\n      'background-image-opacity': 1,\n      'text-wrap': 'wrap'\n    };\n  };\n\n  var getDefaultEdgeProperties = function getDefaultEdgeProperties() {\n    return {\n      'line-color': '#555555',\n      'width': 1.25\n    };\n  };\n\n  var getDefaultProcessSize = function getDefaultProcessSize() {\n    return {\n      width: 20,\n      height: 20\n    };\n  };\n\n  var getDefaultLogicalOperatorSize = function getDefaultLogicalOperatorSize() {\n    return {\n      width: 30,\n      height: 30\n    };\n  };\n\n  var getDefaultBASize = function getDefaultBASize() {\n    return {\n      width: 60,\n      height: 30\n    };\n  };\n\n  var defaultSifEdgeColorMap = {\n    'neighbor-of': '#FC002C',\n    'interacts-with': '#B57261',\n    'in-complex-with': '#B4987A',\n    'controls-state-change-of': '#B4E1CD',\n    'controls-transport-of': '#F0E7C8',\n    'controls-phosphorylation-of': '#D970A1',\n    'catalysis-precedes': '#8EC3ED',\n    'controls-expression-of': '#6A0F30',\n    'consumption-controled-by': '#A9A9F7',\n    'controls-production-of': '#2D5207',\n    'controls-transport-of-chemical': '#3F00FF',\n    'chemical-affects': '#D95F23',\n    'reacts-with': '#4E214B',\n    'used-to-produce': '#FF2F07',\n    'phosphorylates': '#43A93C',\n    'dephosphorylates': '#CD4F32',\n    'upregulates-expression': '#43A93C',\n    'downregulates-expression': '#CD4F32',\n    'activates': '#32D849',\n    'inhibits': '#4886A5',\n    'activates-gtpase': '#468DE3',\n    'inhibits-gtpase': '#C364BF',\n    'acetylates': '#55B1B6',\n    'deacetylates': '#EE5F78',\n    'methylates': '#B0B03D',\n    'demethylates': '#DB6F21'\n  };\n  var defaultSizeMap = {\n    'macromolecule': {\n      width: 60,\n      height: 30\n    },\n    'nucleic acid feature': {\n      width: 60,\n      height: 30\n    },\n    'simple chemical': {\n      width: 30,\n      height: 30\n    },\n    'empty set': {\n      width: 22,\n      height: 22\n    },\n    'phenotype': {\n      width: 60,\n      height: 30\n    },\n    'unspecified entity': {\n      width: 60,\n      height: 30\n    },\n    'perturbing agent': {\n      width: 60,\n      height: 30\n    },\n    'complex': {\n      width: 44,\n      height: 44\n    },\n    'compartment': {\n      width: 80,\n      height: 80\n    },\n    'submap': {\n      width: 80,\n      height: 80\n    },\n    'tag': {\n      width: 35,\n      height: 35\n    },\n    'SIF macromolecule': {\n      width: 60,\n      height: 30\n    },\n    'SIF simple chemical': {\n      width: 30,\n      height: 30\n    },\n    'topology group': {\n      width: 44,\n      height: 44\n    }\n  };\n  elementUtilities.processTypes.forEach(function (type) {\n    // phenotype has a different default size\n    if (type == 'phenotype') {\n      return;\n    }\n\n    defaultSizeMap[type] = getDefaultProcessSize();\n  });\n  elementUtilities.logicalOperatorTypes.forEach(function (type) {\n    defaultSizeMap[type] = getDefaultLogicalOperatorSize();\n  });\n  elementUtilities.biologicalActivityTypes.forEach(function (type) {\n    defaultSizeMap[type] = getDefaultBASize();\n  });\n\n  var getDefaultSize = function getDefaultSize(type) {\n    return defaultSizeMap[type];\n  };\n\n  var getDefaultFontProperties = function getDefaultFontProperties() {\n    return {\n      'font-size': 11,\n      'font-family': 'Helvetica',\n      'font-style': 'normal',\n      'font-weight': 'normal',\n      'color': '#000'\n    };\n  };\n\n  var getDefaultInfoboxProperties = function getDefaultInfoboxProperties(nodeClass, infoboxType) {\n    return {\n      'font-size': getDefaultInfoboxFontSize(nodeClass, infoboxType),\n      'font-family': 'Arial',\n      'font-style': 'normal',\n      'font-weight': 'normal',\n      'font-color': '#0f0f0f',\n      'border-width': 1,\n      'border-color': '#555555',\n      'background-color': '#ffffff',\n      'shape-name': getDefaultInfoboxShapeName(nodeClass, infoboxType),\n      'width': getDefaultInfoboxSize(nodeClass, infoboxType).w,\n      'height': getDefaultInfoboxSize(nodeClass, infoboxType).h\n    };\n  };\n\n  var getDefaultInfoboxFontSize = function getDefaultInfoboxFontSize(nodeClass, infoboxType) {\n    var fontsize = 9;\n\n    if (nodeClass === 'SIF macromolecule' || nodeClass === 'SIF simple chemical') {\n      fontsize = 11;\n    }\n\n    return fontsize;\n  };\n\n  var getDefaultInfoboxSize = function getDefaultInfoboxSize(nodeClass, infoboxType) {\n    var w = 12,\n        h = 12;\n\n    if (nodeClass === 'SIF macromolecule' || nodeClass === 'SIF simple chemical') {\n      w = 15;\n      h = 15;\n    }\n\n    return {\n      w: w,\n      h: h\n    };\n  };\n\n  var getDefaultInfoboxShapeName = function getDefaultInfoboxShapeName(nodeClass, infoboxType) {\n    if (infoboxType === 'state variable') {\n      return 'stadium';\n    }\n\n    if (elementUtilities.isSIFNode(nodeClass)) {\n      if (infoboxType === 'unit of information') {\n        if (nodeClass == 'SIF macromolecule') {\n          return 'stadium';\n        }\n\n        return 'rectangle';\n      }\n    } else {\n      var list = elementUtilities.getUnitOfInfoShapeOptions(nodeClass);\n      return list[0];\n    }\n  };\n\n  elementUtilities.nodeTypes.forEach(function (type) {\n    defaultProperties[type] = $.extend({}, getDefaultNodeProperties(), getDefaultSize(type));\n\n    if (elementUtilities.canHaveStateVariable(type)) {\n      var props = getDefaultInfoboxProperties(type, 'state variable');\n      defaultProperties[type]['state variable'] = props;\n    }\n\n    if (elementUtilities.canHaveUnitOfInformation(type)) {\n      var props = getDefaultInfoboxProperties(type, 'unit of information');\n      defaultProperties[type]['unit of information'] = props;\n    }\n  });\n  elementUtilities.compoundNodeTypes.forEach(function (type) {\n    defaultProperties[type] = $.extend(defaultProperties[type], {\n      'background-opacity': 0.5\n    });\n  });\n  $.extend(defaultProperties['association'], {\n    'background-color': '#707070'\n  });\n  elementUtilities.epnTypes.concat(elementUtilities.sifTypes).concat(elementUtilities.otherNodeTypes).concat(elementUtilities.biologicalActivityTypes).concat(['phenotype']).forEach(function (type) {\n    $.extend(defaultProperties[type], getDefaultFontProperties());\n  });\n  $.extend(defaultProperties['submap'], {\n    'font-size': 14,\n    'border-width': 2.25\n  });\n  $.extend(defaultProperties['compartment'], {\n    'font-size': 14,\n    'border-width': 3.25\n  });\n  elementUtilities.edgeTypes.forEach(function (type) {\n    defaultProperties[type] = getDefaultEdgeProperties();\n\n    if (defaultSifEdgeColorMap[type]) {\n      defaultProperties[type]['line-color'] = defaultSifEdgeColorMap[type];\n    }\n  });\n\n  function getProp(props, name) {\n    var prop = props[name];\n\n    if (typeof prop !== null && _typeof(prop) === 'object') {\n      return $.extend({}, prop);\n    }\n\n    return prop;\n  }\n\n  function extendDataWithClassDefaults(data, className, propsToSkip) {\n    if (!className) {\n      return;\n    }\n\n    var defaultProps = elementUtilities.getDefaultProperties(className);\n    Object.keys(defaultProps).forEach(function (name) {\n      if (!propsToSkip || !propsToSkip[name]) {\n        data[name] = getProp(defaultProps, name);\n      }\n    });\n  }\n\n  elementUtilities.extendNodeDataWithClassDefaults = function (data, className) {\n    // list of properties to skip\n    var propsToSkip = {\n      'width': true,\n      'height': true,\n      'state variable': true,\n      'unit of information': true,\n      'multimer': true,\n      'clonemarker': true,\n      'ports-ordering': true\n    };\n    extendDataWithClassDefaults(data, className, propsToSkip);\n  };\n\n  elementUtilities.extendEdgeDataWithClassDefaults = function (data, className) {\n    extendDataWithClassDefaults(data, className);\n  }; // get infobox properties and filter the ones related to style only\n\n\n  elementUtilities.getDefaultInfoboxStyle = function (nodeClass, infoboxType) {\n    var defaultProps = elementUtilities.getDefaultProperties(nodeClass);\n    var infoboxStyle = $.extend({}, defaultProps[infoboxType]); // width and height are belonging to bbox object rather than style object\n\n    var nonStyleProps = ['width', 'height'];\n    nonStyleProps.forEach(function (propName) {\n      delete infoboxStyle[propName];\n    });\n    return infoboxStyle;\n  };\n\n  elementUtilities.getDefaultProperties = function (sbgnclass) {\n    if (sbgnclass == undefined) {\n      return defaultProperties;\n    }\n\n    var pureClass = elementUtilities.getPureSbgnClass(sbgnclass); // init default properties for the class if not initialized yet\n\n    if (defaultProperties[pureClass] == null) {\n      defaultProperties[pureClass] = {};\n    }\n\n    return defaultProperties[pureClass];\n  };\n\n  elementUtilities.setDefaultProperties = function (sbgnclass, props) {\n    $.extend(elementUtilities.getDefaultProperties(sbgnclass), props);\n  };\n\n  elementUtilities.lockGraphTopology = function () {\n    elementUtilities.graphTopologyLocked = true;\n\n    if (cy.expandCollapse) {\n      cy.expandCollapse('get').disableCue();\n    }\n  };\n\n  elementUtilities.unlockGraphTopology = function () {\n    elementUtilities.graphTopologyLocked = false;\n\n    if (cy.expandCollapse) {\n      cy.expandCollapse('get').enableCue();\n    }\n  };\n\n  elementUtilities.isGraphTopologyLocked = function () {\n    return elementUtilities.graphTopologyLocked;\n  };\n\n  elementUtilities.languageToMapType = function (lang) {\n    switch (lang) {\n      case 'process description':\n        return 'PD';\n\n      case 'activity flow':\n        return 'AF';\n\n      case 'sif':\n        return 'SIF';\n\n      case 'hybrid sbgn':\n        return 'HybridSbgn';\n\n      default:\n        return 'HybridAny';\n    }\n  };\n\n  elementUtilities.mapTypeToLanguage = function (mapType) {\n    switch (mapType) {\n      case 'PD':\n        return 'process description';\n\n      case 'AF':\n        return 'activity flow';\n\n      case 'SIF':\n        return 'sif';\n\n      case 'HybridSbgn':\n        return 'hybrid sbgn';\n\n      default:\n        return 'hybrid any';\n    }\n  };\n\n  elementUtilities.getAllCollapsedChildrenRecursively = function (nodes) {\n    var expandCollapse = cy.expandCollapse('get');\n    var collapsedChildren = cy.collection();\n    var collapsedNodes = nodes.filter(\".cy-expand-collapse-collapsed-node\");\n    collapsedNodes.forEach(function (n) {\n      collapsedChildren = collapsedChildren.union(expandCollapse.getCollapsedChildrenRecursively(n));\n    });\n    return collapsedChildren;\n  };\n\n  elementUtilities.getWidthByContent = function (content, fontFamily, fontSize, options) {\n    return textUtilities.getWidthByContent(content, fontFamily, fontSize, options);\n  };\n\n  return elementUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/element-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/experimental-data-overlay.js":
/*!****************************************************!*\
  !*** ./src/utilities/experimental-data-overlay.js ***!
  \****************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var cy;\n  var parsedDataMap;\n  var visibleDataMapByExp;\n  var groupedDataMap;\n  var visibleFiles;\n  var colorMap;\n  var allVis;\n  var fileDescription;\n  var fileTitle;\n\n  function experimentalDataOverlay(param) {\n    // Init\n    cy = param.sbgnCyInstance.getCy();\n    parsedDataMap = {};\n    visibleDataMapByExp = {};\n    visibleFiles = {};\n    groupedDataMap = {};\n    colorMap = {};\n    allVis = true;\n    fileDescription = {};\n    fileTitle = {};\n  }\n\n  experimentalDataOverlay.getName = function () {\n    return fname;\n  };\n\n  experimentalDataOverlay.getDesc = function () {\n    return fdesc;\n  };\n\n  experimentalDataOverlay.getGroupedDataMap = function () {\n    return groupedDataMap;\n  };\n\n  experimentalDataOverlay.getParsedDataMap = function () {\n    return parsedDataMap;\n  };\n\n  experimentalDataOverlay.getVisibleData = function () {\n    return visibleDataMapByExp;\n  };\n\n  experimentalDataOverlay.hideAll = function () {\n    var invisibleExp = {};\n    var invisibleFile = {};\n    allVis = false;\n\n    for (var i in groupedDataMap) {\n      if (visibleFiles[i]) {\n        visibleFiles[i] = false;\n        invisibleFile[i] = false;\n      }\n    }\n\n    for (var fileName in groupedDataMap) {\n      for (var j = 0; j < groupedDataMap[fileName].length; j++) {\n        var expName = groupedDataMap[fileName][j];\n        if (visibleDataMapByExp[fileName + '?' + expName] == undefined) continue;\n\n        if (visibleDataMapByExp[fileName + '?' + expName] == true) {\n          invisibleExp[fileName + '?' + expName] = false;\n          visibleDataMapByExp[fileName + '?' + expName] = false;\n        }\n      }\n    }\n\n    this.showData();\n    params = {\n      invisibleFile: invisibleFile,\n      invisibleExp: invisibleExp\n    };\n    return params;\n  };\n\n  experimentalDataOverlay.hideAllUndo = function (invisibleFile, invisibleExp) {\n    for (var j in invisibleFile) {\n      visibleFiles[j] = true;\n    }\n\n    for (var _j in invisibleExp) {\n      visibleDataMapByExp[_j] = true;\n    }\n\n    allVis = true;\n    this.showData();\n    return;\n  };\n\n  experimentalDataOverlay.unhideAll = function () {\n    var visibleExp = {};\n    var visibleFile = {};\n    allVis = true;\n\n    for (var i in visibleFiles) {\n      if (!visibleFiles[i]) {\n        visibleFiles[i] = true;\n        visibleFile[i] = true;\n      }\n    }\n\n    for (var fileName in groupedDataMap) {\n      if (groupedDataMap[fileName] == undefined) {\n        return;\n      }\n\n      for (var j = 0; j < groupedDataMap[fileName].length; j++) {\n        var expName = groupedDataMap[fileName][j];\n        if (visibleDataMapByExp[fileName + '?' + expName] == undefined) continue;\n\n        if (visibleDataMapByExp[fileName + '?' + expName] == false) {\n          visibleExp[fileName + '?' + expName] = true;\n          visibleDataMapByExp[fileName + '?' + expName] = true;\n        }\n      }\n    }\n\n    this.showData();\n    return {\n      visibleExp: visibleExp,\n      visibleFile: visibleFile\n    };\n  };\n\n  experimentalDataOverlay.unhideAllUndo = function (visibleFile, visibleExp) {\n    for (var j in visibleFile) {\n      visibleFiles[j] = false;\n    }\n\n    for (var _j2 in visibleExp) {\n      visibleDataMapByExp[_j2] = false;\n    }\n\n    allVis = false;\n    this.showData();\n    return;\n  };\n\n  experimentalDataOverlay.removeAll = function () {\n    var parsed = {};\n    var visible = {};\n    var grouped = {};\n    var visiblef = {};\n\n    for (var i in parsedDataMap) {\n      if (!parsed[i]) {\n        parsed[i] = {};\n      }\n\n      for (var j in parsedDataMap[i]) {\n        parsed[i][j] = parsedDataMap[i][j];\n      }\n    }\n\n    for (var _i in visibleDataMapByExp) {\n      visible[_i] = visibleDataMapByExp[_i];\n    }\n\n    for (var _i2 in visibleFiles) {\n      visiblef[_i2] = visibleFiles[_i2];\n    }\n\n    for (var _i3 in groupedDataMap) {\n      if (!grouped[_i3]) {\n        grouped[_i3] = [];\n      }\n\n      for (var _j3 in groupedDataMap[_i3]) {\n        grouped[_i3].push(groupedDataMap[_i3][_j3]);\n      }\n    }\n\n    parsedDataMap = {};\n    visibleDataMapByExp = {};\n    visibleFiles = {};\n    groupedDataMap = {};\n    this.showData();\n    params = {\n      parsed: parsed,\n      visible: visible,\n      grouped: grouped,\n      visiblef: visiblef\n    };\n    return params;\n  };\n\n  experimentalDataOverlay.restoreAll = function (parsed, visible, grouped, visiblef) {\n    parsedDataMap = parsed;\n    visibleDataMapByExp = visible;\n    groupedDataMap = grouped;\n    visibleFiles = visiblef;\n    this.showData();\n    param = {};\n    return param;\n  };\n\n  experimentalDataOverlay.addExp = function (fileName, expName, isVisible, values, groupArray) {\n    visibleDataMapByExp[fileName + '?' + expName] = isVisible;\n    groupedDataMap[fileName] = groupArray;\n\n    for (var i in values) {\n      if (values[i][fileName + '?' + expName] != undefined) parsedDataMap[i][fileName + '?' + expName] = values[i][fileName + '?' + expName];\n    }\n\n    var params = {\n      fileName: fileName,\n      expName: expName\n    };\n    this.showData();\n    return params;\n  };\n\n  experimentalDataOverlay.addFile = function (fileName, parsed, visible, grouped, visiblef) {\n    parsedDataMap = parsed;\n    visibleDataMapByExp = visible;\n    groupedDataMap = grouped;\n    visibleFiles = visiblef;\n    this.showData();\n    param = {\n      fileName: fileName\n    };\n    return param;\n  };\n\n  experimentalDataOverlay.removeExp = function (fileName, expName) {\n    var isVisible = false;\n    var values = {};\n    var groupArray = [];\n\n    if (visibleDataMapByExp[fileName + '?' + expName] != undefined) {\n      isVisible = visibleDataMapByExp[fileName + '?' + expName];\n      delete visibleDataMapByExp[fileName + '?' + expName];\n    }\n\n    if (groupedDataMap[fileName] != undefined) {\n      for (var i in groupedDataMap[fileName]) {\n        groupArray[i] = groupedDataMap[fileName][i];\n      } //groupArray = groupedDataMap[fileName];\n\n\n      var index = groupedDataMap[fileName].indexOf(expName);\n\n      if (index != -1) {\n        delete groupedDataMap[fileName][index];\n      }\n    }\n\n    for (var _i4 in parsedDataMap) {\n      if (parsedDataMap[_i4][fileName + '?' + expName] != undefined) {\n        if (!(_i4 in values)) {\n          values[_i4] = {};\n        }\n\n        values[_i4][fileName + '?' + expName] = parsedDataMap[_i4][fileName + '?' + expName];\n        delete parsedDataMap[_i4][fileName + '?' + expName];\n      }\n    }\n\n    if (groupedDataMap[fileName] != undefined) {\n      var count = 0;\n\n      for (var _i5 = 0; _i5 < groupedDataMap[fileName].length; _i5++) {\n        if (!groupedDataMap[fileName][_i5]) count++;\n      }\n\n      if (count == groupedDataMap[fileName].length) {\n        delete groupedDataMap[fileName];\n      }\n    }\n\n    params = {\n      fileName: fileName,\n      expName: expName,\n      isVisible: isVisible,\n      values: values,\n      groupArray: groupArray\n    };\n    this.showData();\n    return params;\n  };\n\n  experimentalDataOverlay.removeFile = function (fileName) {\n    if (groupedDataMap[fileName] == undefined) {\n      return;\n    }\n\n    var parsed = {};\n    var visible = {};\n    var grouped = {};\n    var visiblef = {};\n\n    for (var i in parsedDataMap) {\n      if (!parsed[i]) {\n        parsed[i] = {};\n      }\n\n      for (var j in parsedDataMap[i]) {\n        parsed[i][j] = parsedDataMap[i][j];\n      }\n    }\n\n    for (var _i6 in visibleDataMapByExp) {\n      visible[_i6] = visibleDataMapByExp[_i6];\n    }\n\n    for (var _i7 in visibleFiles) {\n      visiblef[_i7] = visibleFiles[_i7];\n    }\n\n    for (var _i8 in groupedDataMap) {\n      if (!grouped[_i8]) {\n        grouped[_i8] = [];\n      }\n\n      for (var _j4 in groupedDataMap[_i8]) {\n        grouped[_i8].push(groupedDataMap[_i8][_j4]);\n      }\n    }\n\n    for (var _j5 = 0; _j5 < groupedDataMap[fileName].length; _j5++) {\n      var expName = groupedDataMap[fileName][_j5];\n      if (visibleDataMapByExp[fileName + '?' + expName] != undefined) delete visibleDataMapByExp[fileName + '?' + expName];\n\n      for (var _i9 in parsedDataMap) {\n        delete parsedDataMap[_i9][fileName + '?' + expName];\n      }\n    }\n\n    delete groupedDataMap[fileName];\n    var params = {\n      fileName: fileName,\n      parsed: parsed,\n      visible: visible,\n      grouped: grouped,\n      visiblef: visiblef\n    };\n    this.showData();\n    var k = 0;\n\n    for (var _i10 in groupedDataMap) {\n      k++;\n    }\n\n    if (k == 0) {\n      groupedDataMap = {};\n    }\n\n    return params;\n  };\n\n  experimentalDataOverlay.hideExp = function (fileName, expName) {\n    if (visibleDataMapByExp[fileName + '?' + expName] == undefined) return;\n    visibleDataMapByExp[fileName + '?' + expName] = false;\n    params = {\n      fileName: fileName,\n      expName: expName\n    };\n    this.showData();\n    return params;\n  };\n\n  experimentalDataOverlay.hideFile = function (fileName) {\n    visibleFiles[fileName] = false;\n    var invisible = {};\n\n    if (groupedDataMap[fileName] == undefined) {\n      return;\n    }\n\n    for (var j = 0; j < groupedDataMap[fileName].length; j++) {\n      var expName = groupedDataMap[fileName][j];\n      if (visibleDataMapByExp[fileName + '?' + expName] == undefined) continue;\n\n      if (visibleDataMapByExp[fileName + '?' + expName] == true) {\n        invisible[fileName + '?' + expName] = false;\n        visibleDataMapByExp[fileName + '?' + expName] = false;\n      }\n    }\n\n    this.showData();\n    params = {\n      fileName: fileName,\n      invisible: invisible\n    };\n    return params;\n  };\n\n  experimentalDataOverlay.hideFileUndo = function (fileName, invisible) {\n    if (visibleFiles[fileName] != undefined) visibleFiles[fileName] = true;else return;\n\n    for (var j in invisible) {\n      visibleDataMapByExp[j] = true;\n    }\n\n    this.showData();\n    return {\n      fileName: fileName\n    };\n  };\n\n  experimentalDataOverlay.unhideExp = function (fileName, expName) {\n    if (visibleDataMapByExp[fileName + '?' + expName] == undefined) return;\n    visibleDataMapByExp[fileName + '?' + expName] = true;\n    params = {\n      fileName: fileName,\n      expName: expName\n    };\n    this.showData();\n    return params;\n  };\n\n  experimentalDataOverlay.unhideFile = function (fileName) {\n    var visible = {};\n    visibleFiles[fileName] = true;\n\n    if (groupedDataMap[fileName] == undefined) {\n      return;\n    }\n\n    for (var j = 0; j < groupedDataMap[fileName].length; j++) {\n      var expName = groupedDataMap[fileName][j];\n      if (visibleDataMapByExp[fileName + '?' + expName] == undefined) continue;\n\n      if (visibleDataMapByExp[fileName + '?' + expName] == false) {\n        visibleDataMapByExp[fileName + '?' + expName] = true;\n        visible[fileName + '?' + expName] = true;\n      }\n    }\n\n    this.showData();\n    params = {\n      fileName: fileName,\n      visible: visible\n    };\n    return params;\n  };\n\n  experimentalDataOverlay.unhideFileUndo = function (fileName, visible) {\n    visibleFiles[fileName] = false;\n\n    for (var j in visible) {\n      visibleDataMapByExp[j] = false;\n    }\n\n    this.showData();\n    return {\n      fileName: fileName\n    };\n  };\n\n  experimentalDataOverlay.countVisibleDataByExp = function () {\n    // Count the genomic data that will be displayed on nodes' body\n    var dataBoxCount = 0;\n\n    for (var exp in visibleDataMapByExp) {\n      if (visibleDataMapByExp[exp]) {\n        dataBoxCount++;\n      }\n    }\n\n    return dataBoxCount;\n  };\n\n  experimentalDataOverlay.generateSVGForNode = function (ele, tooltip) {\n    var dataBoxCount = this.countVisibleDataByExp();\n    var values = []; // Experimental data overlay part !\n    // const dataURI = 'data:image/svg+xml;utf8,'\n\n    var svgNameSpace = 'http://www.w3.org/2000/svg';\n    var nodeLabel = ele.data('label');\n    var reqWidth = ele.outerWidth();\n    var reqHeight = ele.outerHeight();\n    var overlayRecBoxW = reqWidth;\n    var overlayRecBoxH = reqHeight;\n    var svg = document.createElementNS(svgNameSpace, 'svg'); // It seems this should be set according to the node size !\n\n    svg.setAttribute('width', reqWidth);\n    svg.setAttribute('height', reqHeight); // This is important you need to include this to succesfully render in cytoscape.js!\n\n    svg.setAttribute('xmlns', svgNameSpace); // Overlay Data Rect\n\n    var overLayRectBBox = {\n      w: overlayRecBoxW,\n      h: overlayRecBoxH,\n      x: 0,\n      y: 0\n    };\n    var frequencyData = parsedDataMap[nodeLabel];\n    var maxDataBoxCount =\n    /*(genomicDataBoxCount > 3) ? 3:*/\n    dataBoxCount;\n    var counter = 0;\n\n    for (var i in groupedDataMap) {\n      for (var j in groupedDataMap[i]) {\n        var fileName = i;\n        var expName = groupedDataMap[i][j];\n\n        if (!visibleDataMapByExp[fileName + '?' + expName]) {\n          continue;\n        }\n\n        if (frequencyData[fileName + '?' + expName] !== undefined) {\n          values.push(frequencyData[fileName + '?' + expName]);\n          dataRectangleGenerator(overLayRectBBox.x + counter * overLayRectBBox.w / maxDataBoxCount, overLayRectBBox.y, overLayRectBBox.w / maxDataBoxCount, overLayRectBBox.h, frequencyData[fileName + '?' + expName], svg, fileName);\n        } else {\n          values.push(\"-\");\n          dataRectangleGenerator(overLayRectBBox.x + counter * overLayRectBBox.w / maxDataBoxCount, overLayRectBBox.y, overLayRectBBox.w / maxDataBoxCount, overLayRectBBox.h, null, svg, fileName);\n        } //  draw separator line between data rectangles\n\n\n        if (counter < maxDataBoxCount - 1) {\n          var overlayRect = document.createElementNS(svgNameSpace, 'line');\n          overlayRect.setAttribute('x1', overLayRectBBox.x + counter * overLayRectBBox.w / maxDataBoxCount + overLayRectBBox.w / maxDataBoxCount);\n          overlayRect.setAttribute('y1', overLayRectBBox.y);\n          overlayRect.setAttribute('x2', overLayRectBBox.x + counter * overLayRectBBox.w / maxDataBoxCount + overLayRectBBox.w / maxDataBoxCount);\n          overlayRect.setAttribute('y2', overLayRectBBox.y + overLayRectBBox.h);\n          overlayRect.setAttribute('style', 'stroke-width:1;stroke:rgb(85,85,85);');\n          svg.appendChild(overlayRect);\n        }\n\n        counter++;\n      }\n    }\n\n    tooltip.content = \"(\" + values.join(\",\") + \")\";\n\n    function interpolateColor(color1, color2, factor) {\n      var result = color1.slice();\n\n      for (var i = 0; i < 3; i++) {\n        result[i] = Math.round(result[i] + factor * (color2[i] - color1[i]));\n      }\n\n      return result;\n    }\n\n    ;\n\n    function decideColor(percent, fileName) {\n      var sorted = [];\n\n      for (var _i11 in colorMap[fileName]) {\n        sorted.push(_i11);\n      }\n\n      sorted.sort();\n      var prev = sorted[0];\n      var next = sorted[sorted.length - 1];\n\n      if (percent < prev || percent > next) {\n        return {\n          r: 210,\n          g: 210,\n          b: 210\n        };\n      }\n\n      for (var k in sorted) {\n        var i = sorted[k];\n\n        if (i == percent) {\n          return {\n            r: colorMap[fileName][i][0],\n            g: colorMap[fileName][i][1],\n            b: colorMap[fileName][i][2]\n          };\n        } else if (i > percent) {\n          next = i;\n          break;\n        } else {\n          prev = i;\n        }\n      }\n\n      var steps = 1 / (next - prev);\n      var res = interpolateColor(colorMap[fileName][prev], colorMap[fileName][next], steps * (percent - prev));\n      return {\n        r: res[0],\n        g: res[1],\n        b: res[2]\n      };\n    }\n\n    function dataRectangleGenerator(x, y, w, h, percent, parentSVG, fileName) {\n      var colorString = '';\n\n      if (percent) {\n        var color = decideColor(parseInt(percent), fileName);\n        colorString = 'rgb(' + Math.round(color.r) + ',' + Math.round(color.g) + ',' + Math.round(color.b) + ')'; // Rectangle Part\n\n        var _overlayRect = document.createElementNS(svgNameSpace, 'rect');\n\n        _overlayRect.setAttribute('x', x);\n\n        _overlayRect.setAttribute('y', y);\n\n        _overlayRect.setAttribute('width', w);\n\n        _overlayRect.setAttribute('height', h);\n\n        _overlayRect.setAttribute('style', 'opacity:1;fill:' + colorString + ';');\n\n        parentSVG.appendChild(_overlayRect);\n      } else {\n        colorString = 'rgb(210,210,210)'; // Rectangle Part\n\n        var _overlayRect2 = document.createElementNS(svgNameSpace, 'rect');\n\n        _overlayRect2.setAttribute('x', x);\n\n        _overlayRect2.setAttribute('y', y);\n\n        _overlayRect2.setAttribute('width', w);\n\n        _overlayRect2.setAttribute('height', h);\n\n        _overlayRect2.setAttribute('style', 'opacity:1;fill:' + colorString + ';');\n\n        parentSVG.appendChild(_overlayRect2);\n      }\n    }\n\n    return svg;\n  };\n\n  experimentalDataOverlay.showData = function () {\n    var self = this;\n    var nodeCollection = cy.collection();\n    var collapsedChildren = cy.expandCollapse('get').getAllCollapsedChildrenRecursively().filter(\"node\");\n    var collapsedChildrenNotParent = cy.collection();\n    var parentSet = new Set(); // parent ids of collapsed children\n\n    collapsedChildren.forEach(function (node) {\n      parentSet.add(node.parent().id());\n    }); // filter parent nodes from collapsed children\n\n    collapsedChildren.forEach(function (node) {\n      if (!parentSet.has(node.id())) {\n        // this means removed node is not parent\n        collapsedChildrenNotParent = collapsedChildrenNotParent.union(node);\n      }\n    });\n    var expandableNodes = cy.expandCollapse('get').expandableNodes();\n    nodeCollection = nodeCollection.union(cy.nodes()).union(collapsedChildrenNotParent).difference(expandableNodes);\n    cy.batch(function () {\n      nodeCollection.forEach(function (node) {\n        var nodeLabel = node.data('label');\n        var imageURI = 'data:image/svg+xml;utf8,';\n\n        if (nodeLabel in parsedDataMap && !node.isParent()) {\n          var tooltip = {\n            content: ''\n          };\n          imageURI = imageURI + encodeURIComponent(self.generateSVGForNode(node, tooltip).outerHTML);\n\n          if (Object.keys(parsedDataMap[nodeLabel]).length > 0) {\n            // var tooltip = \"(\" + Object.values(parsedDataMap[nodeLabel]).join(\",\") + \")\";\n            node.data(\"tooltip\", tooltip.content);\n          } else {\n            node.data('tooltip', '');\n          }\n\n          node.data('background-image', imageURI), node.data('background-position-x', '100%');\n          node.data('background-position-y', '100%');\n          node.data('background-width', '100%');\n          node.data('background-height', '100%');\n          node.data('background-fit', 'contain');\n          node.data('background-image-opacity', '1');\n        } else {\n          node.data('background-image', \"\");\n          node.data('tooltip', '');\n        }\n      });\n    });\n  };\n\n  experimentalDataOverlay.hexToRgb = function (hex) {\n    if (hex[0] == '#') {\n      hex = hex.substring(1);\n    } else {\n      return;\n    }\n\n    var bigint = parseInt(hex, 16);\n    var r = bigint >> 16 & 255;\n    var g = bigint >> 8 & 255;\n    var b = bigint & 255;\n    return [r, g, b];\n  };\n\n  experimentalDataOverlay.isHex = function (hex) {\n    return typeof hex == 'string' && hex.length == 7 && !isNaN(Number('0x' + hex.substring(1))) && hex[0] == '#';\n  };\n\n  experimentalDataOverlay.parseData = function (data, fileName, errorCallback, sampleExperiment) {\n    parsedDataMap = parsedDataMap || {};\n    visibleDataMapByExp = visibleDataMapByExp || {};\n    groupedDataMap = groupedDataMap || {};\n    colorMap = colorMap || {};\n    var experiments = [];\n    var colors = {};\n\n    if (fileName in groupedDataMap && !sampleExperiment) {\n      return;\n    } else if (fileName in groupedDataMap && sampleExperiment) {\n      this.removeAll();\n    }\n\n    var parsed = {};\n    var visible = {};\n    var grouped = {};\n    var visiblef = {};\n    var colorm = {};\n    var fileD = {};\n    var fileN = {};\n\n    for (var i in parsedDataMap) {\n      if (!parsed[i]) {\n        parsed[i] = {};\n      }\n\n      for (var j in parsedDataMap[i]) {\n        parsed[i][j] = parsedDataMap[i][j];\n      }\n    }\n\n    for (var _i12 in visibleDataMapByExp) {\n      visible[_i12] = visibleDataMapByExp[_i12];\n    }\n\n    for (var _i13 in visibleFiles) {\n      visiblef[_i13] = visibleFiles[_i13];\n    }\n\n    for (var _i14 in groupedDataMap) {\n      if (!grouped[_i14]) {\n        grouped[_i14] = [];\n      }\n\n      for (var _j6 in groupedDataMap[_i14]) {\n        grouped[_i14].push(groupedDataMap[_i14][_j6]);\n      }\n    }\n\n    for (var _i15 in colorMap) {\n      colorm[_i15] = colorMap[_i15];\n    }\n\n    for (var _i16 in visibleFiles) {\n      fileD[_i16] = fileDescription[_i16];\n    }\n\n    for (var _i17 in visibleFiles) {\n      fileN[_i17] = fileTitle[_i17];\n    }\n\n    var intregex = \"^(-?)(0|([1-9][0-9]*))(\\\\.[0-9]+)?$\";\n    var version = '1.0';\n    var clr = false; // By lines\n\n    var lines = data.split('\\n');\n\n    if (lines.length < 2) {\n      errorCallback();\n      return \"Error\";\n    }\n\n    var k = 0;\n    var upto = 4;\n\n    if (lines.length < 4) {\n      upto = lines.length;\n    }\n\n    for (var _i18 = 0; _i18 < upto; _i18++) {\n      if (lines[_i18].substring(0, 7) == 'version') {\n        k++;\n\n        var metaLines = lines[_i18].split('\\t');\n\n        if (metaLines[1] && metaLines[1].length > 1) {\n          version = metaLines[1];\n        } else {\n          fileDescription = fileD;\n          fileTitle = fileN;\n          version = \"1.0\";\n          colorMap = colorm;\n          errorCallback();\n          return \"Error\";\n        }\n      }\n\n      if (lines[_i18].substring(0, 4) == 'name') {\n        k++;\n\n        var _metaLines = lines[_i18].split('\\t');\n\n        if (_metaLines[1] && _metaLines[1].length > 1) {\n          fileTitle[fileName] = _metaLines[1];\n        } else {\n          fileTitle = fileN;\n          fileDescription = fileD;\n          version = \"1.0\";\n          colorMap = colorm;\n          errorCallback();\n          return \"Error\";\n        }\n      }\n\n      if (lines[_i18].substring(0, 11) == 'description') {\n        k++;\n\n        var _metaLines2 = lines[_i18].split('\\t');\n\n        if (_metaLines2[1] && _metaLines2[1].length > 1) {\n          fileDescription[fileName] = _metaLines2[1];\n        } else {\n          fileTitle = fileN;\n          fileDescription = fileD;\n          version = \"1.0\";\n          colorMap = colorm;\n          errorCallback();\n          return \"Error\";\n        }\n      }\n\n      if (lines[_i18].substring(0, 5) == 'color') {\n        clr = true;\n        k++;\n\n        var _metaLines3 = lines[_i18].split('\\t');\n\n        if (_metaLines3.length <= 1 && _metaLines3.length % 2 == 0) {\n          errorCallback();\n          return \"Error\";\n        }\n\n        for (var t = 1; t < _metaLines3.length - 1; t = t + 2) {\n          var hex = _metaLines3[t + 1];\n\n          if (t == _metaLines3.length - 2) {\n            hex = hex.trim();\n          }\n\n          if (_metaLines3[t] == \"min\" || _metaLines3[t] == \"max\") {\n            if (this.isHex(hex)) {\n              colors[_metaLines3[t]] = this.hexToRgb(hex);\n            }\n          } else if (parseInt(_metaLines3[t]) != NaN) {\n            if (this.isHex(hex)) {\n              colors[parseInt(_metaLines3[t])] = this.hexToRgb(hex);\n            } else {\n              fileTitle = fileN;\n              fileDescription = fileD;\n              colorMap = colorm;\n              version = \"1.0\";\n              errorCallback();\n              return \"Error\";\n            }\n          } else {\n            fileTitle = fileN;\n            fileDescription = fileD;\n            colorMap = colorm;\n            version = \"1.0\";\n            errorCallback();\n            return \"Error\";\n          }\n        }\n      }\n    } //default colors\n\n\n    if (!clr) {\n      colors[-100] = this.hexToRgb('#0000ff');\n      colors[100] = this.hexToRgb('#ff0000');\n      colors[0] = this.hexToRgb('#ffffff');\n    } // First line is meta data !\n\n\n    var metaLineColumns = lines[k].split('\\t'); // Parse experiment types\n\n    for (var _i19 = 1; _i19 < metaLineColumns.length; _i19++) {\n      if (_i19 == metaLineColumns.length - 1) {\n        var trimmed = metaLineColumns[_i19].trim();\n\n        experiments.push(trimmed);\n      } else experiments.push(metaLineColumns[_i19]);\n\n      visibleDataMapByExp[fileName + '?' + experiments[_i19 - 1]] = true;\n\n      if (groupedDataMap[fileName] === undefined) {\n        groupedDataMap[fileName] = [];\n      }\n\n      groupedDataMap[fileName].push(experiments[_i19 - 1]);\n    }\n\n    visibleFiles[fileName] = true;\n    var min = Number.MAX_VALUE;\n    var max = Number.MIN_VALUE; // parse genomic data\n\n    for (var _i20 = k + 1; _i20 < lines.length; _i20++) {\n      // EOF check\n      if (lines[_i20].length === 0) {\n        break;\n      } // Split each line by tab and parse genomic data content\n\n\n      var lineContent = lines[_i20].split('\\t');\n\n      var eleSymbol = lineContent[0]; // If current gene entry is not  in genomic data map create new map\n\n      if (!(eleSymbol in parsedDataMap)) {\n        parsedDataMap[eleSymbol] = {};\n      } // Add each entry of genomic data\n\n\n      for (var _j7 = 1; _j7 < lineContent.length; _j7++) {\n        if (_j7 == lineContent.length - 1) {\n          lineContent[_j7] = lineContent[_j7].trim();\n        }\n\n        if (lineContent[_j7].match(intregex)) {\n          parsedDataMap[eleSymbol][fileName + '?' + experiments[_j7 - 1]] = lineContent[_j7];\n        } else {\n          parsedDataMap = parsed;\n          visibleDataMapByExp = visible;\n          groupedDataMap = grouped;\n          colorMap = colorm;\n          visibleFiles = visiblef;\n          fileTitle = fileN;\n          fileDescription = fileD;\n          version = \"1.0\";\n          errorCallback();\n          return \"Error\";\n        }\n\n        if (lineContent[_j7] > max) {\n          max = lineContent[_j7];\n        }\n\n        if (lineContent[_j7] < min) {\n          min = lineContent[_j7];\n        }\n      }\n    }\n\n    if (colors['min']) {\n      var colorvalue = colors['min'];\n      delete colors['min'];\n      colors[min] = colorvalue;\n    }\n\n    if (colors['max']) {\n      var colorvalue = colors['max'];\n      delete colors['max'];\n      colors[max] = colorvalue;\n    }\n\n    colorMap[fileName] = colors;\n    var params = {\n      fileName: fileName\n    };\n    this.showData();\n    return params;\n  };\n\n  experimentalDataOverlay.getExperimentalData = function () {\n    return {\n      visibleDataMapByExp: visibleDataMapByExp,\n      visibleFiles: visibleFiles,\n      fileDescription: fileDescription,\n      allVis: allVis,\n      fileTitle: fileTitle,\n      parsedDataMap: parsedDataMap\n    };\n  };\n\n  return experimentalDataOverlay;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/experimental-data-overlay.js\n");

/***/ }),

/***/ "./src/utilities/file-utilities-factory.js":
/*!*************************************************!*\
  !*** ./src/utilities/file-utilities-factory.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var console = __webpack_require__(/*! console-browserify */ \"console-browserify\");\n/*\n* File Utilities: To be used on read/write file operation\n*/\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\n\nvar libs = libUtilities.getLibs();\nvar jQuery = $ = libs.jQuery;\nvar saveAs = libs.saveAs;\n\nvar textUtilities = __webpack_require__(/*! ./text-utilities */ \"./src/utilities/text-utilities.js\");\n\nmodule.exports = function () {\n  // Helper functions Start\n  // see http://stackoverflow.com/questions/16245767/creating-a-blob-from-a-base64-string-in-javascript\n  function b64toBlob(b64Data, contentType, sliceSize) {\n    contentType = contentType || '';\n    sliceSize = sliceSize || 512;\n    var byteCharacters = atob(b64Data);\n    var byteArrays = [];\n\n    for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {\n      var slice = byteCharacters.slice(offset, offset + sliceSize);\n      var byteNumbers = new Array(slice.length);\n\n      for (var i = 0; i < slice.length; i++) {\n        byteNumbers[i] = slice.charCodeAt(i);\n      }\n\n      var byteArray = new Uint8Array(byteNumbers);\n      byteArrays.push(byteArray);\n    }\n\n    var blob = new Blob(byteArrays, {\n      type: contentType\n    });\n    return blob;\n  }\n\n  function loadTextDoc(fullFilePath) {\n    if (window.XMLHttpRequest) {\n      xhttp = new XMLHttpRequest();\n    } else {\n      xhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n    }\n\n    xhttp.overrideMimeType('application/text');\n    xhttp.open(\"GET\", fullFilePath, false);\n    xhttp.send();\n    return xhttp.responseText;\n  }\n\n  function loadXMLDoc(fullFilePath) {\n    if (window.XMLHttpRequest) {\n      xhttp = new XMLHttpRequest();\n    } else {\n      xhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n    }\n\n    xhttp.overrideMimeType('application/xml');\n    xhttp.open(\"GET\", fullFilePath, false);\n    xhttp.send();\n    return xhttp.responseXML;\n  } // Should this be exposed or should this be moved to the helper functions section?\n\n\n  function textToXmlObject(text) {\n    if (window.ActiveXObject) {\n      var doc = new ActiveXObject('Microsoft.XMLDOM');\n      doc.async = 'false';\n      doc.loadXML(text);\n    } else {\n      var parser = new DOMParser();\n      var doc = parser.parseFromString(text, 'text/xml');\n    }\n\n    return doc;\n  } // Helper functions End\n\n\n  var sbgnmlToJson, jsonToSbgnml, jsonToNwt, uiUtilities, tdToJson, sifToJson, graphUtilities, layoutToText, nwtToJson, jsonToSif, sbgnmlToCd, cdToSbgnml, sbgnmlToSbml, sbmlToSbgnml;\n  var updateGraph;\n  var options, cy;\n\n  function fileUtilities(param) {\n    sbgnmlToJson = param.sbgnmlToJsonConverter;\n    nwtToJson = param.nwtToJsonConverter;\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    jsonToNwt = param.jsonToNwtConverter;\n    jsonToSif = param.jsonToSifConverter;\n    uiUtilities = param.uiUtilities;\n    tdToJson = param.tdToJsonConverter;\n    sifToJson = param.sifToJsonConverter;\n    layoutToText = param.layoutToText;\n    graphUtilities = param.graphUtilities;\n    updateGraph = graphUtilities.updateGraph.bind(graphUtilities);\n    options = param.optionUtilities.getOptions();\n    cy = param.sbgnCyInstance.getCy();\n    sbgnmlToCd = param.sbgnmlToCdConverter;\n    cdToSbgnml = param.cdToSbgnmlConverter;\n    sbgnmlToSbml = param.sbgnmlToSbmlConverter;\n    sbmlToSbgnml = param.sbmlToSbgnmlConverter;\n  }\n\n  fileUtilities.loadXMLDoc = loadXMLDoc;\n  fileUtilities.textToXmlObject = textToXmlObject;\n\n  fileUtilities.saveAsPng = function (filename, scale, bg, maxWidth, maxHeight) {\n    if (maxWidth || maxHeight) {\n      var pngContent = cy.png({\n        full: true,\n        bg: bg,\n        maxWidth: maxWidth,\n        maxHeight: maxHeight\n      });\n    } else {\n      var pngContent = cy.png({\n        scale: scale || 3,\n        full: true,\n        bg: bg\n      });\n    } // this is to remove the beginning of the pngContent: data:img/png;base64,\n\n\n    var b64data = pngContent.substr(pngContent.indexOf(\",\") + 1); // lower quality when response is empty\n\n    if (!b64data || b64data === \"\") {\n      pngContent = cy.png({\n        maxWidth: 15000,\n        maxHeight: 15000,\n        full: true,\n        bg: bg\n      });\n      b64data = pngContent.substr(pngContent.indexOf(\",\") + 1);\n    }\n\n    saveAs(b64toBlob(b64data, \"image/png\"), filename || \"network.png\");\n  };\n\n  fileUtilities.saveAsJpg = function (filename, scale, bg, maxWidth, maxHeight, quality) {\n    if (maxWidth || maxHeight) {\n      var jpgContent = cy.jpg({\n        full: true,\n        bg: bg,\n        maxWidth: maxWidth,\n        maxHeight: maxHeight,\n        quality: quality\n      });\n    } else {\n      var jpgContent = cy.jpg({\n        scale: scale || 3,\n        full: true,\n        bg: bg,\n        quality: quality\n      });\n    } // this is to remove the beginning of the pngContent: data:img/png;base64,\n\n\n    var b64data = jpgContent.substr(jpgContent.indexOf(\",\") + 1); // lower quality when response is empty\n\n    if (!b64data || b64data === \"\") {\n      jpgContent = cy.jpg({\n        maxWidth: 15000,\n        maxHeight: 15000,\n        full: true,\n        bg: bg\n      });\n      b64data = jpgContent.substr(jpgContent.indexOf(\",\") + 1);\n    }\n\n    saveAs(b64toBlob(b64data, \"image/jpg\"), filename || \"network.jpg\");\n  };\n\n  fileUtilities.saveAsSvg = function (filename, scale, bg, maxWidth, maxHeight) {\n    if (maxWidth || maxHeight) {\n      var svgContent = cy.svg({\n        full: true,\n        bg: bg,\n        maxWidth: maxWidth,\n        maxHeight: maxHeight\n      });\n    } else {\n      var svgContent = cy.svg({\n        scale: scale || 1,\n        full: true,\n        bg: bg\n      });\n    }\n\n    saveAs(new Blob([svgContent], {\n      type: \"image/svg+xml;charset=utf-8\"\n    }), filename || \"network.svg\");\n  };\n\n  fileUtilities.loadSample = function (filename, folderpath, callback) {\n    var file = (folderpath || 'sample-app/samples/') + filename;\n    uiUtilities.startSpinner(\"load-spinner\"); // Users may want to do customized things while a sample is being loaded\n    // Trigger an event for this purpose and specify the 'filename' as an event parameter\n\n    $(document).trigger(\"sbgnvizLoadSample\", [filename, cy]); // Aliases for sbgnvizLoadSampleStart\n\n    $(document).trigger(\"sbgnvizLoadSampleStart\", [filename, cy]);\n    var text = loadTextDoc(file);\n    var matchResult = text.match(\"<renderInformation[^]*</renderInformation>\");\n\n    if (matchResult != null) {\n      var renderInfoString = matchResult[0];\n      var renderInfoStringCopy = (' ' + renderInfoString).slice(1);\n      var regex = /\\s([\\S]+)([\\s]*)=/g;\n      var result;\n      var matches = [];\n\n      while (result = regex.exec(renderInfoString)) {\n        matches.push(result[0]);\n      }\n\n      ;\n      matches.forEach(function (match) {\n        renderInfoString = renderInfoString.replace(match, textUtilities.FromKebabToCamelCase(match));\n      });\n      text = text.replace(renderInfoStringCopy, renderInfoString);\n    }\n\n    var xmlObject = textToXmlObject(text);\n    setTimeout(function () {\n      updateGraph(nwtToJson.convert(xmlObject));\n      fileUtilities.collapseMarkedNodes();\n      uiUtilities.endSpinner(\"load-spinner\");\n      $(document).trigger(\"sbgnvizLoadSampleEnd\", [filename, cy]); // Trigger an event signaling that a sample is loaded\n\n      if (typeof callback !== 'undefined') {\n        callback();\n      }\n    }, 0);\n  };\n\n  fileUtilities.loadSIFFile = function (file, layoutBy, callback) {\n    var convert = function convert(text) {\n      return sifToJson.convert(text);\n    };\n\n    var runLayout = function runLayout() {\n      if (layoutBy) {\n        if (typeof layoutBy === 'function') {\n          layoutBy();\n        } else {\n          var layout = cy.layout(layoutBy); // for backward compatibility need to make this if check\n\n          if (layout && layout.run) {\n            layout.run();\n          }\n        }\n      }\n\n      cy.fit(cy.elements(\":visible\"), 20);\n    };\n\n    fileUtilities.loadFile(file, convert, undefined, callback, undefined, runLayout);\n  };\n\n  fileUtilities.loadTDFile = function functionName(file, callback) {\n    var convert = function convert(text) {\n      return tdToJson.convert(text);\n    };\n\n    fileUtilities.loadFile(file, convert, undefined, callback);\n  };\n\n  fileUtilities.loadSBGNMLFile = function (file, callback1, callback2) {\n    var convert = function convert(text) {\n      return sbgnmlToJson.convert(textToXmlObject(text));\n    };\n\n    fileUtilities.loadFile(file, convert, callback1, callback2, fileUtilities.collapseMarkedNodes);\n  };\n\n  fileUtilities.loadNwtFile = function (file, callback1, callback2, urlParams) {\n    var convert = function convert(text) {\n      return nwtToJson.convert(textToXmlObject(text), urlParams);\n    };\n\n    fileUtilities.loadFile(file, convert, callback1, callback2, fileUtilities.collapseMarkedNodes);\n  }; // collapse the nodes whose collapse data field is set\n\n\n  fileUtilities.collapseMarkedNodes = function () {\n    // collapse nodes\n    var nodesToCollapse = cy.nodes(\"[collapse]\");\n\n    if (nodesToCollapse.length > 0) {\n      cy.expandCollapse('get').collapse(nodesToCollapse, {\n        layoutBy: null\n      });\n      nodesToCollapse.forEach(function (ele, i, eles) {\n        ele.position(ele.data(\"positionBeforeSaving\"));\n      });\n      nodesToCollapse.removeData(\"positionBeforeSaving\");\n    }\n  };\n  /*\n    callback is a function remotely defined to add specific behavior that isn't implemented here.\n    it is completely optional.\n    signature: callback(textXml)\n  */\n\n\n  fileUtilities.loadFile = function (file, convertFcn, callback1, callback2, callback3, callback4) {\n    var self = this;\n    uiUtilities.startSpinner(\"load-file-spinner\");\n    var textType = /text.*/;\n    var reader = new FileReader();\n\n    reader.onload = function (e) {\n      var text = this.result;\n      var matchResult = text.match(\"<renderInformation[^]*</renderInformation>\");\n\n      if (matchResult != null) {\n        var imagesElementMatch = text.match(\"<listOfBackgroundImages[^]*</listOfBackgroundImages>\");\n        var imagesElement;\n\n        if (imagesElementMatch != null) {\n          imagesElement = imagesElementMatch[0];\n        }\n\n        var renderInfoString = matchResult[0];\n        var renderInfoStringCopy = (' ' + renderInfoString).slice(1);\n        var regex = /\\s([\\S]+)([\\s]*)=/g;\n        var result;\n        var matches = [];\n\n        while (result = regex.exec(renderInfoString)) {\n          matches.push(result[0]);\n        }\n\n        ;\n        matches.forEach(function (match) {\n          renderInfoString = renderInfoString.replace(match, textUtilities.FromKebabToCamelCase(match));\n        });\n        text = text.replace(renderInfoStringCopy, renderInfoString);\n        var imagesElementMatchDirty = text.match(\"<listOfBackgroundImages[^]*</listOfBackgroundImages>\");\n\n        if (imagesElementMatchDirty != null) {\n          text = text.replace(imagesElementMatchDirty[0], imagesElement);\n        }\n      }\n\n      setTimeout(function () {\n        if (typeof callback1 !== 'undefined') callback1(text);\n        var cyGraph;\n\n        try {\n          cyGraph = convertFcn(text); // Users may want to do customized things while an external file is being loaded\n          // Trigger an event for this purpose and specify the 'filename' as an event parameter\n\n          $(document).trigger(\"sbgnvizLoadFile\", [file.name, cy]); // Aliases for sbgnvizLoadFileStart\n\n          $(document).trigger(\"sbgnvizLoadFileStart\", [file.name, cy]);\n        } catch (err) {\n          uiUtilities.endSpinner(\"load-file-spinner\");\n          console.log(err);\n          if (typeof callback2 !== 'undefined') callback2();\n          return;\n        }\n\n        updateGraph(cyGraph);\n\n        if (typeof callback3 !== 'undefined') {\n          callback3();\n        }\n\n        uiUtilities.endSpinner(\"load-file-spinner\");\n        $(document).trigger(\"sbgnvizLoadFileEnd\", [file.name, cy]); // Trigger an event signaling that a file is loaded\n\n        if (typeof callback4 !== 'undefined') {\n          callback4();\n        }\n      }, 0);\n    };\n\n    reader.readAsText(file);\n  };\n\n  fileUtilities.loadSBGNMLText = function (textData, tileInfoBoxes, filename, cy, urlParams) {\n    setTimeout(function () {\n      updateGraph(sbgnmlToJson.convert(textToXmlObject(textData), urlParams), undefined, undefined, tileInfoBoxes);\n      $(document).trigger(\"sbgnvizLoadFileEnd\", [filename, cy]);\n      uiUtilities.endSpinner(\"load-file-spinner\");\n    }, 0);\n  }; // supported versions are either 0.2 or 0.3\n\n\n  fileUtilities.saveAsSbgnml = function (filename, version, renderInfo, mapProperties, nodes, edges) {\n    var sbgnmlText = jsonToSbgnml.createSbgnml(filename, version, renderInfo, mapProperties, nodes, edges);\n    var blob = new Blob([sbgnmlText], {\n      type: \"text/plain;charset=utf-8;\"\n    });\n    saveAs(blob, filename);\n  }; // supported versions are either 0.2 or 0.3\n\n\n  fileUtilities.saveAsNwt = function (filename, version, renderInfo, mapProperties, nodes, edges) {\n    var sbgnmlText = jsonToNwt.createNwt(filename, version, renderInfo, mapProperties, nodes, edges);\n    var blob = new Blob([sbgnmlText], {\n      type: \"text/plain;charset=utf-8;\"\n    });\n    saveAs(blob, filename);\n  };\n\n  fileUtilities.saveAsCellDesigner = function (filename, errorCallback) {\n    uiUtilities.startSpinner(\"load-spinner\");\n    var sbgnml = jsonToSbgnml.createSbgnml();\n    this.convertSbgnmlToCD(sbgnml, function (data) {\n      if (data == null) {\n        errorCallback();\n      } else {\n        var blob = new Blob([data], {\n          type: \"text/plain;charset=utf-8;\"\n        });\n        saveAs(blob, filename);\n      }\n\n      uiUtilities.endSpinner(\"load-spinner\");\n    });\n  };\n\n  fileUtilities.loadCellDesigner = function (file, successCallback, errorCallback) {\n    var reader = new FileReader();\n\n    reader.onload = function (e) {\n      this.convertCDToSbgnml(e.target.result, function (data) {\n        uiUtilities.endSpinner(\"load-spinner\");\n\n        if (data == null) {\n          errorCallback();\n        } else {\n          successCallback(data);\n        }\n      });\n    }.bind(this);\n\n    uiUtilities.startSpinner(\"load-spinner\");\n    reader.readAsText(file);\n  };\n\n  fileUtilities.saveAsSbml = function (filename, errorCallback) {\n    uiUtilities.startSpinner(\"load-spinner\");\n    var sbgnml = this.convertSbgn();\n    this.convertSbgnmlToSbml(sbgnml, function (data) {\n      if (!data.result) {\n        errorCallback(sbgnml, data.error);\n      } else if (data.message.indexOf(\"Internal server error\") !== -1) {\n        errorCallback(sbgnml, data.message);\n      } else {\n        var blob = new Blob([data.message], {\n          type: \"text/plain;charset=utf-8;\"\n        });\n        saveAs(blob, filename);\n      }\n\n      uiUtilities.endSpinner(\"load-spinner\");\n    });\n  };\n\n  fileUtilities.loadSbml = function (file, successCallback, errorCallback) {\n    var reader = new FileReader();\n\n    reader.onload = function (e) {\n      this.convertSbmlToSbgnml(e.target.result, function (data) {\n        uiUtilities.endSpinner(\"load-spinner\");\n\n        if (data == null) {\n          errorCallback();\n        } else {\n          successCallback(data);\n        }\n      });\n    }.bind(this);\n\n    uiUtilities.startSpinner(\"load-spinner\");\n    reader.readAsText(file);\n  };\n\n  fileUtilities.convertSbgn = function (filename, version, renderInfo, mapProperties, nodes, edges) {\n    var sbgnmlText = jsonToSbgnml.createSbgnml(filename, \"plain\", renderInfo, mapProperties, nodes, edges);\n    return sbgnmlText;\n  };\n\n  fileUtilities.exportLayoutData = function (filename, byName) {\n    var layoutText = layoutToText.convert(byName);\n    var blob = new Blob([layoutText], {\n      type: \"text/plain;charset=utf-8;\"\n    });\n    saveAs(blob, filename);\n  };\n\n  fileUtilities.saveAsPlainSif = function (filename) {\n    var text = jsonToSif.convert();\n    var blob = new Blob([text], {\n      type: \"text/plain;charset=utf-8;\"\n    });\n    saveAs(blob, filename);\n  };\n\n  fileUtilities.convertSbgnmlTextToJson = function (sbgnmlText) {\n    return sbgnmlToJson.convert(textToXmlObject(sbgnmlText));\n  };\n\n  fileUtilities.convertSifTextToJson = function (sifText) {\n    return sifToJson.convert(sifText);\n  };\n\n  fileUtilities.createJsonFromSBGN = function () {\n    var sbgnmlText = jsonToSbgnml.createSbgnml();\n    return sbgnmlToJson.convert(textToXmlObject(sbgnmlText));\n  };\n\n  fileUtilities.createJsonFromSif = function () {\n    var sifText = jsonToSif.convert();\n    return sifToJson.convert(sifText);\n  };\n\n  fileUtilities.convertSbgnmlToCD = function (sbgnml, callback) {\n    return sbgnmlToCd.convert(sbgnml, callback);\n  };\n\n  fileUtilities.convertSbgnmlToSbml = function (sbgnml, callback) {\n    return sbgnmlToSbml.convert(sbgnml, callback);\n  };\n\n  fileUtilities.convertSbmlToSbgnml = function (sbml, callback) {\n    return sbmlToSbgnml.convert(sbml, callback);\n  };\n\n  fileUtilities.convertCDToSbgnml = function (xml, callback) {\n    return cdToSbgnml.convert(xml, callback);\n  };\n\n  return fileUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/file-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/graph-utilities-factory.js":
/*!**************************************************!*\
  !*** ./src/utilities/graph-utilities-factory.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Common utilities for sbgnviz graphs\n */\nvar classes = __webpack_require__(/*! ./classes */ \"./src/utilities/classes.js\");\n\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\n\nvar libs = libUtilities.getLibs();\nvar jQuery = $ = libs.jQuery;\n\nmodule.exports = function () {\n  var optionUtilities;\n  var options, cy;\n\n  function graphUtilities(param) {\n    optionUtilities = param.optionUtilities;\n    options = optionUtilities.getOptions();\n    cy = param.sbgnCyInstance.getCy();\n  } // TODO make these initial values user options instead of hardcoding them here\n\n\n  graphUtilities.portsEnabled = true;\n  graphUtilities.compoundSizesConsidered = true;\n\n  graphUtilities.disablePorts = function () {\n    graphUtilities.portsEnabled = false;\n    cy.style().update();\n  };\n\n  graphUtilities.enablePorts = function () {\n    graphUtilities.portsEnabled = true;\n    cy.style().update();\n  };\n\n  graphUtilities.arePortsEnabled = function () {\n    return graphUtilities.portsEnabled;\n  };\n\n  graphUtilities.considerCompoundSizes = function () {\n    graphUtilities.compoundSizesConsidered = true;\n    cy.style().update();\n  };\n\n  graphUtilities.omitCompoundSizes = function () {\n    graphUtilities.compoundSizesConsidered = false;\n    cy.style().update();\n  };\n\n  graphUtilities.areCompoundSizesConsidered = function () {\n    return graphUtilities.compoundSizesConsidered == true;\n  };\n\n  graphUtilities.updateGraph = function (cyGraph, callback, layoutOptions, tileInfoBoxes) {\n    var isLayoutRequired;\n\n    if (layoutOptions === undefined) {\n      isLayoutRequired = false;\n    } else {\n      isLayoutRequired = true;\n    }\n\n    $(document).trigger(\"updateGraphStart\", cy); // Reset undo/redo stack and buttons when a new graph is loaded\n\n    if (options.undoable) {\n      cy.undoRedo().reset(); //    this.resetUndoRedoButtons();\n    }\n\n    cy.startBatch(); // clear data\n\n    cy.remove('*');\n    cy.add(cyGraph); //add position information to data for preset layout\n\n    var positionMap = {};\n    cy.nodes().forEach(function (node) {\n      var xPos = node.data('bbox').x;\n      var yPos = node.data('bbox').y;\n      positionMap[node.data('id')] = {\n        'x': xPos,\n        'y': yPos\n      }; // assign correct parents to info boxes\n\n      var statesandinfos = node.data('statesandinfos');\n\n      for (var j = 0; j < statesandinfos.length; j++) {\n        classes.getAuxUnitClass(statesandinfos[j]).setParentRef(statesandinfos[j], node);\n      }\n    }); //this.refreshPaddings(); // Recalculates/refreshes the compound paddings\n\n    cy.endBatch();\n\n    if (isLayoutRequired) {\n      var preferences = {};\n\n      if (cy.nodes().length > 3000 || cy.edges().length > 3000) {\n        preferences.quality = \"draft\";\n      }\n\n      preferences.animate = false;\n      preferences.randomize = true;\n      preferences = $.extend({}, layoutOptions, preferences);\n      var layout = cy.layout(preferences);\n    } else {\n      var layout = cy.layout({\n        name: 'preset',\n        positions: positionMap,\n        fit: true,\n        padding: 20\n      });\n    } // Check this for cytoscape.js backward compatibility\n\n\n    if (layout && layout.run) {\n      layout.run();\n    }\n\n    var performLayout = function performLayout() {\n      cy.fit(cy.elements(\":visible\"), 20);\n    }; // Update the style\n\n\n    cy.style().update(); // Initilize the anchor points once the elements are created\n\n    if (cy.edgeEditing && cy.edgeEditing('initialized')) {\n      cy.edgeEditing('get').initAnchorPoints(cy.edges());\n    }\n\n    $(document).trigger(\"updateGraphEnd\", [cy, isLayoutRequired || tileInfoBoxes, performLayout]);\n    if (callback) callback();\n  };\n\n  graphUtilities.calculatePaddings = function (paddingPercent) {\n    //As default use the compound padding value\n    if (!paddingPercent) {\n      var compoundPadding = options.compoundPadding;\n      paddingPercent = typeof compoundPadding === 'function' ? compoundPadding.call() : compoundPadding;\n    }\n\n    var nodes = cy.nodes();\n    var total = 0;\n    var numOfSimples = 0;\n\n    for (var i = 0; i < nodes.length; i++) {\n      var theNode = nodes[i];\n\n      if (theNode.children() == null || theNode.children().length == 0) {\n        total += Number(theNode.width());\n        total += Number(theNode.height());\n        numOfSimples++;\n      }\n    }\n\n    var calc_padding = paddingPercent / 100 * Math.floor(total / (2 * numOfSimples));\n\n    if (calc_padding < 5) {\n      calc_padding = 5;\n    }\n\n    return calc_padding;\n  };\n\n  graphUtilities.recalculatePaddings = graphUtilities.refreshPaddings = function () {\n    // this.calculatedPaddings is not working here\n    // TODO: replace this reference with this.calculatedPaddings once the reason is figured out\n    //graphUtilities.calculatedPaddings = this.calculatePaddings();\n    var compoundPadding = options.compoundPadding;\n    return typeof compoundPadding === 'function' ? compoundPadding.call() : compoundPadding; //return graphUtilities.calculatedPaddings;\n  };\n\n  graphUtilities.getCompoundPaddings = function () {\n    // Return calculated paddings in case of that data is invalid return 5\n    var compoundPadding = options.compoundPadding;\n    return typeof compoundPadding === 'function' ? compoundPadding.call() : compoundPadding; //return graphUtilities.calculatedPaddings || 5;\n  };\n\n  return graphUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/graph-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/json-to-nwt-converter-factory.js":
/*!********************************************************!*\
  !*** ./src/utilities/json-to-nwt-converter-factory.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var console = __webpack_require__(/*! console-browserify */ \"console-browserify\");\nmodule.exports = function () {\n  var jsonToSbgnml, elementUtilities, cy;\n\n  function jsonToNwt(param) {\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    elementUtilities = param.elementUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n\n  function setToStr(set) {\n    if (set) {\n      return Object.keys(set).join(';');\n    }\n\n    return null;\n  }\n\n  var sifEdgePropHandlerMap = {\n    'pcIDs': function pcIDs(edge) {\n      return setToStr(edge.data('pcIDSet'));\n    },\n    'siteLocations': function siteLocations(edge) {\n      return setToStr(edge.data('siteLocSet'));\n    }\n  };\n  var sifNodePropHandlerMap = {\n    'tooltip': function tooltip(node) {\n      return node.data('tooltip');\n    },\n    'infoboxes': function infoboxes(node, obj) {\n      var sifInfoboxPropHandlerMap = {\n        'tooltip': function tooltip(infobox) {\n          return infobox.tooltip;\n        }\n      };\n      var infoboxes = node.data('statesandinfos');\n      var glyphs = obj.glyph;\n      infoboxes.forEach(function (infobox, i) {\n        Object.keys(sifInfoboxPropHandlerMap).forEach(function (propName) {\n          var val = sifInfoboxPropHandlerMap[propName](infobox);\n\n          if (val) {\n            glyphs[i][propName] = val;\n          }\n        });\n      });\n    }\n  }; // objects consist of arcs or gylphs\n\n  function extendObjectsData(objs, filterFcn, propHandlerMap) {\n    if (!objs) {\n      return;\n    }\n\n    objs.forEach(function (obj) {\n      if (filterFcn(obj.$[\"class\"])) {\n        var ele = cy.getElementById(obj.$.id);\n        Object.keys(propHandlerMap).forEach(function (propName) {\n          // does not have to return a value, maybe a void function as well\n          var val = propHandlerMap[propName](ele, obj);\n\n          if (val) {\n            obj[propName] = val;\n          }\n        });\n      }\n    });\n  }\n\n  function extendStylesData(toExtend, extendFrom) {\n    if (!toExtend || !extendFrom) {\n      return;\n    }\n\n    var styleNames = ['shapeName'];\n    var styleMap = {};\n    Object.keys(extendFrom).forEach(function (key) {\n      styleNames.forEach(function (name) {\n        var el = extendFrom[key];\n        var props = el && el.properties;\n\n        if (props && props[name]) {\n          var val = props[name];\n          var idList = el.idList;\n          idList.forEach(function (id) {\n            styleMap[id] = styleMap[id] || {};\n            styleMap[id][name] = val;\n          });\n        }\n      });\n    });\n    toExtend.forEach(function (style) {\n      var idList = style.$.idList.split(' ');\n      styleNames.forEach(function (name) {\n        var val = null;\n        idList.forEach(function (id) {\n          var currVal = styleMap[id] && styleMap[id][name];\n\n          if (currVal === undefined) {\n            return;\n          }\n\n          if (val == null) {\n            val = currVal;\n          } else if (val !== currVal) {\n            console.warn('Shape name of some glyphs defined multiple times in render information!');\n          }\n        });\n\n        if (val !== null) {\n          style.g.$[name] = val;\n        }\n      });\n    });\n  }\n\n  jsonToNwt.buildJsObj = function (filename, version, renderInfo, mapProperties, nodes, edges) {\n    var jsObj = jsonToSbgnml.buildJsObj(filename, version, renderInfo, mapProperties, nodes, edges);\n\n    if (elementUtilities.mapType !== 'PD' && elementUtilities.mapType !== 'AF' && elementUtilities.mapType !== 'HybridSbgn') {\n      var map = jsObj.map[0];\n      var arcs = map.arc;\n      var glyphs = map.glyph;\n      extendObjectsData(arcs, elementUtilities.isSIFEdge, sifEdgePropHandlerMap);\n      extendObjectsData(glyphs, elementUtilities.isSIFNode, sifNodePropHandlerMap);\n      var jsObjStyles = (map && map.extension && map.extension.renderInformation && map.extension.renderInformation.listOfStyles).style;\n      var appStyles = renderInfo && renderInfo.styles;\n      extendStylesData(jsObjStyles, appStyles);\n    }\n\n    return jsObj;\n  };\n\n  jsonToNwt.createNwt = function (filename, version, renderInfo, mapProperties, nodes, edges) {\n    var jsObj = jsonToNwt.buildJsObj(filename, version, renderInfo, mapProperties, nodes, edges);\n    return jsonToSbgnml.buildString({\n      sbgn: jsObj\n    });\n  };\n\n  return jsonToNwt;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/json-to-nwt-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/json-to-sbgnml-converter-factory.js":
/*!***********************************************************!*\
  !*** ./src/utilities/json-to-sbgnml-converter-factory.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var console = __webpack_require__(/*! console-browserify */ \"console-browserify\");\nvar libsbgnjs = __webpack_require__(/*! libsbgn.js */ \"libsbgn.js\");\n\nvar renderExtension = libsbgnjs.render;\nvar annot = libsbgnjs.annot;\n\nvar pkgVersion = __webpack_require__(/*! ../../package.json */ \"./package.json\").version; // need info about sbgnviz to put in xml\n\n\nvar pkgName = __webpack_require__(/*! ../../package.json */ \"./package.json\").name;\n\nvar prettyprint = __webpack_require__(/*! pretty-data */ \"pretty-data\").pd;\n\nvar xml2js = __webpack_require__(/*! xml2js */ \"xml2js\");\n\nvar mapPropertiesBuilder = new xml2js.Builder({\n  rootName: \"mapProperties\"\n});\nvar compoundExtensionBuilder = new xml2js.Builder({\n  rootName: \"extraInfo\"\n});\n\nvar textUtilities = __webpack_require__(/*! ./text-utilities */ \"./src/utilities/text-utilities.js\");\n\nmodule.exports = function () {\n  var elementUtilities, graphUtilities, experimentalDataOverlay;\n  var cy;\n  /*\n      takes renderInfo as an optional argument. It contains all the information needed to save\n      the style and colors to the render extension. See newt/app-utilities getAllStyles()\n      Structure: {\n          background: the map background color,\n          colors: {\n            validXmlValue: color_id\n            ...\n          },\n          styles: {\n              styleKey1: {\n                  idList: list of the nodes ids that have this style\n                  properties: {\n                      fontSize: ...\n                      fill: ...\n                      ...\n                  }\n              }\n              styleKey2: ...\n              ...\n          }\n      }\n  */\n\n  function jsonToSbgnml(param) {\n    elementUtilities = param.elementUtilities;\n    graphUtilities = param.graphUtilities;\n    experimentalDataOverlay = param.experimentalDataOverlay;\n    cy = param.sbgnCyInstance.getCy();\n  }\n  /*\n   version is either 0.2 or 0.3 or plain, 0.3 used as default if none provided.\n   Only difference right now is that <map> element doesn't have an id attribute in 0.2, and has on in 0.3.\n   Serious changes occur between the format version for submaps content. Those changes are not implemented yet.\n   TODO implement 0.3 changes when submap support is fully there.\n   */\n\n\n  jsonToSbgnml.buildJsObj = function (filename, version, renderInfo, mapProperties, nodes, edges) {\n    var self = this;\n    var mapID = textUtilities.getXMLValidId(filename);\n    var hasExtension = false;\n    var hasRenderExtension = false;\n    var mapType = mapProperties && mapProperties.mapType || elementUtilities.mapType;\n    this.nodes = nodes || cy.nodes();\n    this.edges = edges || cy.edges();\n    var collapsedChildren = elementUtilities.getAllCollapsedChildrenRecursively(this.nodes);\n    this.allCollapsedNodes = collapsedChildren.filter(\"node\");\n    this.allCollapsedEdges = collapsedChildren.filter(\"edge\");\n\n    if (typeof renderInfo !== 'undefined') {\n      hasExtension = true;\n      hasRenderExtension = true;\n    }\n\n    if (typeof version === 'undefined') {\n      // default if not specified\n      version = \"0.3\";\n    } // check version validity\n\n\n    if (version !== \"0.2\" && version !== \"0.3\" && version !== \"plain\" && version !== \"plain3\") {\n      console.error(\"Invalid SBGN-ML version provided. Expected 0.2, 0.3, plain or plain3, got: \" + version);\n      return \"Error\";\n    }\n\n    var mapLanguage = elementUtilities.mapTypeToLanguage(mapType); //add headers\n\n    xmlHeader = \"<?xml version='1.0' encoding='UTF-8' standalone='yes'?>\\n\";\n    var versionNo;\n\n    if (version === \"plain\") {\n      versionNo = \"0.2\";\n    } else if (version === \"plain3\") {\n      versionNo = \"0.3\";\n    } else {\n      versionNo = version;\n    } //var versionNo = (version === \"plain\") ? \"0.2\" : version;\n\n\n    var sbgn = new libsbgnjs.Sbgn({\n      xmlns: 'http://sbgn.org/libsbgn/' + versionNo\n    });\n    var map;\n\n    if (version === \"0.3\" || version === \"plain3\") {\n      var map = new libsbgnjs.Map({\n        language: mapLanguage,\n        id: mapID\n      });\n    } else if (version === \"0.2\" || version === \"plain\") {\n      var map = new libsbgnjs.Map({\n        language: mapLanguage\n      });\n    }\n\n    if (hasExtension) {\n      // extension is there\n      var extension = new libsbgnjs.Extension();\n\n      if (hasRenderExtension) {\n        extension.add(self.getRenderExtensionSbgnml(renderInfo));\n      }\n\n      map.setExtension(extension);\n\n      if (mapProperties) {\n        delete mapProperties.experimentDescription;\n        var xml = mapPropertiesBuilder.buildObject(mapProperties);\n        map.extension.add(xml);\n      }\n    } else if (mapProperties) {\n      map.setExtension(new libsbgnjs.Extension());\n      map.extension.add(mapPropertiesBuilder.buildObject(mapProperties));\n    } // get all glyphs\n\n\n    var glyphList = []; // be careful that :visible is also used during recursive search of nodes\n    // in the getGlyphSbgnml function. If not set accordingly, discrepancies will occur.\n\n    var self = this;\n    this.nodes.each(function (ele, i) {\n      if (typeof ele === \"number\") {\n        ele = i;\n      }\n\n      if (jsonToSbgnml.childOfNone(ele, self.nodes)) glyphList = glyphList.concat(self.getGlyphSbgnml(ele, version)); // returns potentially more than 1 glyph\n    }); // add them to the map\n\n    for (var i = 0; i < glyphList.length; i++) {\n      if (version === \"plain\") glyphList[i].extension = null;\n      map.addGlyph(glyphList[i]);\n    } // get all arcs\n\n\n    var edges = this.allCollapsedEdges.union(this.edges);\n    edges.each(function (ele, i) {\n      if (typeof ele === \"number\") {\n        ele = i;\n      }\n\n      var arc = self.getArcSbgnml(ele, version);\n      if (version === \"plain\") arc.extension = null;\n      map.addArc(arc);\n    });\n    sbgn.addMap(map);\n    return sbgn.buildJsObj();\n  };\n\n  jsonToSbgnml.createSbgnml = function (filename, version, renderInfo, mapProperties, nodes, edges) {\n    var jsObj = jsonToSbgnml.buildJsObj(filename, version, renderInfo, mapProperties, nodes, edges);\n    return jsonToSbgnml.buildString({\n      sbgn: jsObj\n    });\n  }; // Copies and extends buildString() of https://github.com/sbgn/libsbgn.js/blob/master/src/utilities.js\n\n\n  jsonToSbgnml.buildString = function (obj) {\n    var xmlString = new xml2js.Builder({\n      headless: true,\n      renderOpts: {\n        pretty: false\n      }\n    }).buildObject(obj); // change naming convention from Camel Case (variableName) to Kebab case (variable-name)\n\n    var matchResult = xmlString.match(\"<renderInformation[^]*</renderInformation>\");\n\n    if (matchResult != null) {\n      var imagesElementMatch = xmlString.match(\"<listOfBackgroundImages[^]*</listOfBackgroundImages>\");\n      var imagesElement;\n\n      if (imagesElementMatch != null) {\n        imagesElement = imagesElementMatch[0];\n      }\n\n      var renderInfoString = matchResult[0];\n      var renderInfoStringCopy = (' ' + renderInfoString).slice(1);\n      var regex = /\\s([\\S]+)([\\s]*)=/g;\n      var result;\n      var matches = [];\n\n      while (result = regex.exec(renderInfoString)) {\n        matches.push(result[0]);\n      }\n\n      ;\n      matches.forEach(function (match) {\n        if (match != \" idList=\") renderInfoString = renderInfoString.replace(match, textUtilities.FromCamelToKebabCase(match));\n      });\n      xmlString = xmlString.replace(renderInfoStringCopy, renderInfoString);\n      var imagesElementMatchDirty = xmlString.match(\"<listOfBackgroundImages[^]*</listOfBackgroundImages>\");\n\n      if (imagesElementMatchDirty != null) {\n        xmlString = xmlString.replace(imagesElementMatchDirty[0], imagesElement);\n      }\n    }\n    /* \tdirty hack needed to solve the newline char encoding problem\n    \txml2js doesn't encode \\n as &#xA; we need to do it manually\n    */\n\n\n    var re = /<label text=\"((.|\\n+)+?)\"/gm;\n    var xmlString_correctLabel = xmlString.replace(re, function (match, p1, p2) {\n      return '<label text=\"' + p1.replace(/\\n/g, \"&#xA;\") + '\"';\n    });\n    var xmlHeader = \"<?xml version='1.0' encoding='UTF-8' standalone='yes'?>\\n\";\n    /*\n      prettyprint puts a line break inside the root <sbgn> tag before the xmlns attribute.\n      This is perfecly valid, but Vanted doesn't like it and cannot load those files as is.\n      This line break is removed here to make Newt output directly compatible with Vanted. This issue will be reported\n      to the Vanted guys and hopefully fixed at some point. After that the following workaround can be removed.\n    */\n\n    var xmlbody = prettyprint.xml(xmlString_correctLabel).replace(\"<sbgn \\n  xmlns=\\\"http://sbgn.org/libsbgn\", \"<sbgn xmlns=\\\"http://sbgn.org/libsbgn\");\n    return xmlHeader + xmlbody;\n  }; // see createSbgnml for info on the structure of renderInfo\n\n\n  jsonToSbgnml.getRenderExtensionSbgnml = function (renderInfo) {\n    // initialize the main container\n    var renderInformation = new renderExtension.RenderInformation({\n      id: 'renderInformation',\n      backgroundColor: renderInfo.background,\n      programName: pkgName,\n      programVersion: pkgVersion\n    }); // populate list of colors\n\n    var listOfColorDefinitions = new renderExtension.ListOfColorDefinitions();\n\n    for (var color in renderInfo.colors) {\n      var colorDefinition = new renderExtension.ColorDefinition({\n        id: renderInfo.colors[color],\n        value: color\n      });\n      listOfColorDefinitions.addColorDefinition(colorDefinition);\n    }\n\n    renderInformation.setListOfColorDefinitions(listOfColorDefinitions); // populate list of background images\n\n    var listOfBackgroundImages = new renderExtension.ListOfBackgroundImages();\n\n    if (!(Object.keys(experimentalDataOverlay.getParsedDataMap()).length > 0)) {\n      for (var img in renderInfo.images) {\n        var backgroundImage = new renderExtension.BackgroundImage({\n          id: renderInfo.images[img],\n          value: img\n        });\n        listOfBackgroundImages.addBackgroundImage(backgroundImage);\n      }\n    }\n\n    renderInformation.setListOfBackgroundImages(listOfBackgroundImages); // populates styles\n\n    var listOfStyles = new renderExtension.ListOfStyles();\n\n    for (var key in renderInfo.styles) {\n      var style = renderInfo.styles[key];\n      var xmlStyle = new renderExtension.Style({\n        id: textUtilities.getXMLValidId(key),\n        idList: style.idList.join(' ')\n      });\n      var g = new renderExtension.RenderGroup({\n        fontSize: style.properties.fontSize,\n        fontFamily: style.properties.fontFamily,\n        fontWeight: style.properties.fontWeight,\n        fontStyle: style.properties.fontStyle,\n        fontColor: style.properties.fontColor,\n        fill: style.properties.fill,\n        // fill color\n        stroke: style.properties.stroke,\n        // stroke color\n        strokeWidth: style.properties.strokeWidth,\n        backgroundImage: style.properties.backgroundImage,\n        backgroundFit: style.properties.backgroundFit,\n        backgroundPosX: style.properties.backgroundPosX,\n        backgroundPosY: style.properties.backgroundPosY,\n        backgroundWidth: style.properties.backgroundWidth,\n        backgroundHeight: style.properties.backgroundHeight,\n        backgroundImageOpacity: style.properties.backgroundImageOpacity,\n        backgroundOpacity: style.properties.backgroundOpacity\n      });\n      xmlStyle.setRenderGroup(g);\n      listOfStyles.addStyle(xmlStyle);\n    }\n\n    renderInformation.setListOfStyles(listOfStyles);\n    return renderInformation;\n  };\n\n  jsonToSbgnml.getAnnotationExtension = function (cyElement) {\n    var annotations = cyElement.data('annotations');\n    var annotExt = new annot.Annotation();\n    var rdfElement = new annot.RdfElement();\n\n    for (var annotID in annotations) {\n      var currentAnnot = annotations[annotID]; // check validity of annotation\n\n      if (currentAnnot.status != 'validated' || !currentAnnot.selectedDB || !currentAnnot.annotationValue) {\n        continue;\n      } // check if uncontrolled vocabulary\n\n\n      if (currentAnnot.selectedRelation == \"sio:SIO_000223\") {\n        var obj = {};\n        obj[currentAnnot.selectedDB] = currentAnnot.annotationValue;\n        rdfElement.addCustomProperty('#' + cyElement.data('id'), obj);\n      } else {\n        var obj = {};\n        obj[currentAnnot.selectedRelation] = currentAnnot.annotationValue;\n        rdfElement.addResource('#' + cyElement.data('id'), obj);\n      }\n    }\n\n    annotExt.setRdfElement(rdfElement);\n    return annotExt;\n  };\n\n  jsonToSbgnml.getGlyphSbgnml = function (node, version) {\n    var self = this;\n    var nodeClass = node._private.data[\"class\"];\n    var glyphList = [];\n\n    if (nodeClass.startsWith('BA')) {\n      nodeClass = \"biological activity\";\n    } // Workaround: In application we use 'empty set' class but SBGN-ML files \n    // use 'source and sink' so we read and write as 'source and sink'\n\n\n    if (nodeClass === \"empty set\") {\n      nodeClass = \"source and sink\";\n    }\n\n    var glyph = new libsbgnjs.Glyph({\n      id: node._private.data.id,\n      class_: nodeClass\n    }); // assign compartmentRef\n\n    if (node.parent() && node.parent().length > 0) {\n      if (nodeClass === \"compartment\") {\n        var parent = node.parent();\n        glyph.compartmentRef = node._private.data.parent;\n      } else {\n        var parent = node.parent()[0];\n        if (parent._private.data[\"class\"] == \"compartment\") glyph.compartmentRef = parent._private.data.id;\n      }\n    } // misc information\n\n\n    var label = node._private.data.label;\n    if (typeof label != 'undefined') glyph.setLabel(new libsbgnjs.Label({\n      text: label\n    })); //add clone information\n\n    if (typeof node._private.data.clonemarker != 'undefined') glyph.setClone(new libsbgnjs.CloneType()); //add bbox information\n\n    glyph.setBbox(this.addGlyphBbox(node));\n\n    if (node.isParent() || node.data()[\"class\"] == 'topology group' || node.data()[\"class\"] == 'submap' || node.data()[\"class\"] == 'complex' || node.data()[\"class\"] == 'compartment') {\n      var extraInfo = {};\n      extraInfo.w = node.width();\n      extraInfo.h = node.height();\n      extraInfo.minW = Number(node.css(\"min-width\").replace(\"px\", \"\"));\n      extraInfo.minH = Number(node.css(\"min-height\").replace(\"px\", \"\"));\n      extraInfo.WLBias = Number(node.css(\"min-width-bias-left\").replace(\"px\", \"\"));\n      extraInfo.WRBias = Number(node.css(\"min-width-bias-right\").replace(\"px\", \"\"));\n      extraInfo.HTBias = Number(node.css(\"min-height-bias-top\").replace(\"px\", \"\"));\n      extraInfo.HBBias = Number(node.css(\"min-height-bias-bottom\").replace(\"px\", \"\"));\n      glyph.setExtension(new libsbgnjs.Extension());\n      glyph.extension.add(compoundExtensionBuilder.buildObject(extraInfo));\n    } //add port information\n\n\n    var ports = node._private.data.ports;\n\n    for (var i = 0; i < ports.length; i++) {\n      var orientation = ports[i].x === 0 ? 'vertical' : 'horizontal'; // This is the ratio of the area occupied for ports over the whole shape\n\n      var ratio = orientation === 'vertical' ? Math.abs(ports[i].y) / 50 : Math.abs(ports[i].x) / 50; // Divide the node sizes by the ratio because that sizes includes ports as well\n\n      var x = node._private.position.x + ports[i].x * (node.width() / ratio) / 100;\n      var y = node._private.position.y + ports[i].y * (node.height() / ratio) / 100;\n      glyph.addPort(new libsbgnjs.Port({\n        id: ports[i].id,\n        x: x,\n        y: y\n      }));\n    } //add state and info box information\n\n\n    for (var i = 0; i < node._private.data.statesandinfos.length; i++) {\n      var boxGlyph = node._private.data.statesandinfos[i];\n      var statesandinfosId = boxGlyph.id;\n\n      if (boxGlyph.clazz === \"state variable\") {\n        glyph.addGlyphMember(this.addStateBoxGlyph(boxGlyph, statesandinfosId, node));\n      } else if (boxGlyph.clazz === \"unit of information\") {\n        glyph.addGlyphMember(this.addInfoBoxGlyph(boxGlyph, statesandinfosId, node));\n      }\n    } // check for annotations\n\n\n    if (version !== \"plain\" && node.data('annotations') && !$.isEmptyObject(node.data('annotations'))) {\n      var extension = self.getOrCreateExtension(glyph);\n      var annotExt = self.getAnnotationExtension(node);\n      extension.add(annotExt);\n    } // add glyph members that are not state variables or unit of info: subunits\n\n\n    if (nodeClass === \"complex\" || nodeClass === \"complex multimer\" || nodeClass === \"submap\" || nodeClass === \"topology group\") {\n      var children = node.children();\n      children = children.union(this.allCollapsedNodes);\n\n      if (node.data('collapsedChildren')) {\n        var collapsedChildren = node.data('collapsedChildren');\n        children = children.union(collapsedChildren);\n      }\n\n      children = children.filter(\"[parent = '\" + node.id() + \"']\");\n      children.each(function (ele, i) {\n        if (typeof ele === \"number\") {\n          ele = i;\n        }\n\n        var glyphMemberList = self.getGlyphSbgnml(ele, version);\n\n        for (var i = 0; i < glyphMemberList.length; i++) {\n          glyph.addGlyphMember(glyphMemberList[i]);\n        }\n      });\n    }\n\n    var sbgnvizExtString = \"\";\n    var hasNewtExt = false; // add info for collapsed nodes\n\n    if (node.data('collapsedChildren')) {\n      sbgnvizExtString += \"<collapsed/>\";\n      sbgnvizExtString += \"<positionBeforeSaving x='\" + node.position().x + \"' y='\" + node.position().y + \"'/>\";\n      hasNewtExt = true;\n    } // add info for hidden nodes\n\n\n    if (node.hidden()) {\n      sbgnvizExtString += \"<hidden/>\";\n      hasNewtExt = true;\n    } // add info for nodes which has hidden neighbour\n\n\n    if (node.data(\"thickBorder\")) {\n      sbgnvizExtString += \"<hasHiddenNeighbour/>\";\n      hasNewtExt = true;\n    } // add string to a new extension for this glyph\n\n\n    if (hasNewtExt) {\n      var extension = self.getOrCreateExtension(glyph);\n      extension.add(\"<sbgnviz>\" + sbgnvizExtString + \"</sbgnviz>\");\n    } // current glyph is done\n\n\n    glyphList.push(glyph); // keep going with all the included glyphs\n\n    if (nodeClass === \"compartment\") {\n      var children = node.children();\n      children = children.union(this.allCollapsedNodes);\n      children = children.filter(\"[parent = '\" + node.id() + \"']\");\n      children.each(function (ele, i) {\n        if (typeof ele === \"number\") {\n          ele = i;\n        }\n\n        glyphList = glyphList.concat(self.getGlyphSbgnml(ele, version));\n      });\n    }\n\n    return glyphList;\n  }; // element: a libsbgn.js glyph or edge object\n\n\n  jsonToSbgnml.getOrCreateExtension = function (element) {\n    var extension;\n\n    if (element.extension) {\n      // an extension is already there for this element\n      extension = element.extension;\n    } else {\n      extension = new libsbgnjs.Extension();\n      element.setExtension(extension);\n    }\n\n    return extension;\n  };\n\n  jsonToSbgnml.getArcSbgnml = function (edge, version) {\n    var self = this; //Temporary hack to resolve \"undefined\" arc source and targets\n\n    var arcTarget = edge._private.data.porttarget;\n    var arcSource = edge._private.data.portsource;\n    if (arcSource == null || arcSource.length === 0) arcSource = edge._private.data.source;\n    if (arcTarget == null || arcTarget.length === 0) arcTarget = edge._private.data.target;\n    var arcId = edge._private.data.id;\n    var arc = new libsbgnjs.Arc({\n      id: arcId,\n      source: arcSource,\n      target: arcTarget,\n      class_: edge._private.data[\"class\"]\n    });\n    arc.setStart(new libsbgnjs.StartType({\n      x: edge._private.rscratch.startX,\n      y: edge._private.rscratch.startY\n    })); // Export anchor points if edgeEditingExtension is registered\n\n    if (cy.edgeEditing && cy.edgeEditing('initialized')) {\n      var segpts = cy.edgeEditing('get').getAnchorsAsArray(edge);\n\n      if (typeof segpts !== 'undefined') {\n        if (segpts.length > 0) {\n          for (var i = 0; segpts && i < segpts.length; i = i + 2) {\n            var anchorX = segpts[i];\n            var anchorY = segpts[i + 1];\n            arc.addNext(new libsbgnjs.NextType({\n              x: anchorX,\n              y: anchorY\n            }));\n          }\n        }\n      }\n    }\n\n    arc.setEnd(new libsbgnjs.EndType({\n      x: edge._private.rscratch.endX,\n      y: edge._private.rscratch.endY\n    }));\n    var cardinality = edge._private.data.cardinality;\n\n    if (typeof cardinality != 'undefined' && cardinality != null && cardinality != 0) {\n      var edgebBox = edge.boundingBox({\n        includeLabels: true,\n        includeNodes: false,\n        includeEdges: false,\n        includeOverlays: false\n      });\n      arc.addGlyph(new libsbgnjs.Glyph({\n        id: arc.id + '_card',\n        class_: 'stoichiometry',\n        label: new libsbgnjs.Label({\n          text: cardinality\n        }),\n        bbox: new libsbgnjs.Bbox({\n          x: edgebBox.x1,\n          y: edgebBox.y1,\n          w: edgebBox.w,\n          h: edgebBox.h\n        }) // dummy bbox, needed for format compliance\n\n      }));\n    } // check for annotations\n\n\n    if (edge.data('annotations') && !$.isEmptyObject(edge.data('annotations'))) {\n      var extension = self.getOrCreateExtension(arc);\n      var annotExt = this.getAnnotationExtension(edge);\n      extension.add(annotExt);\n    } // add info for hidden edges\n\n\n    if (edge.hidden()) {\n      var extension = self.getOrCreateExtension(arc);\n      extension.add(\"<sbgnviz><hidden/></sbgnviz>\");\n    } // add info about edge type\n    // since curve style is not standard we shouldn't have it for either version\n\n\n    if (edge.css('curve-style') && version !== \"plain\" && version !== \"plain3\") {\n      var extension = self.getOrCreateExtension(arc);\n      extension.add(\"<curveStyle>\" + edge.css('curve-style') + \"</curveStyle>\");\n    }\n\n    if (edge.data('sif-meta') && version !== \"plain\" && version !== \"plain3\") {\n      var extension = self.getOrCreateExtension(arc);\n      extension.add(\"<sifMetaEdge>true</sifMetaEdge>\");\n    }\n\n    return arc;\n  };\n\n  jsonToSbgnml.addGlyphBbox = function (node) {\n    var padding = node.padding();\n    var borderWidth = Number(node.css(\"border-width\").replace(\"px\", \"\"));\n\n    var _class = node.data('class');\n\n    var width = node.outerWidth() - borderWidth;\n    var height = node.outerHeight() - borderWidth; // If the node can have ports and it has exactly 2 ports then it is represented by a bigger bbox.\n    // This is because we represent it as a polygon and so the whole shape including the ports are rendered in the node bbox.\n\n    if (elementUtilities.canHavePorts(_class)) {\n      if (node.data('ports').length === 2) {\n        // We assume that the ports are symmetric to the node center so using just one of the ports is enough\n        var port = node.data('ports')[0];\n        var orientation = port.x === 0 ? 'vertical' : 'horizontal'; // This is the ratio of the area occupied with ports over without ports\n\n        var ratio = orientation === 'vertical' ? Math.abs(port.y) / 50 : Math.abs(port.x) / 50; // Divide the bbox to the calculated ratio to get the bbox of the actual shape discluding the ports\n\n        width /= ratio;\n        height /= ratio;\n      }\n    }\n\n    var x = node.position().x - width / 2;\n    var y = node.position().y - height / 2; //var x =node._private.position.x - width/2 - padding;    \n    //var y = node._private.position.y - height/2 - padding;\n    //var x = node._private.position.x - width/2;\n    //var y = node._private.position.y - height/2;\n\n    return new libsbgnjs.Bbox({\n      x: x,\n      y: y,\n      w: width,\n      h: height\n    });\n  };\n\n  jsonToSbgnml.addStateAndInfoBbox = function (node, boxGlyph) {\n    boxBbox = boxGlyph.bbox;\n    var borderWidth = node.data()['border-width'];\n    var padding = node.padding();\n    var x = boxBbox.x * (node.outerWidth() - borderWidth) / 100 + (node._private.position.x - node.width() / 2 - padding - boxBbox.w / 2);\n    var y = boxBbox.y * (node.outerHeight() - borderWidth) / 100 + (node._private.position.y - node.height() / 2 - padding - boxBbox.h / 2); //var x = boxBbox.x / 100 * node.width();\n    //var y = boxBbox.y / 100 * node.height();\n    //x = node._private.position.x - node.width()/2 + (x - boxBbox.w/2);\n    //y = node._private.position.y - node.height()/2 + (y - boxBbox.h/2);\n\n    return new libsbgnjs.Bbox({\n      x: x,\n      y: y,\n      w: boxBbox.w,\n      h: boxBbox.h\n    });\n  };\n\n  jsonToSbgnml.addStateBoxGlyph = function (node, id, mainGlyph) {\n    var glyph = new libsbgnjs.Glyph({\n      id: id,\n      class_: 'state variable'\n    });\n    var state = new libsbgnjs.StateType();\n    if (typeof node.state.value != 'undefined') state.value = node.state.value;\n    if (typeof node.state.variable != 'undefined') state.variable = node.state.variable;\n    glyph.setState(state);\n    glyph.setBbox(this.addStateAndInfoBbox(mainGlyph, node));\n    return glyph;\n  };\n\n  jsonToSbgnml.addInfoBoxGlyph = function (node, id, mainGlyph) {\n    var glyph = new libsbgnjs.Glyph({\n      id: id,\n      class_: 'unit of information'\n    });\n    var label = new libsbgnjs.Label();\n    if (typeof node.label.text != 'undefined') label.text = node.label.text;\n    glyph.setLabel(label);\n    glyph.setBbox(this.addStateAndInfoBbox(mainGlyph, node)); // assign correct entity tag for AF case\n\n    var entityName = null;\n\n    switch (mainGlyph._private.data[\"class\"]) {\n      case 'BA unspecified entity':\n        entityName = \"unspecified entity\";\n        break;\n\n      case 'BA simple chemical':\n        entityName = \"simple chemical\";\n        break;\n\n      case 'BA macromolecule':\n        entityName = \"macromolecule\";\n        break;\n\n      case 'BA nucleic acid feature':\n        entityName = \"nucleic acid feature\";\n        break;\n\n      case 'BA perturbing agent':\n        entityName = \"perturbation\";\n        break;\n\n      case 'BA complex':\n        entityName = \"complex\";\n        break;\n    } // entity tag aren't always there, only for AF\n    // but we still need to keep this information for unknown map type\n\n\n    if (entityName) {\n      glyph.setEntity(new libsbgnjs.EntityType({\n        name: entityName\n      }));\n    }\n\n    return glyph;\n  };\n\n  jsonToSbgnml.childOfNone = function (ele, nodes) {\n    return !ele.isChild() || nodes.getElementById(ele.data('parent')).length === 0;\n  };\n\n  return jsonToSbgnml;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/json-to-sbgnml-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/json-to-sif-converter-factory.js":
/*!********************************************************!*\
  !*** ./src/utilities/json-to-sif-converter-factory.js ***!
  \********************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var elementUtilities, cy;\n\n  function jsonToSif(param) {\n    elementUtilities = param.elementUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n\n  function isValidEnd(node) {\n    return elementUtilities.isSIFNode(node) || node.data('class') == 'topology group';\n  }\n\n  jsonToSif.convert = function () {\n    var lines = [];\n    var edges = cy.edges().filter(function (edge) {\n      return elementUtilities.isSIFEdge(edge) && isValidEnd(edge.source()) && isValidEnd(edge.target());\n    });\n    var nodes = cy.nodes().filter(function (node) {\n      return elementUtilities.isSIFNode(node);\n    });\n    nodes = nodes.not(edges.connectedNodes());\n\n    var setToStr = function setToStr(set) {\n      if (!set) {\n        return '';\n      }\n\n      return Object.keys(set).join(';');\n    };\n\n    var getLabel = function getLabel(node) {\n      return node.data('label');\n    };\n\n    var isValidLabel = function isValidLabel(label) {\n      return !!label;\n    };\n\n    edges.forEach(function (edge) {\n      var srcNames, tgtNames;\n\n      var getNames = function getNames(node) {\n        var names;\n\n        if (node.isParent()) {\n          names = node.children().map(getLabel);\n        } else {\n          names = [getLabel(node)];\n        }\n\n        return names && names.filter(isValidLabel);\n      };\n\n      var srcNames = getNames(edge.source());\n      var tgtNames = getNames(edge.target());\n\n      if (!srcNames || !tgtNames || srcNames.length == 0 || tgtNames.length == 0) {\n        return;\n      }\n\n      var type = edge.data('class');\n      var pcIDSet = edge.data('pcIDSet');\n      var siteLocSet = edge.data('siteLocSet');\n      var pcIDs = setToStr(pcIDSet);\n      var siteLocations = setToStr(siteLocSet);\n      srcNames.forEach(function (srcName) {\n        tgtNames.forEach(function (tgtName) {\n          var line = [srcName, type, tgtName, pcIDs, siteLocations].join('\\t');\n          lines.push(line);\n        });\n      });\n    });\n    nodes.forEach(function (node) {\n      var label = getLabel(node);\n\n      if (label) {\n        lines.push(label);\n      }\n    });\n    var text = lines.join('\\n');\n    return text;\n  };\n\n  return jsonToSif;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vc3JjL3V0aWxpdGllcy9qc29uLXRvLXNpZi1jb252ZXJ0ZXItZmFjdG9yeS5qcz83NDZmIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJlbGVtZW50VXRpbGl0aWVzIiwiY3kiLCJqc29uVG9TaWYiLCJwYXJhbSIsInNiZ25DeUluc3RhbmNlIiwiZ2V0Q3kiLCJpc1ZhbGlkRW5kIiwibm9kZSIsImlzU0lGTm9kZSIsImRhdGEiLCJjb252ZXJ0IiwibGluZXMiLCJlZGdlcyIsImZpbHRlciIsImVkZ2UiLCJpc1NJRkVkZ2UiLCJzb3VyY2UiLCJ0YXJnZXQiLCJub2RlcyIsIm5vdCIsImNvbm5lY3RlZE5vZGVzIiwic2V0VG9TdHIiLCJzZXQiLCJPYmplY3QiLCJrZXlzIiwiam9pbiIsImdldExhYmVsIiwiaXNWYWxpZExhYmVsIiwibGFiZWwiLCJmb3JFYWNoIiwic3JjTmFtZXMiLCJ0Z3ROYW1lcyIsImdldE5hbWVzIiwibmFtZXMiLCJpc1BhcmVudCIsImNoaWxkcmVuIiwibWFwIiwibGVuZ3RoIiwidHlwZSIsInBjSURTZXQiLCJzaXRlTG9jU2V0IiwicGNJRHMiLCJzaXRlTG9jYXRpb25zIiwic3JjTmFtZSIsInRndE5hbWUiLCJsaW5lIiwicHVzaCIsInRleHQiXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsWUFBVztBQUUxQixNQUFJQyxnQkFBSixFQUFzQkMsRUFBdEI7O0FBRUEsV0FBU0MsU0FBVCxDQUFtQkMsS0FBbkIsRUFBMEI7QUFDeEJILElBQUFBLGdCQUFnQixHQUFHRyxLQUFLLENBQUNILGdCQUF6QjtBQUNBQyxJQUFBQSxFQUFFLEdBQUdFLEtBQUssQ0FBQ0MsY0FBTixDQUFxQkMsS0FBckIsRUFBTDtBQUNEOztBQUVELFdBQVNDLFVBQVQsQ0FBb0JDLElBQXBCLEVBQTBCO0FBQ3hCLFdBQU9QLGdCQUFnQixDQUFDUSxTQUFqQixDQUE0QkQsSUFBNUIsS0FBc0NBLElBQUksQ0FBQ0UsSUFBTCxDQUFVLE9BQVYsS0FBc0IsZ0JBQW5FO0FBQ0Q7O0FBRURQLEVBQUFBLFNBQVMsQ0FBQ1EsT0FBVixHQUFvQixZQUFXO0FBQzdCLFFBQUlDLEtBQUssR0FBRyxFQUFaO0FBRUEsUUFBSUMsS0FBSyxHQUFHWCxFQUFFLENBQUNXLEtBQUgsR0FBV0MsTUFBWCxDQUFtQixVQUFVQyxJQUFWLEVBQWlCO0FBQzlDLGFBQU9kLGdCQUFnQixDQUFDZSxTQUFqQixDQUE0QkQsSUFBNUIsS0FDRlIsVUFBVSxDQUFFUSxJQUFJLENBQUNFLE1BQUwsRUFBRixDQURSLElBRUZWLFVBQVUsQ0FBRVEsSUFBSSxDQUFDRyxNQUFMLEVBQUYsQ0FGZjtBQUdELEtBSlcsQ0FBWjtBQU1BLFFBQUlDLEtBQUssR0FBR2pCLEVBQUUsQ0FBQ2lCLEtBQUgsR0FBV0wsTUFBWCxDQUFtQixVQUFVTixJQUFWLEVBQWlCO0FBQzlDLGFBQU9QLGdCQUFnQixDQUFDUSxTQUFqQixDQUE0QkQsSUFBNUIsQ0FBUDtBQUNELEtBRlcsQ0FBWjtBQUlBVyxJQUFBQSxLQUFLLEdBQUdBLEtBQUssQ0FBQ0MsR0FBTixDQUFXUCxLQUFLLENBQUNRLGNBQU4sRUFBWCxDQUFSOztBQUVBLFFBQUlDLFFBQVEsR0FBRyxTQUFYQSxRQUFXLENBQVNDLEdBQVQsRUFBYztBQUMzQixVQUFJLENBQUNBLEdBQUwsRUFBVTtBQUNSLGVBQU8sRUFBUDtBQUNEOztBQUVELGFBQU9DLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZRixHQUFaLEVBQWlCRyxJQUFqQixDQUFzQixHQUF0QixDQUFQO0FBQ0QsS0FORDs7QUFRQSxRQUFJQyxRQUFRLEdBQUcsU0FBWEEsUUFBVyxDQUFTbkIsSUFBVCxFQUFlO0FBQzVCLGFBQU9BLElBQUksQ0FBQ0UsSUFBTCxDQUFVLE9BQVYsQ0FBUDtBQUNELEtBRkQ7O0FBSUEsUUFBSWtCLFlBQVksR0FBRyxTQUFmQSxZQUFlLENBQVNDLEtBQVQsRUFBZTtBQUNoQyxhQUFPLENBQUMsQ0FBQ0EsS0FBVDtBQUNELEtBRkQ7O0FBSUFoQixJQUFBQSxLQUFLLENBQUNpQixPQUFOLENBQWUsVUFBVWYsSUFBVixFQUFpQjtBQUM5QixVQUFJZ0IsUUFBSixFQUFjQyxRQUFkOztBQUVBLFVBQUlDLFFBQVEsR0FBRyxTQUFYQSxRQUFXLENBQVN6QixJQUFULEVBQWU7QUFDNUIsWUFBSTBCLEtBQUo7O0FBRUEsWUFBSTFCLElBQUksQ0FBQzJCLFFBQUwsRUFBSixFQUFxQjtBQUNuQkQsVUFBQUEsS0FBSyxHQUFJMUIsSUFBSSxDQUFDNEIsUUFBTCxHQUFnQkMsR0FBaEIsQ0FBcUJWLFFBQXJCLENBQVQ7QUFDRCxTQUZELE1BR0s7QUFDRE8sVUFBQUEsS0FBSyxHQUFHLENBQUVQLFFBQVEsQ0FBQ25CLElBQUQsQ0FBVixDQUFSO0FBQ0g7O0FBRUQsZUFBTzBCLEtBQUssSUFBSUEsS0FBSyxDQUFDcEIsTUFBTixDQUFjYyxZQUFkLENBQWhCO0FBQ0QsT0FYRDs7QUFhQSxVQUFJRyxRQUFRLEdBQUdFLFFBQVEsQ0FBQ2xCLElBQUksQ0FBQ0UsTUFBTCxFQUFELENBQXZCO0FBQ0EsVUFBSWUsUUFBUSxHQUFHQyxRQUFRLENBQUNsQixJQUFJLENBQUNHLE1BQUwsRUFBRCxDQUF2Qjs7QUFFQSxVQUFLLENBQUNhLFFBQUQsSUFBYSxDQUFDQyxRQUFkLElBQTBCRCxRQUFRLENBQUNPLE1BQVQsSUFBbUIsQ0FBN0MsSUFBa0ROLFFBQVEsQ0FBQ00sTUFBVCxJQUFtQixDQUExRSxFQUE4RTtBQUM1RTtBQUNEOztBQUVELFVBQUlDLElBQUksR0FBR3hCLElBQUksQ0FBQ0wsSUFBTCxDQUFVLE9BQVYsQ0FBWDtBQUNBLFVBQUk4QixPQUFPLEdBQUd6QixJQUFJLENBQUNMLElBQUwsQ0FBVSxTQUFWLENBQWQ7QUFDQSxVQUFJK0IsVUFBVSxHQUFHMUIsSUFBSSxDQUFDTCxJQUFMLENBQVUsWUFBVixDQUFqQjtBQUNBLFVBQUlnQyxLQUFLLEdBQUdwQixRQUFRLENBQUVrQixPQUFGLENBQXBCO0FBQ0EsVUFBSUcsYUFBYSxHQUFHckIsUUFBUSxDQUFFbUIsVUFBRixDQUE1QjtBQUVBVixNQUFBQSxRQUFRLENBQUNELE9BQVQsQ0FBa0IsVUFBQWMsT0FBTyxFQUFJO0FBQzNCWixRQUFBQSxRQUFRLENBQUNGLE9BQVQsQ0FBa0IsVUFBQWUsT0FBTyxFQUFJO0FBQzNCLGNBQUlDLElBQUksR0FBRyxDQUFFRixPQUFGLEVBQVdMLElBQVgsRUFBaUJNLE9BQWpCLEVBQTBCSCxLQUExQixFQUFpQ0MsYUFBakMsRUFBaURqQixJQUFqRCxDQUF1RCxJQUF2RCxDQUFYO0FBQ0FkLFVBQUFBLEtBQUssQ0FBQ21DLElBQU4sQ0FBWUQsSUFBWjtBQUNELFNBSEQ7QUFJRCxPQUxEO0FBTUQsS0FuQ0Q7QUFxQ0EzQixJQUFBQSxLQUFLLENBQUNXLE9BQU4sQ0FBZSxVQUFVdEIsSUFBVixFQUFpQjtBQUM5QixVQUFJcUIsS0FBSyxHQUFHRixRQUFRLENBQUVuQixJQUFGLENBQXBCOztBQUVBLFVBQUtxQixLQUFMLEVBQWE7QUFDWGpCLFFBQUFBLEtBQUssQ0FBQ21DLElBQU4sQ0FBWWxCLEtBQVo7QUFDRDtBQUNGLEtBTkQ7QUFRQSxRQUFJbUIsSUFBSSxHQUFHcEMsS0FBSyxDQUFDYyxJQUFOLENBQVksSUFBWixDQUFYO0FBQ0EsV0FBT3NCLElBQVA7QUFDRCxHQTlFRDs7QUFnRkEsU0FBTzdDLFNBQVA7QUFDRCxDQTlGRCIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgdmFyIGVsZW1lbnRVdGlsaXRpZXMsIGN5O1xuXG4gIGZ1bmN0aW9uIGpzb25Ub1NpZihwYXJhbSkge1xuICAgIGVsZW1lbnRVdGlsaXRpZXMgPSBwYXJhbS5lbGVtZW50VXRpbGl0aWVzO1xuICAgIGN5ID0gcGFyYW0uc2JnbkN5SW5zdGFuY2UuZ2V0Q3koKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzVmFsaWRFbmQobm9kZSkge1xuICAgIHJldHVybiBlbGVtZW50VXRpbGl0aWVzLmlzU0lGTm9kZSggbm9kZSApIHx8IG5vZGUuZGF0YSgnY2xhc3MnKSA9PSAndG9wb2xvZ3kgZ3JvdXAnO1xuICB9XG5cbiAganNvblRvU2lmLmNvbnZlcnQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGluZXMgPSBbXTtcblxuICAgIHZhciBlZGdlcyA9IGN5LmVkZ2VzKCkuZmlsdGVyKCBmdW5jdGlvbiggZWRnZSApIHtcbiAgICAgIHJldHVybiBlbGVtZW50VXRpbGl0aWVzLmlzU0lGRWRnZSggZWRnZSApXG4gICAgICAgICYmIGlzVmFsaWRFbmQoIGVkZ2Uuc291cmNlKCkgKVxuICAgICAgICAmJiBpc1ZhbGlkRW5kKCBlZGdlLnRhcmdldCgpICk7XG4gICAgfSApO1xuXG4gICAgdmFyIG5vZGVzID0gY3kubm9kZXMoKS5maWx0ZXIoIGZ1bmN0aW9uKCBub2RlICkge1xuICAgICAgcmV0dXJuIGVsZW1lbnRVdGlsaXRpZXMuaXNTSUZOb2RlKCBub2RlICk7XG4gICAgfSApO1xuXG4gICAgbm9kZXMgPSBub2Rlcy5ub3QoIGVkZ2VzLmNvbm5lY3RlZE5vZGVzKCkgKTtcblxuICAgIHZhciBzZXRUb1N0ciA9IGZ1bmN0aW9uKHNldCkge1xuICAgICAgaWYgKCFzZXQpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gT2JqZWN0LmtleXMoc2V0KS5qb2luKCc7Jyk7XG4gICAgfTtcblxuICAgIHZhciBnZXRMYWJlbCA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgIHJldHVybiBub2RlLmRhdGEoJ2xhYmVsJyk7XG4gICAgfTtcblxuICAgIHZhciBpc1ZhbGlkTGFiZWwgPSBmdW5jdGlvbihsYWJlbCl7XG4gICAgICByZXR1cm4gISFsYWJlbDtcbiAgICB9XG5cbiAgICBlZGdlcy5mb3JFYWNoKCBmdW5jdGlvbiggZWRnZSApIHtcbiAgICAgIHZhciBzcmNOYW1lcywgdGd0TmFtZXM7XG5cbiAgICAgIHZhciBnZXROYW1lcyA9IGZ1bmN0aW9uKG5vZGUpIHtcbiAgICAgICAgdmFyIG5hbWVzO1xuXG4gICAgICAgIGlmIChub2RlLmlzUGFyZW50KCkpIHtcbiAgICAgICAgICBuYW1lcyA9ICBub2RlLmNoaWxkcmVuKCkubWFwKCBnZXRMYWJlbCApO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbmFtZXMgPSBbIGdldExhYmVsKG5vZGUpIF07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmFtZXMgJiYgbmFtZXMuZmlsdGVyKCBpc1ZhbGlkTGFiZWwgKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBzcmNOYW1lcyA9IGdldE5hbWVzKGVkZ2Uuc291cmNlKCkpO1xuICAgICAgdmFyIHRndE5hbWVzID0gZ2V0TmFtZXMoZWRnZS50YXJnZXQoKSk7XG5cbiAgICAgIGlmICggIXNyY05hbWVzIHx8ICF0Z3ROYW1lcyB8fCBzcmNOYW1lcy5sZW5ndGggPT0gMCB8fCB0Z3ROYW1lcy5sZW5ndGggPT0gMCApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgdHlwZSA9IGVkZ2UuZGF0YSgnY2xhc3MnKTtcbiAgICAgIHZhciBwY0lEU2V0ID0gZWRnZS5kYXRhKCdwY0lEU2V0Jyk7XG4gICAgICB2YXIgc2l0ZUxvY1NldCA9IGVkZ2UuZGF0YSgnc2l0ZUxvY1NldCcpO1xuICAgICAgdmFyIHBjSURzID0gc2V0VG9TdHIoIHBjSURTZXQgKTtcbiAgICAgIHZhciBzaXRlTG9jYXRpb25zID0gc2V0VG9TdHIoIHNpdGVMb2NTZXQgKTtcblxuICAgICAgc3JjTmFtZXMuZm9yRWFjaCggc3JjTmFtZSA9PiB7XG4gICAgICAgIHRndE5hbWVzLmZvckVhY2goIHRndE5hbWUgPT4ge1xuICAgICAgICAgIHZhciBsaW5lID0gWyBzcmNOYW1lLCB0eXBlLCB0Z3ROYW1lLCBwY0lEcywgc2l0ZUxvY2F0aW9ucyBdLmpvaW4oICdcXHQnICk7XG4gICAgICAgICAgbGluZXMucHVzaCggbGluZSApO1xuICAgICAgICB9ICk7XG4gICAgICB9ICk7XG4gICAgfSApO1xuXG4gICAgbm9kZXMuZm9yRWFjaCggZnVuY3Rpb24oIG5vZGUgKSB7XG4gICAgICB2YXIgbGFiZWwgPSBnZXRMYWJlbCggbm9kZSApO1xuXG4gICAgICBpZiAoIGxhYmVsICkge1xuICAgICAgICBsaW5lcy5wdXNoKCBsYWJlbCApO1xuICAgICAgfVxuICAgIH0gKTtcblxuICAgIHZhciB0ZXh0ID0gbGluZXMuam9pbiggJ1xcbicgKTtcbiAgICByZXR1cm4gdGV4dDtcbiAgfTtcblxuICByZXR1cm4ganNvblRvU2lmO1xufTtcbiJdLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL2pzb24tdG8tc2lmLWNvbnZlcnRlci1mYWN0b3J5LmpzLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/utilities/json-to-sif-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/keyboard-input-utilities-factory.js":
/*!***********************************************************!*\
  !*** ./src/utilities/keyboard-input-utilities-factory.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * Listen document for keyboard inputs and exports the utilities that it makes use of\n */\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\n\nvar libs = libUtilities.getLibs();\nvar jQuery = $ = libs.jQuery;\n\nmodule.exports = function () {\n  function keyboardInputUtilities(param) {\n    // Listen to events on network container\n    $(document).on('keydown', '.integer-input', function (e) {\n      var value = $(this).attr('value');\n      return keyboardInputUtilities.isIntegerFieldInput(value, e);\n    });\n    $(document).on('keydown', '.float-input', function (e) {\n      var value = $(this).attr('value');\n      return keyboardInputUtilities.isFloatFieldInput(value, e);\n    });\n    $(document).on('change', '.integer-input,.float-input', function (e) {\n      var min = $(this).attr('min');\n      var max = $(this).attr('max');\n      var value = parseFloat($(this).val());\n\n      if (min != null) {\n        min = parseFloat(min);\n      }\n\n      if (max != null) {\n        max = parseFloat(max);\n      }\n\n      if (min != null && value < min) {\n        value = min;\n      } else if (max != null && value > max) {\n        value = max;\n      }\n\n      if (isNaN(value)) {\n        if (min != null) {\n          value = min;\n        } else if (max != null) {\n          value = max;\n        } else {\n          value = 0;\n        }\n      }\n\n      $(this).val(\"\" + value);\n    });\n  }\n\n  keyboardInputUtilities.isNumberKey = function (e) {\n    return e.keyCode >= 48 && e.keyCode <= 57 || e.keyCode >= 96 && e.keyCode <= 105;\n  };\n\n  keyboardInputUtilities.isDotKey = function (e) {\n    return e.keyCode === 190;\n  };\n\n  keyboardInputUtilities.isMinusSignKey = function (e) {\n    return e.keyCode === 109 || e.keyCode === 189;\n  };\n\n  keyboardInputUtilities.isLeftKey = function (e) {\n    return e.keyCode === 37;\n  };\n\n  keyboardInputUtilities.isRightKey = function (e) {\n    return e.keyCode === 39;\n  };\n\n  keyboardInputUtilities.isBackspaceKey = function (e) {\n    return e.keyCode === 8;\n  };\n\n  keyboardInputUtilities.isTabKey = function (e) {\n    return e.keyCode === 9;\n  };\n\n  keyboardInputUtilities.isEnterKey = function (e) {\n    return e.keyCode === 13;\n  };\n\n  keyboardInputUtilities.isIntegerFieldInput = function (value, e) {\n    return this.isCtrlOrCommandPressed(e) || this.isMinusSignKey(e) || this.isNumberKey(e) || this.isBackspaceKey(e) || this.isTabKey(e) || this.isLeftKey(e) || this.isRightKey(e) || this.isEnterKey(e);\n  };\n\n  keyboardInputUtilities.isFloatFieldInput = function (value, e) {\n    return this.isIntegerFieldInput(value, e) || this.isDotKey(e);\n  };\n\n  keyboardInputUtilities.isCtrlOrCommandPressed = function (e) {\n    return e.ctrlKey || e.metaKey;\n  };\n\n  return keyboardInputUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/keyboard-input-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/layout-loader-factory.js":
/*!************************************************!*\
  !*** ./src/utilities/layout-loader-factory.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var tdParser = __webpack_require__(/*! ./tab-delimeted-parser */ \"./src/utilities/tab-delimeted-parser.js\");\n\nmodule.exports = function () {\n  var cy, mainUtilities;\n\n  function layoutLoader(param) {\n    cy = param.sbgnCyInstance.getCy();\n    mainUtilities = param.mainUtilities;\n  }\n\n  layoutLoader.load = function (layoutText, byName) {\n    var lines = tdParser.getLinesArray(layoutText);\n    var posMap = {};\n    lines.forEach(function (line) {\n      var tabs = tdParser.getTabsArray(line);\n      var nodeId;\n\n      if (byName) {\n        var matchingNodes = layoutLoader.getNodesByName(tabs[0]);\n\n        if (matchingNodes.length === 0) {\n          return;\n        } // ideally there is only one matching node\n        // use the first one in any case\n\n\n        nodeId = matchingNodes.id();\n      } else {\n        nodeId = tabs[0];\n      }\n\n      var posX = parseFloat(tabs[1]);\n      var posY = parseFloat(tabs[2]);\n      posMap[nodeId] = {\n        x: posX,\n        y: posY\n      };\n    });\n    var options = {\n      name: 'preset',\n      positions: posMap,\n      fit: false\n    };\n    mainUtilities.performLayout(options);\n  };\n\n  layoutLoader.getNodesByName = function (name) {\n    return cy.nodes().filter('[label=\"' + name + '\"]');\n  };\n\n  return layoutLoader;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vc3JjL3V0aWxpdGllcy9sYXlvdXQtbG9hZGVyLWZhY3RvcnkuanM/ZjMwMiJdLCJuYW1lcyI6WyJ0ZFBhcnNlciIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiY3kiLCJtYWluVXRpbGl0aWVzIiwibGF5b3V0TG9hZGVyIiwicGFyYW0iLCJzYmduQ3lJbnN0YW5jZSIsImdldEN5IiwibG9hZCIsImxheW91dFRleHQiLCJieU5hbWUiLCJsaW5lcyIsImdldExpbmVzQXJyYXkiLCJwb3NNYXAiLCJmb3JFYWNoIiwibGluZSIsInRhYnMiLCJnZXRUYWJzQXJyYXkiLCJub2RlSWQiLCJtYXRjaGluZ05vZGVzIiwiZ2V0Tm9kZXNCeU5hbWUiLCJsZW5ndGgiLCJpZCIsInBvc1giLCJwYXJzZUZsb2F0IiwicG9zWSIsIngiLCJ5Iiwib3B0aW9ucyIsIm5hbWUiLCJwb3NpdGlvbnMiLCJmaXQiLCJwZXJmb3JtTGF5b3V0Iiwibm9kZXMiLCJmaWx0ZXIiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLFFBQVEsR0FBR0MsbUJBQU8sQ0FBQyx1RUFBRCxDQUF0Qjs7QUFFQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFlBQVc7QUFDMUIsTUFBSUMsRUFBSixFQUFRQyxhQUFSOztBQUVBLFdBQVNDLFlBQVQsQ0FBdUJDLEtBQXZCLEVBQStCO0FBQzdCSCxNQUFFLEdBQUdHLEtBQUssQ0FBQ0MsY0FBTixDQUFxQkMsS0FBckIsRUFBTDtBQUNBSixpQkFBYSxHQUFHRSxLQUFLLENBQUNGLGFBQXRCO0FBQ0Q7O0FBRURDLGNBQVksQ0FBQ0ksSUFBYixHQUFvQixVQUFVQyxVQUFWLEVBQXNCQyxNQUF0QixFQUErQjtBQUNqRCxRQUFJQyxLQUFLLEdBQUdiLFFBQVEsQ0FBQ2MsYUFBVCxDQUF3QkgsVUFBeEIsQ0FBWjtBQUNBLFFBQUlJLE1BQU0sR0FBRyxFQUFiO0FBRUFGLFNBQUssQ0FBQ0csT0FBTixDQUFlLFVBQVVDLElBQVYsRUFBaUI7QUFDOUIsVUFBSUMsSUFBSSxHQUFHbEIsUUFBUSxDQUFDbUIsWUFBVCxDQUF1QkYsSUFBdkIsQ0FBWDtBQUVBLFVBQUlHLE1BQUo7O0FBRUEsVUFBS1IsTUFBTCxFQUFjO0FBQ1osWUFBSVMsYUFBYSxHQUFHZixZQUFZLENBQUNnQixjQUFiLENBQTZCSixJQUFJLENBQUUsQ0FBRixDQUFqQyxDQUFwQjs7QUFDQSxZQUFLRyxhQUFhLENBQUNFLE1BQWQsS0FBeUIsQ0FBOUIsRUFBa0M7QUFDaEM7QUFDRCxTQUpXLENBTVo7QUFDQTs7O0FBQ0FILGNBQU0sR0FBR0MsYUFBYSxDQUFDRyxFQUFkLEVBQVQ7QUFDRCxPQVRELE1BVUs7QUFDSEosY0FBTSxHQUFHRixJQUFJLENBQUUsQ0FBRixDQUFiO0FBQ0Q7O0FBRUQsVUFBSU8sSUFBSSxHQUFHQyxVQUFVLENBQUVSLElBQUksQ0FBRSxDQUFGLENBQU4sQ0FBckI7QUFDQSxVQUFJUyxJQUFJLEdBQUdELFVBQVUsQ0FBRVIsSUFBSSxDQUFFLENBQUYsQ0FBTixDQUFyQjtBQUVBSCxZQUFNLENBQUVLLE1BQUYsQ0FBTixHQUFtQjtBQUFFUSxTQUFDLEVBQUVILElBQUw7QUFBV0ksU0FBQyxFQUFFRjtBQUFkLE9BQW5CO0FBQ0QsS0F2QkQ7QUF5QkEsUUFBSUcsT0FBTyxHQUFHO0FBQ1pDLFVBQUksRUFBRSxRQURNO0FBRVpDLGVBQVMsRUFBRWpCLE1BRkM7QUFHWmtCLFNBQUcsRUFBRTtBQUhPLEtBQWQ7QUFNQTVCLGlCQUFhLENBQUM2QixhQUFkLENBQTZCSixPQUE3QjtBQUNELEdBcENEOztBQXNDQXhCLGNBQVksQ0FBQ2dCLGNBQWIsR0FBOEIsVUFBVVMsSUFBVixFQUFpQjtBQUM3QyxXQUFPM0IsRUFBRSxDQUFDK0IsS0FBSCxHQUFXQyxNQUFYLENBQW1CLGFBQWFMLElBQWIsR0FBb0IsSUFBdkMsQ0FBUDtBQUNELEdBRkQ7O0FBSUEsU0FBT3pCLFlBQVA7QUFDRCxDQW5ERCIsImZpbGUiOiIuL3NyYy91dGlsaXRpZXMvbGF5b3V0LWxvYWRlci1mYWN0b3J5LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIHRkUGFyc2VyID0gcmVxdWlyZSgnLi90YWItZGVsaW1ldGVkLXBhcnNlcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgY3ksIG1haW5VdGlsaXRpZXM7XG5cbiAgZnVuY3Rpb24gbGF5b3V0TG9hZGVyKCBwYXJhbSApIHtcbiAgICBjeSA9IHBhcmFtLnNiZ25DeUluc3RhbmNlLmdldEN5KCk7XG4gICAgbWFpblV0aWxpdGllcyA9IHBhcmFtLm1haW5VdGlsaXRpZXM7XG4gIH1cblxuICBsYXlvdXRMb2FkZXIubG9hZCA9IGZ1bmN0aW9uKCBsYXlvdXRUZXh0LCBieU5hbWUgKSB7XG4gICAgdmFyIGxpbmVzID0gdGRQYXJzZXIuZ2V0TGluZXNBcnJheSggbGF5b3V0VGV4dCApO1xuICAgIHZhciBwb3NNYXAgPSB7fTtcblxuICAgIGxpbmVzLmZvckVhY2goIGZ1bmN0aW9uKCBsaW5lICkge1xuICAgICAgdmFyIHRhYnMgPSB0ZFBhcnNlci5nZXRUYWJzQXJyYXkoIGxpbmUgKTtcblxuICAgICAgdmFyIG5vZGVJZDtcblxuICAgICAgaWYgKCBieU5hbWUgKSB7XG4gICAgICAgIHZhciBtYXRjaGluZ05vZGVzID0gbGF5b3V0TG9hZGVyLmdldE5vZGVzQnlOYW1lKCB0YWJzWyAwIF0gKTtcbiAgICAgICAgaWYgKCBtYXRjaGluZ05vZGVzLmxlbmd0aCA9PT0gMCApIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZGVhbGx5IHRoZXJlIGlzIG9ubHkgb25lIG1hdGNoaW5nIG5vZGVcbiAgICAgICAgLy8gdXNlIHRoZSBmaXJzdCBvbmUgaW4gYW55IGNhc2VcbiAgICAgICAgbm9kZUlkID0gbWF0Y2hpbmdOb2Rlcy5pZCgpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIG5vZGVJZCA9IHRhYnNbIDAgXTtcbiAgICAgIH1cblxuICAgICAgdmFyIHBvc1ggPSBwYXJzZUZsb2F0KCB0YWJzWyAxIF0gKTtcbiAgICAgIHZhciBwb3NZID0gcGFyc2VGbG9hdCggdGFic1sgMiBdICk7XG5cbiAgICAgIHBvc01hcFsgbm9kZUlkIF0gPSB7IHg6IHBvc1gsIHk6IHBvc1kgfTtcbiAgICB9ICk7XG5cbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgIG5hbWU6ICdwcmVzZXQnLFxuICAgICAgcG9zaXRpb25zOiBwb3NNYXAsXG4gICAgICBmaXQ6IGZhbHNlXG4gICAgfTtcblxuICAgIG1haW5VdGlsaXRpZXMucGVyZm9ybUxheW91dCggb3B0aW9ucyApO1xuICB9O1xuXG4gIGxheW91dExvYWRlci5nZXROb2Rlc0J5TmFtZSA9IGZ1bmN0aW9uKCBuYW1lICkge1xuICAgIHJldHVybiBjeS5ub2RlcygpLmZpbHRlciggJ1tsYWJlbD1cIicgKyBuYW1lICsgJ1wiXScgKTtcbiAgfTtcblxuICByZXR1cm4gbGF5b3V0TG9hZGVyO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utilities/layout-loader-factory.js\n");

/***/ }),

/***/ "./src/utilities/layout-to-text-factory.js":
/*!*************************************************!*\
  !*** ./src/utilities/layout-to-text-factory.js ***!
  \*************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var cy;\n\n  function layoutToText(param) {\n    cy = param.sbgnCyInstance.getCy();\n  }\n\n  layoutToText.convert = function (byName) {\n    var nodes = cy.nodes();\n    var lines = [];\n    nodes.map(function (node) {\n      var idOrName = byName ? node.data('label') : node.id();\n      var posX = node.position('x');\n      var posY = node.position('y');\n      var line = [idOrName, posX, posY].join('\\t');\n      lines.push(line);\n    });\n    var text = lines.join('\\n');\n    return text;\n  };\n\n  return layoutToText;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vc3JjL3V0aWxpdGllcy9sYXlvdXQtdG8tdGV4dC1mYWN0b3J5LmpzPzA0ZGIiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImN5IiwibGF5b3V0VG9UZXh0IiwicGFyYW0iLCJzYmduQ3lJbnN0YW5jZSIsImdldEN5IiwiY29udmVydCIsImJ5TmFtZSIsIm5vZGVzIiwibGluZXMiLCJtYXAiLCJub2RlIiwiaWRPck5hbWUiLCJkYXRhIiwiaWQiLCJwb3NYIiwicG9zaXRpb24iLCJwb3NZIiwibGluZSIsImpvaW4iLCJwdXNoIiwidGV4dCJdLCJtYXBwaW5ncyI6IkFBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixZQUFXO0FBQzFCLE1BQUlDLEVBQUo7O0FBRUEsV0FBU0MsWUFBVCxDQUF1QkMsS0FBdkIsRUFBK0I7QUFDN0JGLElBQUFBLEVBQUUsR0FBR0UsS0FBSyxDQUFDQyxjQUFOLENBQXFCQyxLQUFyQixFQUFMO0FBQ0Q7O0FBRURILEVBQUFBLFlBQVksQ0FBQ0ksT0FBYixHQUF1QixVQUFVQyxNQUFWLEVBQW1CO0FBQ3hDLFFBQUlDLEtBQUssR0FBR1AsRUFBRSxDQUFDTyxLQUFILEVBQVo7QUFDQSxRQUFJQyxLQUFLLEdBQUcsRUFBWjtBQUVBRCxJQUFBQSxLQUFLLENBQUNFLEdBQU4sQ0FBVyxVQUFVQyxJQUFWLEVBQWlCO0FBQzFCLFVBQUlDLFFBQVEsR0FBR0wsTUFBTSxHQUFHSSxJQUFJLENBQUNFLElBQUwsQ0FBVSxPQUFWLENBQUgsR0FBd0JGLElBQUksQ0FBQ0csRUFBTCxFQUE3QztBQUNBLFVBQUlDLElBQUksR0FBR0osSUFBSSxDQUFDSyxRQUFMLENBQWMsR0FBZCxDQUFYO0FBQ0EsVUFBSUMsSUFBSSxHQUFHTixJQUFJLENBQUNLLFFBQUwsQ0FBYyxHQUFkLENBQVg7QUFFQSxVQUFJRSxJQUFJLEdBQUcsQ0FBRU4sUUFBRixFQUFZRyxJQUFaLEVBQWtCRSxJQUFsQixFQUF5QkUsSUFBekIsQ0FBK0IsSUFBL0IsQ0FBWDtBQUNBVixNQUFBQSxLQUFLLENBQUNXLElBQU4sQ0FBWUYsSUFBWjtBQUNELEtBUEQ7QUFTQSxRQUFJRyxJQUFJLEdBQUdaLEtBQUssQ0FBQ1UsSUFBTixDQUFZLElBQVosQ0FBWDtBQUNBLFdBQU9FLElBQVA7QUFDRCxHQWZEOztBQWlCQSxTQUFPbkIsWUFBUDtBQUNELENBekJEIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcbiAgdmFyIGN5O1xuXG4gIGZ1bmN0aW9uIGxheW91dFRvVGV4dCggcGFyYW0gKSB7XG4gICAgY3kgPSBwYXJhbS5zYmduQ3lJbnN0YW5jZS5nZXRDeSgpO1xuICB9XG5cbiAgbGF5b3V0VG9UZXh0LmNvbnZlcnQgPSBmdW5jdGlvbiggYnlOYW1lICkge1xuICAgIHZhciBub2RlcyA9IGN5Lm5vZGVzKCk7XG4gICAgdmFyIGxpbmVzID0gW107XG5cbiAgICBub2Rlcy5tYXAoIGZ1bmN0aW9uKCBub2RlICkge1xuICAgICAgdmFyIGlkT3JOYW1lID0gYnlOYW1lID8gbm9kZS5kYXRhKCdsYWJlbCcpIDogbm9kZS5pZCgpO1xuICAgICAgdmFyIHBvc1ggPSBub2RlLnBvc2l0aW9uKCd4Jyk7XG4gICAgICB2YXIgcG9zWSA9IG5vZGUucG9zaXRpb24oJ3knKTtcblxuICAgICAgdmFyIGxpbmUgPSBbIGlkT3JOYW1lLCBwb3NYLCBwb3NZIF0uam9pbiggJ1xcdCcgKTtcbiAgICAgIGxpbmVzLnB1c2goIGxpbmUgKTtcbiAgICB9ICk7XG5cbiAgICB2YXIgdGV4dCA9IGxpbmVzLmpvaW4oICdcXG4nICk7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH07XG5cbiAgcmV0dXJuIGxheW91dFRvVGV4dDtcbn07XG4iXSwiZmlsZSI6Ii4vc3JjL3V0aWxpdGllcy9sYXlvdXQtdG8tdGV4dC1mYWN0b3J5LmpzLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/utilities/layout-to-text-factory.js\n");

/***/ }),

/***/ "./src/utilities/lib-utilities.js":
/*!****************************************!*\
  !*** ./src/utilities/lib-utilities.js ***!
  \****************************************/
/***/ ((module) => {

eval("/* \n * Utility file to get and set the libraries to which sbgnviz is dependent from any file.\n */\nvar libUtilities = function libUtilities() {};\n\nlibUtilities.setLibs = function (libs) {\n  this.libs = libs;\n};\n\nlibUtilities.getLibs = function () {\n  return this.libs;\n};\n\nmodule.exports = libUtilities;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vc3JjL3V0aWxpdGllcy9saWItdXRpbGl0aWVzLmpzP2JhYWYiXSwibmFtZXMiOlsibGliVXRpbGl0aWVzIiwic2V0TGlicyIsImxpYnMiLCJnZXRMaWJzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBRUEsSUFBSUEsWUFBWSxHQUFHLFNBQWZBLFlBQWUsR0FBVSxDQUM1QixDQUREOztBQUdBQSxZQUFZLENBQUNDLE9BQWIsR0FBdUIsVUFBU0MsSUFBVCxFQUFlO0FBQ3BDLE9BQUtBLElBQUwsR0FBWUEsSUFBWjtBQUNELENBRkQ7O0FBSUFGLFlBQVksQ0FBQ0csT0FBYixHQUF1QixZQUFXO0FBQ2hDLFNBQU8sS0FBS0QsSUFBWjtBQUNELENBRkQ7O0FBSUFFLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQkwsWUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBcbiAqIFV0aWxpdHkgZmlsZSB0byBnZXQgYW5kIHNldCB0aGUgbGlicmFyaWVzIHRvIHdoaWNoIHNiZ252aXogaXMgZGVwZW5kZW50IGZyb20gYW55IGZpbGUuXG4gKi9cblxudmFyIGxpYlV0aWxpdGllcyA9IGZ1bmN0aW9uKCl7XG59O1xuXG5saWJVdGlsaXRpZXMuc2V0TGlicyA9IGZ1bmN0aW9uKGxpYnMpIHtcbiAgdGhpcy5saWJzID0gbGlicztcbn07XG5cbmxpYlV0aWxpdGllcy5nZXRMaWJzID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiB0aGlzLmxpYnM7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxpYlV0aWxpdGllcztcblxuIl0sImZpbGUiOiIuL3NyYy91dGlsaXRpZXMvbGliLXV0aWxpdGllcy5qcy5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/utilities/lib-utilities.js\n");

/***/ }),

/***/ "./src/utilities/main-utilities-factory.js":
/*!*************************************************!*\
  !*** ./src/utilities/main-utilities-factory.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var console = __webpack_require__(/*! console-browserify */ \"console-browserify\");\n/*\n * These are the main utilities to be directly utilized by the user interactions.\n * Idealy, this file is just required by index.js\n */\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\n\nvar libs = libUtilities.getLibs();\nvar jQuery = $ = libs.jQuery;\n\nmodule.exports = function () {\n  var elementUtilities, jsonToSbgnml, sbgnmlToJson, tdToJson, nwtToJson, sifToJson, optionUtilities, graphUtilities, layoutLoader, jsonToNwt;\n  var cy, options;\n\n  function mainUtilities(param) {\n    elementUtilities = param.elementUtilities;\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    jsonToNwt = param.jsonToNwtConverter;\n    sbgnmlToJson = param.sbgnmlToJsonConverter;\n    nwtToJson = param.nwtToJsonConverter;\n    tdToJson = param.tdToJsonConverter;\n    sifToJson = param.sifToJsonConverter;\n    optionUtilities = param.optionUtilities;\n    graphUtilities = param.graphUtilities;\n    cy = param.sbgnCyInstance.getCy();\n    layoutLoader = param.layoutLoader;\n    layoutToText = param.layoutToText;\n    options = optionUtilities.getOptions();\n  }\n\n  mainUtilities.beforePerformLayout = function () {\n    var parents = cy.nodes(':parent');\n    var edges = cy.edges();\n    cy.startBatch(); // graphUtilities.disablePorts();\n    // TODO do this by using extension API\n    // removes all bendpoints for all edges in cytoscape instance\n\n    for (var i = 0; i < edges.length; i++) {\n      var edge = edges[i];\n      edge.removeClass('edgebendediting-hasbendpoints');\n      edge.removeClass('edgecontrolediting-hascontrolpoints');\n      edge.removeClass('edgebendediting-hasmultiplebendpoints');\n      edge.removeClass('edgecontrolediting-hasmultiplecontrolpoints');\n      edge.data('cyedgebendeditingDistances', []);\n      edge.data('cyedgebendeditingWeights', []);\n      edge.data('cyedgecontroleditingDistances', []);\n      edge.data('cyedgecontroleditingWeights', []);\n    }\n\n    parents.removeData('minWidth');\n    parents.removeData('minHeight');\n    parents.removeData('minWidthBiasLeft');\n    parents.removeData('minWidthBiasRight');\n    parents.removeData('minHeightBiasTop');\n    parents.removeData('minHeightBiasBottom');\n    cy.endBatch();\n    if (parents.length > 0) cy.style().update();\n  }; // Expand given nodes. Requires expandCollapse extension and considers undoable option.\n\n\n  mainUtilities.expandNodes = function (nodes) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    } // Get expandCollapse api\n\n\n    var expandCollapse = cy.expandCollapse('get');\n    var nodesToExpand = expandCollapse.expandableNodes(nodes);\n\n    if (nodesToExpand.length == 0) {\n      return;\n    }\n\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"expand\", {\n        nodes: nodesToExpand\n      });\n    } else {\n      expandCollapse.expand(nodes);\n    }\n  }; // Collapse given nodes. Requires expandCollapse extension and considers undoable option.\n\n\n  mainUtilities.collapseNodes = function (nodes) {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    } // Get expandCollapse api\n\n\n    var expandCollapse = cy.expandCollapse('get');\n\n    if (expandCollapse.collapsibleNodes(nodes).length == 0) {\n      return;\n    }\n\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"collapse\", {\n        nodes: nodes\n      });\n    } else {\n      expandCollapse.collapse(nodes);\n    }\n  }; // Collapse all complexes recursively. Requires expandCollapse extension and considers undoable option.\n\n\n  mainUtilities.collapseComplexes = function () {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    } // Get expandCollapse api\n\n\n    var expandCollapse = cy.expandCollapse('get');\n    var complexes = cy.nodes(\"[class^='complex']\");\n\n    if (expandCollapse.collapsibleNodes(complexes).length == 0) {\n      return;\n    }\n\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"collapseRecursively\", {\n        nodes: complexes\n      });\n    } else {\n      expandCollapse.collapseRecursively(complexes);\n    }\n  }; // Expand all complexes recursively. Requires expandCollapse extension and considers undoable option.\n\n\n  mainUtilities.expandComplexes = function () {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    } // Get expandCollapse api\n\n\n    var expandCollapse = cy.expandCollapse('get');\n    var nodes = expandCollapse.expandableNodes(cy.nodes().filter(\"[class^='complex']\"));\n\n    if (nodes.length == 0) {\n      return;\n    }\n\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"expandRecursively\", {\n        nodes: nodes\n      });\n    } else {\n      expandCollapse.expandRecursively(nodes);\n    }\n  }; // Collapse all nodes recursively. Requires expandCollapse extension and considers undoable option.\n\n\n  mainUtilities.collapseAll = function () {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    } // Get expandCollapse api\n\n\n    var expandCollapse = cy.expandCollapse('get');\n    var nodes = cy.nodes(':visible');\n\n    if (expandCollapse.collapsibleNodes(nodes).length == 0) {\n      return;\n    }\n\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"collapseRecursively\", {\n        nodes: nodes\n      });\n    } else {\n      expandCollapse.collapseRecursively(nodes);\n    }\n  }; // Expand all nodes recursively. Requires expandCollapse extension and considers undoable option.\n\n\n  mainUtilities.expandAll = function () {\n    if (elementUtilities.isGraphTopologyLocked()) {\n      return;\n    } // Get expandCollapse api\n\n\n    var expandCollapse = cy.expandCollapse('get');\n    var nodes = expandCollapse.expandableNodes(cy.nodes(':visible'));\n\n    if (nodes.length == 0) {\n      return;\n    }\n\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"expandRecursively\", {\n        nodes: nodes\n      });\n    } else {\n      expandCollapse.expandRecursively(nodes);\n    }\n  }; // Increase border width to show nodes with hidden neighbors\n\n\n  mainUtilities.thickenBorder = function (eles) {\n    eles.forEach(function (ele) {\n      var defaultBorderWidth = Number(ele.data(\"border-width\"));\n      ele.data(\"border-width\", defaultBorderWidth + 2);\n    });\n    eles.data(\"thickBorder\", true);\n    return eles;\n  }; // Decrease border width when hidden neighbors of the nodes become visible\n\n\n  mainUtilities.thinBorder = function (eles) {\n    eles.forEach(function (ele) {\n      var defaultBorderWidth = Number(ele.data(\"border-width\"));\n      ele.data(\"border-width\", defaultBorderWidth - 2);\n    });\n    eles.removeData(\"thickBorder\");\n    return eles;\n  };\n\n  mainUtilities.hideElesSimple = function (eles) {\n    var viewUtilities = cy.viewUtilities('get');\n\n    if (eles.length === 0) {\n      return;\n    }\n\n    if (options.undoable) {\n      var ur = cy.undoRedo();\n      ur.action(\"thickenBorder\", mainUtilities.thickenBorder, mainUtilities.thinBorder);\n      ur.action(\"thinBorder\", mainUtilities.thinBorder, mainUtilities.thickenBorder); // Batching\n\n      var actions = [];\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes().intersection(eles);\n      actions.push({\n        name: \"thinBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      actions.push({\n        name: \"hide\",\n        param: eles\n      });\n      nodesWithHiddenNeighbor = eles.neighborhood(\":visible\").nodes().difference(eles).difference(cy.nodes(\"[thickBorder]\"));\n      actions.push({\n        name: \"thickenBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      cy.undoRedo()[\"do\"](\"batch\", actions);\n    } else {\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thinBorder(nodesWithHiddenNeighbor);\n      viewUtilities.hide(eles);\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thickenBorder(nodesWithHiddenNeighbor);\n    }\n  }; // Extends the given nodes list in a smart way to leave the map intact and hides the resulting list.\n  // Requires viewUtilities extension and considers 'undoable' option.\n\n\n  mainUtilities.hideNodesSmart = function (_nodes) {\n    // If this function is being called we can assume that view utilities extension is on use\n    var viewUtilities = cy.viewUtilities('get');\n\n    var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes\n\n\n    var allNodes = cy.nodes(\":visible\");\n    var nodesToShow = elementUtilities.extendRemainingNodes(nodes, allNodes);\n    var nodesToHide = allNodes.not(nodesToShow);\n\n    if (nodesToHide.length === 0) {\n      return;\n    }\n\n    if (options.undoable) {\n      var ur = cy.undoRedo();\n      ur.action(\"thickenBorder\", mainUtilities.thickenBorder, mainUtilities.thinBorder);\n      ur.action(\"thinBorder\", mainUtilities.thinBorder, mainUtilities.thickenBorder); // Batching\n\n      var actions = [];\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes().intersection(nodesToHide);\n      actions.push({\n        name: \"thinBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      actions.push({\n        name: \"hide\",\n        param: nodesToHide\n      });\n      nodesWithHiddenNeighbor = nodesToHide.neighborhood(\":visible\").nodes().difference(nodesToHide).difference(cy.nodes(\"[thickBorder]\"));\n      actions.push({\n        name: \"thickenBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      cy.undoRedo()[\"do\"](\"batch\", actions);\n    } else {\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thinBorder(nodesWithHiddenNeighbor);\n      viewUtilities.hide(nodesToHide);\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thickenBorder(nodesWithHiddenNeighbor);\n    }\n  }; // Extends the given nodes list in a smart way to leave the map intact.\n  // Then unhides the resulting list and hides others. Requires viewUtilities extension and considers 'undoable' option.\n\n\n  mainUtilities.showNodesSmart = function (_nodes) {\n    // If this function is being called we can assume that view utilities extension is on use\n    var viewUtilities = cy.viewUtilities('get');\n\n    var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes\n\n\n    var allNodes = cy.elements();\n    var nodesToShow = elementUtilities.extendNodeList(nodes);\n    var nodesToHide = allNodes.not(nodesToShow);\n\n    if (nodesToHide.length === 0) {\n      return;\n    }\n\n    if (options.undoable) {\n      var ur = cy.undoRedo();\n      ur.action(\"thickenBorder\", mainUtilities.thickenBorder, mainUtilities.thinBorder);\n      ur.action(\"thinBorder\", mainUtilities.thinBorder, mainUtilities.thickenBorder); // Batching\n\n      var actions = [];\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      actions.push({\n        name: \"thinBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      actions.push({\n        name: \"hide\",\n        param: nodesToHide\n      });\n      nodesWithHiddenNeighbor = nodesToHide.neighborhood(\":visible\").nodes().difference(nodesToHide);\n      actions.push({\n        name: \"thickenBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      cy.undoRedo()[\"do\"](\"batch\", actions);\n    } else {\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thinBorder(nodesWithHiddenNeighbor);\n      viewUtilities.hide(nodesToHide);\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thickenBorder(nodesWithHiddenNeighbor);\n    }\n  }; // Unhides elements passed as arguments. Requires viewUtilities extension and considers 'undoable' option.\n\n\n  mainUtilities.showEles = function (eles) {\n    // If this function is being called we can assume that view utilities extension is on use\n    var viewUtilities = cy.viewUtilities('get');\n    var hiddenEles = eles.filter(':hidden');\n\n    if (hiddenEles.length === 0) {\n      return;\n    }\n\n    if (options.undoable) {\n      var ur = cy.undoRedo();\n      ur.action(\"thickenBorder\", mainUtilities.thickenBorder, mainUtilities.thinBorder);\n      ur.action(\"thinBorder\", mainUtilities.thinBorder, mainUtilities.thickenBorder); // Batching\n\n      var actions = [];\n      var nodesToThinBorder = hiddenEles.neighborhood(\":visible\").nodes(\"[thickBorder]\").difference(cy.edges(\":hidden\").difference(hiddenEles.edges().union(hiddenEles.nodes().connectedEdges())).connectedNodes());\n      actions.push({\n        name: \"thinBorder\",\n        param: nodesToThinBorder\n      });\n      actions.push({\n        name: \"show\",\n        param: hiddenEles\n      });\n      var nodesToThickenBorder = hiddenEles.nodes().edgesWith(cy.nodes(\":hidden\").difference(hiddenEles.nodes())).connectedNodes().intersection(hiddenEles.nodes());\n      actions.push({\n        name: \"thickenBorder\",\n        param: nodesToThickenBorder\n      });\n      cy.undoRedo()[\"do\"](\"batch\", actions);\n    } else {\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thinBorder(nodesWithHiddenNeighbor);\n      viewUtilities.show(eles);\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thickenBorder(nodesWithHiddenNeighbor);\n    }\n  }; // Unhides all elements. Requires viewUtilities extension and considers 'undoable' option.\n\n\n  mainUtilities.showAll = function () {\n    // If this function is being called we can assume that view utilities extension is on use\n    var viewUtilities = cy.viewUtilities('get');\n\n    if (cy.elements().length === cy.elements(':visible').length) {\n      return;\n    }\n\n    if (options.undoable) {\n      var ur = cy.undoRedo();\n      ur.action(\"thickenBorder\", mainUtilities.thickenBorder, mainUtilities.thinBorder);\n      ur.action(\"thinBorder\", mainUtilities.thinBorder, mainUtilities.thickenBorder); // Batching\n\n      var actions = [];\n      var nodesWithHiddenNeighbor = cy.nodes(\"[thickBorder]\");\n      actions.push({\n        name: \"thinBorder\",\n        param: nodesWithHiddenNeighbor\n      });\n      actions.push({\n        name: \"show\",\n        param: cy.elements()\n      });\n      cy.undoRedo()[\"do\"](\"batch\", actions);\n    } else {\n      var nodesWithHiddenNeighbor = cy.edges(\":hidden\").connectedNodes(':visible');\n      mainUtilities.thinBorder(nodesWithHiddenNeighbor);\n      viewUtilities.show(cy.elements());\n    }\n  }; // Removes the given elements in a simple way. Considers 'undoable' option.\n\n\n  mainUtilities.deleteElesSimple = function (eles) {\n    if (elementUtilities.isGraphTopologyLocked() || eles.length == 0) {\n      return;\n    }\n\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"deleteElesSimple\", {\n        eles: eles\n      });\n    } else {\n      eles.remove();\n    }\n  }; // Extends the given nodes list in a smart way to leave the map intact and removes the resulting list.\n  // Considers 'undoable' option.\n\n\n  mainUtilities.deleteNodesSmart = function (_nodes) {\n    var nodes = _nodes.nodes();\n\n    if (elementUtilities.isGraphTopologyLocked() || nodes.length == 0) {\n      return;\n    }\n\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"deleteNodesSmart\", {\n        firstTime: true,\n        eles: nodes\n      });\n    } else {\n      elementUtilities.deleteNodesSmart(nodes);\n    }\n  };\n\n  function isNeed2Highligth(eles2highligth) {\n    if (eles2highligth.length === 0) {\n      return false;\n    }\n\n    var viewUtilities = cy.viewUtilities('get');\n    var highlightClass = viewUtilities.getAllHighlightClasses()[0];\n    var highlightedEles = cy.elements('.' + highlightClass).filter(':visible');\n\n    if (highlightedEles.contains(eles2highligth)) {\n      return false;\n    }\n\n    return true;\n  } // Highlights selected elements. Requires viewUtilities extension and considers 'undoable' option.\n\n\n  mainUtilities.highlightSelected = function (_eles) {\n    var elesToHighlight = _eles;\n\n    if (!isNeed2Highligth(elesToHighlight)) {\n      return;\n    } // If this function is being called we can assume that view utilities extension is on use\n\n\n    var viewUtilities = cy.viewUtilities('get');\n\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"]('highlight', {\n        eles: elesToHighlight,\n        idx: 0\n      });\n    } else {\n      viewUtilities.highlight(elesToHighlight);\n    }\n\n    cy.elements().unselect();\n  }; // Highlights neighbours of the given nodes. Requires viewUtilities extension and considers 'undoable' option.\n\n\n  mainUtilities.highlightNeighbours = function (_nodes) {\n    // If this function is being called we can assume that view utilities extension is on use\n    var viewUtilities = cy.viewUtilities('get');\n\n    var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes\n\n\n    var elesToHighlight = elementUtilities.getNeighboursOfNodes(nodes);\n\n    if (!isNeed2Highligth(elesToHighlight)) {\n      return;\n    }\n\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"]('highlight', {\n        eles: elesToHighlight,\n        idx: 0\n      });\n    } else {\n      viewUtilities.highlight(elesToHighlight);\n    }\n\n    cy.elements().unselect();\n  }; // Finds the elements whose label includes the given label and highlights processes of those elements.\n  // Requires viewUtilities extension and considers 'undoable' option.\n\n\n  mainUtilities.searchByLabel = function (label) {\n    if (label.length == 0) {\n      return;\n    }\n\n    var nodesToHighlight = cy.nodes(\":visible\").filter(function (ele, i) {\n      if (typeof ele === \"number\") {\n        ele = i;\n      }\n\n      if (ele.data(\"label\") && ele.data(\"label\").toLowerCase().indexOf(label) >= 0) {\n        return true;\n      }\n\n      return false;\n    });\n\n    if (nodesToHighlight.length == 0) {\n      return;\n    } // If this function is being called we can assume that view utilities extension is on use\n\n\n    var viewUtilities = cy.viewUtilities('get'); // Use this line for smart search\n    // nodesToHighlight = elementUtilities.extendNodeList(nodesToHighlight);\n\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"]('highlight', {\n        eles: nodesToHighlight,\n        idx: 0\n      });\n    } else {\n      viewUtilities.highlight(nodesToHighlight);\n    }\n\n    cy.elements().unselect();\n  }; // Highlights processes of the given nodes. Requires viewUtilities extension and considers 'undoable' option.\n\n\n  mainUtilities.highlightProcesses = function (_nodes) {\n    var nodes = _nodes.nodes(); // Ensure that nodes list just include nodes\n\n\n    var elesToHighlight = elementUtilities.extendNodeList(nodes);\n\n    if (!isNeed2Highligth(elesToHighlight)) {\n      return;\n    } // If this function is being called we can assume that view utilities extension is on use\n\n\n    var viewUtilities = cy.viewUtilities('get');\n\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"]('highlight', {\n        eles: elesToHighlight,\n        idx: 0\n      });\n    } else {\n      viewUtilities.highlight(elesToHighlight);\n    }\n\n    cy.elements().unselect();\n  }; // Unhighlights any highlighted element. Requires viewUtilities extension and considers 'undoable' option.\n\n\n  mainUtilities.removeHighlights = function () {\n    if (elementUtilities.noneIsNotHighlighted()) {\n      return;\n    } // If this function is being called we can assume that view utilities extension is on use\n\n\n    var viewUtilities = cy.viewUtilities('get');\n\n    if (options.undoable) {\n      cy.undoRedo()[\"do\"](\"removeHighlights\");\n    } else {\n      viewUtilities.removeHighlights();\n    }\n\n    cy.style().update();\n  };\n\n  mainUtilities.loadLayoutData = function (layoutText, byName) {\n    layoutLoader.load(layoutText, byName);\n  };\n\n  mainUtilities.getLayoutText = function (byName) {\n    layoutToText.convert(byName);\n  }; // Performs layout by given layoutOptions. Considers 'undoable' option. However, by setting notUndoable parameter\n  // to a truthy value you can force an undable layout operation independant of 'undoable' option.\n\n\n  mainUtilities.performLayout = function (layoutOptions, notUndoable) {\n    if (!options.undoable || notUndoable) {\n      // 'notUndoable' flag can be used to have composite actions in undo/redo stack\n      // Things to do before performing layout\n      mainUtilities.beforePerformLayout();\n      var layout = cy.elements().filter(':visible').layout(layoutOptions); // Check this for cytoscape.js backward compatibility\n\n      if (layout && layout.run) {\n        layout.run();\n      }\n    } else {\n      cy.undoRedo()[\"do\"](\"layout\", {\n        options: layoutOptions,\n        eles: cy.elements().filter(':visible')\n      });\n    }\n  }; // Creates an sbgnml file content from the exising graph and returns it.\n\n\n  mainUtilities.createSbgnml = function () {\n    return jsonToSbgnml.createSbgnml();\n  };\n\n  mainUtilities.createNwt = function () {\n    return jsonToNwt.createSbgnml();\n  }; // Converts given sbgnml data to a json object in a special format\n  // (http://js.cytoscape.org/#notation/elements-json) and returns it.\n\n\n  mainUtilities.convertSbgnmlToJson = function (data, urlParams) {\n    return sbgnmlToJson.convert(data, urlParams);\n  };\n\n  mainUtilities.convertNwtToJson = function (data) {\n    return nwtToJson.convert(data);\n  }; // Create the qtip contents of the given node and returns it.\n\n\n  mainUtilities.getQtipContent = function (node) {\n    return elementUtilities.getQtipContent(node);\n  }; // Change option\n\n\n  mainUtilities.setShowComplexName = function (showComplexName) {\n    options.showComplexName = showComplexName; // make change active by triggering data which will trigger style update\n\n    cy.nodes('[class^=\"complex\"]').forEach(function (ele) {\n      ele.trigger(\"data\");\n    });\n  };\n  /*\n   * Sets the ordering of the given nodes.\n   * Ordering options are 'L-to-R', 'R-to-L', 'T-to-B', 'B-to-T', 'none'.\n   * If a node does not have any port before the operation and it is supposed to have some after operation the portDistance parameter is\n   * used to set the distance between the node center and the ports. The default port distance is 60.\n   * Considers undoable option.\n   */\n\n\n  mainUtilities.setPortsOrdering = function (nodes, ordering, portDistance) {\n    if (nodes.length === 0) {\n      return;\n    }\n\n    if (!options.undoable) {\n      elementUtilities.setPortsOrdering(nodes, ordering, portDistance);\n    } else {\n      var param = {\n        nodes: nodes,\n        ordering: ordering,\n        portDistance: portDistance\n      };\n      cy.undoRedo()[\"do\"](\"setPortsOrdering\", param);\n    }\n\n    cy.style().update();\n  };\n  /**\n   * Get map properties from SBGNML file\n   * Needs to be called after file is loaded - sbgnvizLoadFileEnd event\n   * return: map properties as object\n   */\n\n\n  mainUtilities.getMapProperties = function () {\n    if (elementUtilities.fileFormat !== undefined) {\n      if (elementUtilities.fileFormat == 'sbgnml') return sbgnmlToJson.mapPropertiesToObj();else if (elementUtilities.fileFormat == 'nwt') return nwtToJson.mapPropertiesToObj();else if (elementUtilities.fileFormat == 'td') return tdToJson.mapPropertiesToObj();else if (elementUtilities.fileFormat == 'sif') return sifToJson.mapPropertiesToObj();else {\n        console.log(\"File format mismatched!\");\n        return;\n      }\n    } else {\n      console.log(\"File format is not defined!\");\n      return;\n    }\n  };\n\n  mainUtilities.doValidation = function (file) {\n    return sbgnmlToJson.doValidation(file);\n  };\n\n  mainUtilities.setCompoundPadding = function (newPaddingValue) {\n    options.compoundPadding = newPaddingValue;\n    optionUtilities.extendOptions(options);\n  };\n\n  mainUtilities.getCompoundPadding = function () {\n    return options.compoundPadding;\n  };\n\n  return mainUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/main-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/nwt-to-json-converter-factory.js":
/*!********************************************************!*\
  !*** ./src/utilities/nwt-to-json-converter-factory.js ***!
  \********************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var sbgnmlToJson, elementUtilities;\n\n  function nwtToJson(param) {\n    sbgnmlToJson = param.sbgnmlToJsonConverter;\n    elementUtilities = param.elementUtilities;\n  }\n\n  function strToSet(str, splitBy) {\n    var set = {};\n    var list = str ? str.split(splitBy) : [];\n    list.forEach(function (member) {\n      set[member] = true;\n    });\n    return set;\n  }\n\n  function getFirstByTagName(arc, tagName) {\n    var els = arc.getElementsByTagName(tagName);\n    var val = els.length > 0 ? els[0].innerHTML : null;\n    return val;\n  }\n\n  var sifEdgePropHandlerMap = {\n    'pcIDSet': function pcIDSet(arc) {\n      var val = getFirstByTagName(arc, 'pcIDs');\n      return strToSet(val, /;| /);\n    },\n    'siteLocSet': function siteLocSet(arc) {\n      var val = getFirstByTagName(arc, 'siteLocations');\n      return strToSet(val, ';');\n    }\n  };\n  var sifNodePropHandlerMap = {\n    'tooltip': function tooltip(glyph) {\n      var val = getFirstByTagName(glyph, 'tooltip');\n      return val;\n    },\n    'infoboxes': function infoboxes(glyph, data) {\n      var sifInfoboxPropHandlerMap = {\n        'tooltip': function tooltip(glyph) {\n          var val = getFirstByTagName(glyph, 'tooltip');\n          return val;\n        }\n      };\n      var infoboxGlyphs = glyph.getElementsByTagName('glyph');\n\n      for (var i = 0; i < infoboxGlyphs.length; i++) {\n        var infoboxGlyph = infoboxGlyphs[i];\n        Object.keys(sifInfoboxPropHandlerMap).forEach(function (propName) {\n          var val = sifInfoboxPropHandlerMap[propName](infoboxGlyph);\n\n          if (val) {\n            data.statesandinfos[i][propName] = val;\n          }\n        });\n      }\n    }\n  };\n\n  function extendElementsData(elesData, filterFcn, getXMLEleById, propHandlerMap, xmlObject) {\n    elesData.forEach(function (obj) {\n      var data = obj.data;\n\n      if (filterFcn(data[\"class\"])) {\n        var xmlEle = getXMLEleById(xmlObject, data.id);\n        Object.keys(propHandlerMap).forEach(function (propName) {\n          // does not have to return a value, maybe a void function as well\n          var val = propHandlerMap[propName](xmlEle, data);\n\n          if (val) {\n            data[propName] = val;\n          }\n        });\n      }\n    });\n  }\n\n  function getElMap(graphData) {\n    var map = {\n      nodes: {},\n      edges: {},\n      infoboxes: {}\n    };\n    graphData.edges.forEach(function (edge) {\n      map.edges[edge.data.id] = edge;\n    });\n    graphData.nodes.forEach(function (node) {\n      map.nodes[node.data.id] = node;\n      var infoboxes = node.data.statesandinfos;\n      infoboxes.forEach(function (infobox) {\n        map.infoboxes[infobox.id] = infobox;\n      });\n    });\n    return map;\n  }\n\n  function applyExtraStylesData(graphData, xmlObject) {\n    var listOfStyles = xmlObject.querySelector('listOfStyles');\n    var styles = listOfStyles && listOfStyles.querySelectorAll('style');\n\n    if (!styles || styles.length === 0) {\n      return;\n    }\n\n    var attrToProp = {\n      'shapeName': 'shape-name'\n    };\n    var elMap = getElMap(graphData);\n    styles.forEach(function (style) {\n      var idList = style.getAttribute('idList').split(' ');\n      Object.keys(attrToProp).forEach(function (attrName) {\n        var g = style.querySelector('g');\n        var val = g.getAttribute(attrName);\n\n        if (val) {\n          var propName = attrToProp[attrName];\n          idList.forEach(function (id) {\n            if (elMap.nodes[id] || elMap.edges[id]) {\n              var el = elMap.nodes[id] || elMap.edges[id];\n              el.data[propName] = val;\n            } else if (elMap.infoboxes[id]) {\n              var el = elMap.infoboxes[id];\n              el.style[propName] = val;\n            }\n          });\n        }\n      });\n    });\n  }\n\n  nwtToJson.convert = function (xmlObject, urlParams) {\n    var graphData = sbgnmlToJson.convert(xmlObject, urlParams);\n    var mapType = elementUtilities.mapType;\n\n    if (mapType !== 'PD' && mapType !== 'AF' && elementUtilities.mapType !== 'HybridSbgn') {\n      elementUtilities.fileFormat = 'nwt'; // extend edges data with sif specific features\n\n      extendElementsData(graphData.edges, elementUtilities.isSIFEdge, sbgnmlToJson.getArcById.bind(sbgnmlToJson), sifEdgePropHandlerMap, xmlObject);\n      extendElementsData(graphData.nodes, elementUtilities.isSIFNode, sbgnmlToJson.getGlyphById.bind(sbgnmlToJson), sifNodePropHandlerMap, xmlObject);\n    } // apply the style data that is not applied because of restrictions of libsbgn\n\n\n    applyExtraStylesData(graphData, xmlObject);\n    return graphData;\n  };\n\n  nwtToJson.mapPropertiesToObj = function () {\n    return sbgnmlToJson.mapPropertiesToObj();\n  };\n\n  return nwtToJson;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/nwt-to-json-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/option-utilities-factory.js":
/*!***************************************************!*\
  !*** ./src/utilities/option-utilities-factory.js ***!
  \***************************************************/
/***/ ((module) => {

eval("/*\n *  Extend default options and get current options by using this file\n */\nmodule.exports = function () {\n  // default options\n  var defaults = {\n    // The path of core library images when sbgnviz is required from npm and the index html\n    // file and node_modules are under the same folder then using the default value is fine\n    imgPath: 'node_modules/sbgnviz/src/img',\n    // Whether to fit labels to nodes\n    fitLabelsToNodes: function fitLabelsToNodes() {\n      return false;\n    },\n    fitLabelsToInfoboxes: function fitLabelsToInfoboxes() {\n      return false;\n    },\n    // dynamic label size it may be 'small', 'regular', 'large'\n    dynamicLabelSize: function dynamicLabelSize() {\n      return 'regular';\n    },\n    // Whether to infer parent node on load \n    inferNestingOnLoad: function inferNestingOnLoad() {\n      return false;\n    },\n    // intial compound padding for all compound nodes \n    compoundPadding: function compoundPadding() {\n      return 0;\n    },\n    improveFlow: function improveFlow() {\n      return true;\n    },\n    // Whether to adjust node label font size automatically.\n    // If this option return false do not adjust label sizes according to node height uses node.data('font-size')\n    // instead of doing it.\n    adjustNodeLabelFontSizeAutomatically: function adjustNodeLabelFontSizeAutomatically() {\n      return true;\n    },\n    // extra padding for compound nodes except for complexes\n    extraCompartmentPadding: 14,\n    //extra padding for complex compound nodes, refer to elementUtilities.getComplexPadding function to see details\n    extraComplexPadding: 10,\n    // Wether to display the complex's labels, like compartments.\n    // Will also increase the paddings by extraCompoundPadding to make room for the name.\n    showComplexName: true,\n    // The selector of the component containing the sbgn network\n    networkContainerSelector: '#sbgn-network-container',\n    // Whether the actions are undoable, requires cytoscape-undo-redo extension\n    undoable: true\n  };\n\n  var optionUtilities = function optionUtilities(param) {}; // Extend the defaults options with the user options\n\n\n  optionUtilities.extendOptions = function (options) {\n    var result = {};\n\n    for (var prop in defaults) {\n      result[prop] = defaults[prop];\n    }\n\n    for (var prop in options) {\n      result[prop] = options[prop];\n    }\n\n    optionUtilities.options = result;\n    return options;\n  };\n\n  optionUtilities.getOptions = function () {\n    return optionUtilities.options;\n  };\n\n  return optionUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vc3JjL3V0aWxpdGllcy9vcHRpb24tdXRpbGl0aWVzLWZhY3RvcnkuanM/OWU0NyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZGVmYXVsdHMiLCJpbWdQYXRoIiwiZml0TGFiZWxzVG9Ob2RlcyIsImZpdExhYmVsc1RvSW5mb2JveGVzIiwiZHluYW1pY0xhYmVsU2l6ZSIsImluZmVyTmVzdGluZ09uTG9hZCIsImNvbXBvdW5kUGFkZGluZyIsImltcHJvdmVGbG93IiwiYWRqdXN0Tm9kZUxhYmVsRm9udFNpemVBdXRvbWF0aWNhbGx5IiwiZXh0cmFDb21wYXJ0bWVudFBhZGRpbmciLCJleHRyYUNvbXBsZXhQYWRkaW5nIiwic2hvd0NvbXBsZXhOYW1lIiwibmV0d29ya0NvbnRhaW5lclNlbGVjdG9yIiwidW5kb2FibGUiLCJvcHRpb25VdGlsaXRpZXMiLCJwYXJhbSIsImV4dGVuZE9wdGlvbnMiLCJvcHRpb25zIiwicmVzdWx0IiwicHJvcCIsImdldE9wdGlvbnMiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUVBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsWUFBWTtBQUMzQjtBQUNBLE1BQUlDLFFBQVEsR0FBRztBQUNiO0FBQ0E7QUFDQUMsSUFBQUEsT0FBTyxFQUFFLDhCQUhJO0FBSWI7QUFDQUMsSUFBQUEsZ0JBQWdCLEVBQUUsNEJBQVk7QUFDNUIsYUFBTyxLQUFQO0FBQ0QsS0FQWTtBQVFiQyxJQUFBQSxvQkFBb0IsRUFBRSxnQ0FBWTtBQUNoQyxhQUFPLEtBQVA7QUFDRCxLQVZZO0FBV2I7QUFDQUMsSUFBQUEsZ0JBQWdCLEVBQUUsNEJBQVk7QUFDNUIsYUFBTyxTQUFQO0FBQ0QsS0FkWTtBQWViO0FBQ0FDLElBQUFBLGtCQUFrQixFQUFFLDhCQUFZO0FBQzlCLGFBQU8sS0FBUDtBQUNELEtBbEJZO0FBbUJiO0FBQ0FDLElBQUFBLGVBQWUsRUFBRSwyQkFBWTtBQUMzQixhQUFPLENBQVA7QUFDRCxLQXRCWTtBQXVCYkMsSUFBQUEsV0FBVyxFQUFFLHVCQUFZO0FBQ3JCLGFBQU8sSUFBUDtBQUNILEtBekJZO0FBMEJiO0FBQ0E7QUFDQTtBQUNBQyxJQUFBQSxvQ0FBb0MsRUFBRSxnREFBVztBQUMvQyxhQUFPLElBQVA7QUFDRCxLQS9CWTtBQWdDYjtBQUNBQyxJQUFBQSx1QkFBdUIsRUFBRSxFQWpDWjtBQW1DYjtBQUNBQyxJQUFBQSxtQkFBbUIsRUFBRSxFQXBDUjtBQXFDYjtBQUNBO0FBQ0FDLElBQUFBLGVBQWUsRUFBRSxJQXZDSjtBQXdDYjtBQUNBQyxJQUFBQSx3QkFBd0IsRUFBRSx5QkF6Q2I7QUEwQ2I7QUFDQUMsSUFBQUEsUUFBUSxFQUFFO0FBM0NHLEdBQWY7O0FBOENBLE1BQUlDLGVBQWUsR0FBRyxTQUFsQkEsZUFBa0IsQ0FBVUMsS0FBVixFQUFpQixDQUN0QyxDQURELENBaEQyQixDQW1EM0I7OztBQUNBRCxFQUFBQSxlQUFlLENBQUNFLGFBQWhCLEdBQWdDLFVBQVVDLE9BQVYsRUFBbUI7QUFDakQsUUFBSUMsTUFBTSxHQUFHLEVBQWI7O0FBRUEsU0FBSyxJQUFJQyxJQUFULElBQWlCbkIsUUFBakIsRUFBMkI7QUFDekJrQixNQUFBQSxNQUFNLENBQUNDLElBQUQsQ0FBTixHQUFlbkIsUUFBUSxDQUFDbUIsSUFBRCxDQUF2QjtBQUNEOztBQUVELFNBQUssSUFBSUEsSUFBVCxJQUFpQkYsT0FBakIsRUFBMEI7QUFDeEJDLE1BQUFBLE1BQU0sQ0FBQ0MsSUFBRCxDQUFOLEdBQWVGLE9BQU8sQ0FBQ0UsSUFBRCxDQUF0QjtBQUNEOztBQUVETCxJQUFBQSxlQUFlLENBQUNHLE9BQWhCLEdBQTBCQyxNQUExQjtBQUVBLFdBQU9ELE9BQVA7QUFDRCxHQWREOztBQWdCQUgsRUFBQUEsZUFBZSxDQUFDTSxVQUFoQixHQUE2QixZQUFZO0FBQ3ZDLFdBQU9OLGVBQWUsQ0FBQ0csT0FBdkI7QUFDRCxHQUZEOztBQUlBLFNBQU9ILGVBQVA7QUFDRCxDQXpFRCIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiAgRXh0ZW5kIGRlZmF1bHQgb3B0aW9ucyBhbmQgZ2V0IGN1cnJlbnQgb3B0aW9ucyBieSB1c2luZyB0aGlzIGZpbGVcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gZGVmYXVsdCBvcHRpb25zXG4gIHZhciBkZWZhdWx0cyA9IHtcbiAgICAvLyBUaGUgcGF0aCBvZiBjb3JlIGxpYnJhcnkgaW1hZ2VzIHdoZW4gc2JnbnZpeiBpcyByZXF1aXJlZCBmcm9tIG5wbSBhbmQgdGhlIGluZGV4IGh0bWxcbiAgICAvLyBmaWxlIGFuZCBub2RlX21vZHVsZXMgYXJlIHVuZGVyIHRoZSBzYW1lIGZvbGRlciB0aGVuIHVzaW5nIHRoZSBkZWZhdWx0IHZhbHVlIGlzIGZpbmVcbiAgICBpbWdQYXRoOiAnbm9kZV9tb2R1bGVzL3NiZ252aXovc3JjL2ltZycsXG4gICAgLy8gV2hldGhlciB0byBmaXQgbGFiZWxzIHRvIG5vZGVzXG4gICAgZml0TGFiZWxzVG9Ob2RlczogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gICAgZml0TGFiZWxzVG9JbmZvYm94ZXM6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuICAgIC8vIGR5bmFtaWMgbGFiZWwgc2l6ZSBpdCBtYXkgYmUgJ3NtYWxsJywgJ3JlZ3VsYXInLCAnbGFyZ2UnXG4gICAgZHluYW1pY0xhYmVsU2l6ZTogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuICdyZWd1bGFyJztcbiAgICB9LFxuICAgIC8vIFdoZXRoZXIgdG8gaW5mZXIgcGFyZW50IG5vZGUgb24gbG9hZCBcbiAgICBpbmZlck5lc3RpbmdPbkxvYWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuICAgIC8vIGludGlhbCBjb21wb3VuZCBwYWRkaW5nIGZvciBhbGwgY29tcG91bmQgbm9kZXMgXG4gICAgY29tcG91bmRQYWRkaW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9LFxuICAgIGltcHJvdmVGbG93OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG4gICAgLy8gV2hldGhlciB0byBhZGp1c3Qgbm9kZSBsYWJlbCBmb250IHNpemUgYXV0b21hdGljYWxseS5cbiAgICAvLyBJZiB0aGlzIG9wdGlvbiByZXR1cm4gZmFsc2UgZG8gbm90IGFkanVzdCBsYWJlbCBzaXplcyBhY2NvcmRpbmcgdG8gbm9kZSBoZWlnaHQgdXNlcyBub2RlLmRhdGEoJ2ZvbnQtc2l6ZScpXG4gICAgLy8gaW5zdGVhZCBvZiBkb2luZyBpdC5cbiAgICBhZGp1c3ROb2RlTGFiZWxGb250U2l6ZUF1dG9tYXRpY2FsbHk6IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSxcbiAgICAvLyBleHRyYSBwYWRkaW5nIGZvciBjb21wb3VuZCBub2RlcyBleGNlcHQgZm9yIGNvbXBsZXhlc1xuICAgIGV4dHJhQ29tcGFydG1lbnRQYWRkaW5nOiAxNCxcblxuICAgIC8vZXh0cmEgcGFkZGluZyBmb3IgY29tcGxleCBjb21wb3VuZCBub2RlcywgcmVmZXIgdG8gZWxlbWVudFV0aWxpdGllcy5nZXRDb21wbGV4UGFkZGluZyBmdW5jdGlvbiB0byBzZWUgZGV0YWlsc1xuICAgIGV4dHJhQ29tcGxleFBhZGRpbmc6IDEwLFxuICAgIC8vIFdldGhlciB0byBkaXNwbGF5IHRoZSBjb21wbGV4J3MgbGFiZWxzLCBsaWtlIGNvbXBhcnRtZW50cy5cbiAgICAvLyBXaWxsIGFsc28gaW5jcmVhc2UgdGhlIHBhZGRpbmdzIGJ5IGV4dHJhQ29tcG91bmRQYWRkaW5nIHRvIG1ha2Ugcm9vbSBmb3IgdGhlIG5hbWUuXG4gICAgc2hvd0NvbXBsZXhOYW1lOiB0cnVlLFxuICAgIC8vIFRoZSBzZWxlY3RvciBvZiB0aGUgY29tcG9uZW50IGNvbnRhaW5pbmcgdGhlIHNiZ24gbmV0d29ya1xuICAgIG5ldHdvcmtDb250YWluZXJTZWxlY3RvcjogJyNzYmduLW5ldHdvcmstY29udGFpbmVyJyxcbiAgICAvLyBXaGV0aGVyIHRoZSBhY3Rpb25zIGFyZSB1bmRvYWJsZSwgcmVxdWlyZXMgY3l0b3NjYXBlLXVuZG8tcmVkbyBleHRlbnNpb25cbiAgICB1bmRvYWJsZTogdHJ1ZVxuICB9O1xuXG4gIHZhciBvcHRpb25VdGlsaXRpZXMgPSBmdW5jdGlvbiAocGFyYW0pIHtcbiAgfTtcblxuICAvLyBFeHRlbmQgdGhlIGRlZmF1bHRzIG9wdGlvbnMgd2l0aCB0aGUgdXNlciBvcHRpb25zXG4gIG9wdGlvblV0aWxpdGllcy5leHRlbmRPcHRpb25zID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICB2YXIgcmVzdWx0ID0ge307XG5cbiAgICBmb3IgKHZhciBwcm9wIGluIGRlZmF1bHRzKSB7XG4gICAgICByZXN1bHRbcHJvcF0gPSBkZWZhdWx0c1twcm9wXTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBwcm9wIGluIG9wdGlvbnMpIHtcbiAgICAgIHJlc3VsdFtwcm9wXSA9IG9wdGlvbnNbcHJvcF07XG4gICAgfVxuXG4gICAgb3B0aW9uVXRpbGl0aWVzLm9wdGlvbnMgPSByZXN1bHQ7XG5cbiAgICByZXR1cm4gb3B0aW9ucztcbiAgfTtcblxuICBvcHRpb25VdGlsaXRpZXMuZ2V0T3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gb3B0aW9uVXRpbGl0aWVzLm9wdGlvbnM7XG4gIH07XG5cbiAgcmV0dXJuIG9wdGlvblV0aWxpdGllcztcbn07XG4iXSwiZmlsZSI6Ii4vc3JjL3V0aWxpdGllcy9vcHRpb24tdXRpbGl0aWVzLWZhY3RvcnkuanMuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utilities/option-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/sbgnml-to-cd-converter-factory.js":
/*!*********************************************************!*\
  !*** ./src/utilities/sbgnml-to-cd-converter-factory.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var jsonToSbgnml, elementUtilities, cy;\n\n  function sbgnmlToCd(param) {\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    elementUtilities = param.elementUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n\n  sbgnmlToCd.convert = function (xml, callback) {\n    $.ajax({\n      type: 'post',\n      url: \"http://web.newteditor.org:8080/sbgnml2cd\",\n      data: xml,\n      success: function success(data) {\n        callback(data);\n      },\n      error: function error(XMLHttpRequest) {\n        callback(null);\n      }\n    });\n  };\n\n  return sbgnmlToCd;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vc3JjL3V0aWxpdGllcy9zYmdubWwtdG8tY2QtY29udmVydGVyLWZhY3RvcnkuanM/ODNhNiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwianNvblRvU2Jnbm1sIiwiZWxlbWVudFV0aWxpdGllcyIsImN5Iiwic2Jnbm1sVG9DZCIsInBhcmFtIiwianNvblRvU2Jnbm1sQ29udmVydGVyIiwic2JnbkN5SW5zdGFuY2UiLCJnZXRDeSIsImNvbnZlcnQiLCJ4bWwiLCJjYWxsYmFjayIsIiQiLCJhamF4IiwidHlwZSIsInVybCIsImRhdGEiLCJzdWNjZXNzIiwiZXJyb3IiLCJYTUxIdHRwUmVxdWVzdCJdLCJtYXBwaW5ncyI6IkFBQUFBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixZQUFXO0FBRXhCLE1BQUlDLFlBQUosRUFBa0JDLGdCQUFsQixFQUFvQ0MsRUFBcEM7O0FBRUEsV0FBU0MsVUFBVCxDQUFvQkMsS0FBcEIsRUFBMkI7QUFDekJKLElBQUFBLFlBQVksR0FBR0ksS0FBSyxDQUFDQyxxQkFBckI7QUFDQUosSUFBQUEsZ0JBQWdCLEdBQUdHLEtBQUssQ0FBQ0gsZ0JBQXpCO0FBQ0FDLElBQUFBLEVBQUUsR0FBR0UsS0FBSyxDQUFDRSxjQUFOLENBQXFCQyxLQUFyQixFQUFMO0FBQ0Q7O0FBR0RKLEVBQUFBLFVBQVUsQ0FBQ0ssT0FBWCxHQUFxQixVQUFVQyxHQUFWLEVBQWVDLFFBQWYsRUFBeUI7QUFFM0NDLElBQUFBLENBQUMsQ0FBQ0MsSUFBRixDQUFPO0FBQ0ZDLE1BQUFBLElBQUksRUFBRSxNQURKO0FBRUZDLE1BQUFBLEdBQUcsRUFBRSwwQ0FGSDtBQUdGQyxNQUFBQSxJQUFJLEVBQUVOLEdBSEo7QUFJRk8sTUFBQUEsT0FBTyxFQUFFLGlCQUFVRCxJQUFWLEVBQWdCO0FBQ3JCTCxRQUFBQSxRQUFRLENBQUNLLElBQUQsQ0FBUjtBQUNILE9BTkM7QUFPRkUsTUFBQUEsS0FBSyxFQUFFLGVBQVVDLGNBQVYsRUFBMEI7QUFDN0JSLFFBQUFBLFFBQVEsQ0FBQyxJQUFELENBQVI7QUFDSDtBQVRDLEtBQVA7QUFhRixHQWZEOztBQWlCQSxTQUFPUCxVQUFQO0FBRUQsQ0E5QkgiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuXG4gICAgdmFyIGpzb25Ub1NiZ25tbCwgZWxlbWVudFV0aWxpdGllcywgY3k7XG4gIFxuICAgIGZ1bmN0aW9uIHNiZ25tbFRvQ2QocGFyYW0pIHtcbiAgICAgIGpzb25Ub1NiZ25tbCA9IHBhcmFtLmpzb25Ub1NiZ25tbENvbnZlcnRlcjtcbiAgICAgIGVsZW1lbnRVdGlsaXRpZXMgPSBwYXJhbS5lbGVtZW50VXRpbGl0aWVzO1xuICAgICAgY3kgPSBwYXJhbS5zYmduQ3lJbnN0YW5jZS5nZXRDeSgpO1xuICAgIH1cbiAgXG4gXG4gICAgc2Jnbm1sVG9DZC5jb252ZXJ0ID0gZnVuY3Rpb24gKHhtbCwgY2FsbGJhY2spIHtcblxuICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICB0eXBlOiAncG9zdCcsICAgICAgICAgICAgIFxuICAgICAgICAgICAgdXJsOiBcImh0dHA6Ly93ZWIubmV3dGVkaXRvci5vcmc6ODA4MC9zYmdubWwyY2RcIixcbiAgICAgICAgICAgIGRhdGE6IHhtbCxcbiAgICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZGF0YSk7ICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKFhNTEh0dHBSZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICBcbiAgICAgICAgXG4gICAgfVxuXG4gICAgcmV0dXJuIHNiZ25tbFRvQ2Q7XG4gIFxuICB9XG4gIFxuXG4iXSwiZmlsZSI6Ii4vc3JjL3V0aWxpdGllcy9zYmdubWwtdG8tY2QtY29udmVydGVyLWZhY3RvcnkuanMuanMiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utilities/sbgnml-to-cd-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/sbgnml-to-json-converter-factory.js":
/*!***********************************************************!*\
  !*** ./src/utilities/sbgnml-to-json-converter-factory.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var libsbgnjs = __webpack_require__(/*! libsbgn.js */ \"libsbgn.js\");\n\nvar parseString = __webpack_require__(/*! xml2js */ \"xml2js\").parseString;\n\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\n\nvar libs = libUtilities.getLibs();\nvar jQuery = $ = libs.jQuery;\n\nvar classes = __webpack_require__(/*! ./classes */ \"./src/utilities/classes.js\");\n\nmodule.exports = function () {\n  var elementUtilities, graphUtilities, handledElements, mainUtilities;\n\n  function sbgnmlToJson(param) {\n    optionUtilities = param.optionUtilities;\n    options = optionUtilities.getOptions();\n    elementUtilities = param.elementUtilities;\n    graphUtilities = param.graphUtilities;\n    mainUtilities = param.mainUtilities;\n    handledElements = {};\n    elementUtilities.elementTypes.forEach(function (type) {\n      handledElements[type] = true;\n    });\n  }\n\n  sbgnmlToJson.insertedNodes = {};\n  sbgnmlToJson.map = undefined;\n  sbgnmlToJson.calculatedCompoundPadding = undefined;\n\n  sbgnmlToJson.getAllCompartments = function (glyphList) {\n    var compartments = [];\n\n    for (var i = 0; i < glyphList.length; i++) {\n      if (glyphList[i].class_ == 'compartment') {\n        var compartment = glyphList[i];\n        var bbox = compartment.bbox;\n        compartments.push({\n          'x': parseFloat(bbox.x),\n          'y': parseFloat(bbox.y),\n          'w': parseFloat(bbox.w),\n          'h': parseFloat(bbox.h),\n          'id': compartment.id\n        });\n      }\n    }\n\n    compartments.sort(function (c1, c2) {\n      if (c1.h * c1.w < c2.h * c2.w) {\n        return -1;\n      }\n\n      if (c1.h * c1.w > c2.h * c2.w) {\n        return 1;\n      }\n\n      return 0;\n    });\n    return compartments;\n  };\n\n  sbgnmlToJson.isInBoundingBox = function (bbox1, bbox2) {\n    if (bbox1.x > bbox2.x && bbox1.y > bbox2.y && bbox1.x + bbox1.w < bbox2.x + bbox2.w && bbox1.y + bbox1.h < bbox2.y + bbox2.h) {\n      return true;\n    }\n\n    return false;\n  };\n\n  sbgnmlToJson.bboxProp = function (ele) {\n    if (ele.bboxCalculated) {\n      return ele.bbox;\n    }\n\n    ele.bboxCalculated = true;\n    var childNodes = ele.glyphMembers; //exclude state variables and units of information from child members\n\n    childNodes = childNodes.filter(function (child) {\n      return child.class_ != \"state variable\" && child.class_ != \"unit of information\";\n    });\n    var bbox = {};\n    bbox.x = ele.bbox.x;\n    bbox.y = ele.bbox.y;\n    bbox.w = ele.bbox.w;\n    bbox.h = ele.bbox.h; //if it is simple node return bbox\n\n    if (childNodes.length <= 0) {\n      bbox.x = parseFloat(bbox.x) + parseFloat(bbox.w) / 2;\n      bbox.y = parseFloat(bbox.y) + parseFloat(bbox.h) / 2;\n      return bbox;\n    } else if (ele.extension && ele.extension.has('extraInfo')) {\n      // if newt file then extrainfo on the compound node exists\n      var xml = ele.extension.get('extraInfo');\n      var extraInfo;\n      parseString(xml, function (err, result) {\n        extraInfo = result.extraInfo;\n      });\n      ele.originalW = bbox.w;\n      ele.originalH = bbox.h;\n      bbox.x = parseFloat(bbox.x) + parseFloat(bbox.w) / 2;\n      bbox.y = parseFloat(bbox.y) + parseFloat(bbox.h) / 2;\n      bbox.w = parseFloat(extraInfo.w);\n      bbox.h = parseFloat(extraInfo.h);\n      ele.minWidth = parseFloat(extraInfo.minW);\n      ele.minHeight = parseFloat(extraInfo.minH);\n      ele.minWidthBiasLeft = parseFloat(extraInfo.WLBias);\n      ele.minWidthBiasRight = parseFloat(extraInfo.WRBias);\n      ele.minHeightBiasBottom = parseFloat(extraInfo.HBBias);\n      ele.minHeightBiasTop = parseFloat(extraInfo.HTBias);\n      return bbox;\n    } else {\n      /*  var styles;\n       if (this.map.extension && this.map.extension.has('renderInformation')) { // render extension was found\n         styles = this.map.extension.get('renderInformation').listOfStyles;\n         if(styles  !== undefined){\n           styles = styles.styles;\n         }\n       }\n      */\n\n      /*  var compoundPadding = parseFloat(mapProperties.compoundPadding);\n       var extraCompartmentPadding = parseFloat(mapProperties.extraCompartmentPadding); */\n      var padding = this.calculateElementPadding(ele);\n\n      if (ele.class_ == \"complex\") {\n        ele.complexCalculatedPadding = padding;\n      }\n\n      var minLeft, maxRight, minTop, maxBottom, childrenBboxW, childrenBboxH, minLeftBorder, maxRightBorder, minTopBorder, maxBottomBorder;\n      var fromInfoBox = false; // Traverse the other children and update the extreme values\n\n      for (var i = 0; i < childNodes.length; i++) {\n        var childNode = childNodes[i];\n        var childNodeBbox = this.bboxProp(childNode);\n        childNode.bbox = childNodeBbox;\n        var borderWidth = elementUtilities.getDefaultProperties(childNode.class_)[\"border-width\"];\n        var childPadding = this.calculateElementPadding(childNode); //var childStyle = styles.filter(style =>{ return style.idList == childNode.id});\n\n        /*  if(childStyle.length > 0 && childStyle[0].renderGroup !== undefined){\n           borderWidth = childStyle[0].renderGroup.strokeWidth;\n         } */\n\n        var left = childNodeBbox.x - childNodeBbox.w / 2 - childPadding;\n        var right = childNodeBbox.x + childNodeBbox.w / 2 + childPadding;\n        var top = childNodeBbox.y - childNodeBbox.h / 2 - childPadding;\n        var bottom = childNodeBbox.y + childNodeBbox.h / 2 + childPadding;\n        var stateAndInfos = childNode.glyphMembers.filter(function (child) {\n          return child.class_ == \"state variable\" || child.class_ == \"unit of information\";\n        });\n\n        if (stateAndInfos.length > 0) {\n          for (var k = 0; k < stateAndInfos.length; k++) {\n            var stateBbox = stateAndInfos[k].bbox;\n\n            if (minLeft === undefined || stateBbox.x < minLeft) {\n              minLeft = stateBbox.x;\n              fromInfoBox = true;\n              minLeftBorder = 0;\n            }\n\n            if (maxRight === undefined || stateBbox.x + stateBbox.w > maxRight) {\n              maxRight = stateBbox.x + stateBbox.w;\n              fromInfoBox = true;\n              maxRightBorder = 0;\n            }\n\n            if (minTop === undefined || stateBbox.y < minTop) {\n              minTop = stateBbox.y;\n              fromInfoBox = true;\n              minTopBorder = 0;\n            }\n\n            if (maxBottom === undefined || stateBbox.y + stateBbox.h > maxBottom) {\n              maxBottom = stateBbox.y + stateBbox.h;\n              fromInfoBox = true;\n              maxBottomBorder = 0;\n            }\n          }\n        }\n\n        if (minLeft === undefined || left < minLeft) {\n          minLeft = left;\n          fromInfoBox = false;\n          minLeftBorder = borderWidth;\n        }\n\n        if (maxRight === undefined || right > maxRight) {\n          maxRight = right;\n          fromInfoBox = false;\n          maxRightBorder = borderWidth;\n        }\n\n        if (minTop === undefined || top < minTop) {\n          minTop = top;\n          fromInfoBox = false;\n          minTopBorder = borderWidth;\n        }\n\n        if (maxBottom === undefined || bottom > maxBottom) {\n          maxBottom = bottom;\n          fromInfoBox = false;\n          maxBottomBorder = borderWidth;\n        }\n      }\n\n      var averageBorderWidthW = (minLeftBorder + maxRightBorder) / 2;\n      var averageBorderWidthH = (minTopBorder + maxBottomBorder) / 2; // The sizes of children bbox are determined by the difference between the extreme coordinates\n\n      childrenBboxW = maxRight - minLeft + 2; // 2 is from cytoscape internal implementation of infoboxes\n\n      childrenBboxH = maxBottom - minTop + 2; // If children bbox width is less than node bbox width + paddings set minWidth, and horizontal biases\n\n      if (Number((childrenBboxW + 2 * padding + averageBorderWidthW + (fromInfoBox ? 2 * borderWidth : 0)).toFixed(2)) < Number(bbox.w.toFixed(2))) {\n        //ele.minWidth = bbox.w - 2 padding  calculate badding first\n        ele.minWidth = bbox.w - 2 * padding;\n        var extraLeft = Number((minLeft - bbox.x - padding - minLeftBorder / 2 - 1).toFixed(2));\n        var extraRight = Number((bbox.x + bbox.w - maxRight - padding - maxRightBorder / 2 - 1).toFixed(2));\n        ele.minWidthBiasLeft = extraLeft / (extraLeft + extraRight) * 100;\n        ele.minWidthBiasRight = 100 - ele.minWidthBiasLeft;\n      } // If children bbox height is bigger than node bbox height set minHeight, and vertical biases\n\n\n      if (Number((childrenBboxH + 2 * padding + averageBorderWidthH + (fromInfoBox ? 2 * borderWidth : 0)).toFixed(2)) < Number(bbox.h.toFixed(2))) {\n        ele.minHeight = bbox.h - 2 * padding;\n        var extraTop = Number((minTop - bbox.y - padding - minTopBorder / 2 - 1).toFixed(2));\n        var extraBottom = Number((bbox.y + bbox.h - maxBottom - padding - maxBottomBorder / 2 - 1).toFixed(2));\n        ele.minHeightBiasTop = extraTop / (extraTop + extraBottom) * 100;\n        ele.minHeightBiasBottom = 100 - ele.minHeightBiasTop;\n      } // set positions as center\n\n\n      bbox.x = parseFloat(bbox.x) + parseFloat(bbox.w) / 2;\n      bbox.y = parseFloat(bbox.y) + parseFloat(bbox.h) / 2; //bbox.x = (minLeft + maxRight) /2;\n      // bbox.y = (minTop + maxBottom) / 2;\n\n      bbox.w = bbox.w - 2 * padding - averageBorderWidthW;\n      bbox.h = bbox.h - 2 * padding - averageBorderWidthH;\n      bbox.w = bbox.w < 0 ? 0 : bbox.w;\n      bbox.h = bbox.h < 0 ? 0 : bbox.h;\n      return bbox;\n    }\n  };\n\n  sbgnmlToJson.stateAndInfoBboxProp = function (ele, parentBbox) {\n    // don't copy directly ele.box because it contains other things than x y w h\n    var bbox = {};\n\n    if (ele.bbox != null) {\n      bbox.x = ele.bbox.x;\n      bbox.y = ele.bbox.y;\n      bbox.w = ele.bbox.w;\n      bbox.h = ele.bbox.h;\n    } else {\n      bbox.x = 0;\n      bbox.y = 0;\n      bbox.w = 12;\n      bbox.h = 12;\n    }\n\n    return bbox;\n  };\n\n  sbgnmlToJson.calculateElementPadding = function (ele) {\n    var padding = 0;\n    var childNodes = ele.glyphMembers; //exclude state variables and units of information from child members\n\n    childNodes = childNodes.filter(function (child) {\n      return child.class_ != \"state variable\" && child.class_ != \"unit of information\";\n    });\n    if (childNodes.length <= 0) return 0;\n    var compoundPadding = typeof options.compoundPadding === 'function' ? options.compoundPadding.call() : options.compoundPadding; // } \n\n    if (ele.class_ == \"complex\") {\n      var complexPadding = 0;\n      var extraComplexPadding = typeof options.extraComplexPadding === 'function' ? options.extraComplexPadding.call() : options.extraComplexPadding;\n      complexPadding = compoundPadding < 5 ? 5 : compoundPadding;\n      var stateAndInfos = ele.glyphMembers.filter(function (child) {\n        return child.class_ == \"state variable\" || child.class_ == \"unit of information\";\n      });\n\n      if (ele.label != undefined && ele.label.text != undefined && ele.label.text.length > 0) {\n        complexPadding = complexPadding + 0.5 * extraComplexPadding;\n        var hasTopBottomInfo = false;\n        stateAndInfos.forEach(function (stateAndInfo) {\n          if (Number((stateAndInfo.bbox.y + stateAndInfo.bbox.h / 2).toFixed(2)) == Number((ele.bbox.y + ele.bbox.h).toFixed(2))) {\n            hasTopBottomInfo = true;\n          }\n        });\n\n        if (hasTopBottomInfo) {\n          complexPadding = complexPadding + 0.5 * extraComplexPadding;\n        }\n      } else if (stateAndInfos.length > 0) {\n        complexPadding += 2;\n      }\n\n      padding = complexPadding;\n    } else {\n      var extraCompartmentPadding = typeof options.extraCompartmentPadding === 'function' ? options.extraCompartmentPadding.call() : options.extraCompartmentPadding;\n      padding = extraCompartmentPadding + compoundPadding;\n    }\n\n    return padding;\n  };\n\n  sbgnmlToJson.findChildNodes = function (ele, childTagName) {\n    // find child nodes at depth level of 1 relative to the element\n    var children = [];\n\n    for (var i = 0; i < ele.childNodes.length; i++) {\n      var child = ele.childNodes[i];\n\n      if (child.nodeType === 1 && child.tagName === childTagName) {\n        children.push(child);\n      }\n    }\n\n    return children;\n  };\n\n  sbgnmlToJson.findChildNode = function (ele, childTagName) {\n    var nodes = this.findChildNodes(ele, childTagName);\n    return nodes.length > 0 ? nodes[0] : undefined;\n  };\n\n  sbgnmlToJson.stateAndInfoProp = function (ele, parent) {\n    var self = this;\n    var parentBbox = parent.bbox;\n    var stateAndInfoArray = [];\n    var childGlyphs = ele.glyphMembers; // this.findChildNodes(ele, 'glyph');\n    // if a biological activity node has no unit of info, it must be a BA plain\n\n    if (parent[\"class\"] == \"biological activity\" && childGlyphs.length == 0) {\n      parent[\"class\"] = \"BA plain\";\n    }\n\n    for (var i = 0; i < childGlyphs.length; i++) {\n      var glyph = childGlyphs[i];\n\n      if (glyph.class_ !== 'unit of information' && glyph.class_ !== 'state variable') {\n        continue;\n      }\n\n      var info = {};\n      var infobox;\n      var infoboxId = glyph.id;\n\n      if (glyph.class_ === 'unit of information') {\n        infobox = classes.UnitOfInformation.construct(undefined, undefined, infoboxId);\n\n        if (glyph.entity) {\n          // change the parent class according to its true class of biological activity\n          switch (glyph.entity.name) {\n            case 'unspecified entity':\n              parent[\"class\"] = \"BA unspecified entity\";\n              break;\n\n            case 'simple chemical':\n              parent[\"class\"] = \"BA simple chemical\";\n              break;\n\n            case 'macromolecule':\n              parent[\"class\"] = \"BA macromolecule\";\n              break;\n\n            case 'nucleic acid feature':\n              parent[\"class\"] = \"BA nucleic acid feature\";\n              break;\n\n            case 'perturbation':\n              parent[\"class\"] = \"BA perturbing agent\";\n              break;\n\n            case 'complex':\n              parent[\"class\"] = \"BA complex\";\n              break;\n          }\n        }\n\n        infobox.label = {\n          'text': glyph.label && glyph.label.text || undefined\n        };\n      } else if (glyph.class_ === 'state variable') {\n        infobox = classes.StateVariable.construct(undefined, undefined, undefined, infoboxId);\n        var state = glyph.state;\n        infobox.state.value = state && state.value || undefined;\n        infobox.state.variable = state && state.variable || undefined;\n      } //var bboxAndAnchorResult = getAuxUnitClass(infobox).setAnchorSideAndBbox();\n\n\n      infobox.bbox = self.stateAndInfoBboxProp(glyph, parentBbox);\n      infobox.style = self.getDefaultStateAndInfoStyle(glyph, parent[\"class\"]); //classes.StateVariable.setAnchorSide(infobox);\n\n      stateAndInfoArray.push(infobox);\n    }\n\n    return stateAndInfoArray;\n  };\n\n  sbgnmlToJson.getDefaultStateAndInfoStyle = function (gylph, parentClass) {\n    return elementUtilities.getDefaultInfoboxStyle(parentClass, gylph.class_);\n  };\n\n  sbgnmlToJson.addParentInfoToNode = function (ele, nodeObj, parent, compartments) {\n    var self = this;\n    var compartmentRef = ele.compartmentRef;\n    var inferNestingOnLoad = options.inferNestingOnLoad;\n    inferNestingOnLoad = typeof inferNestingOnLoad === 'function' ? inferNestingOnLoad.call() : inferNestingOnLoad;\n\n    if (parent) {\n      nodeObj.parent = parent;\n    } else if (compartmentRef) {\n      nodeObj.parent = compartmentRef;\n    } else if (inferNestingOnLoad) {\n      nodeObj.parent = ''; // add compartment according to geometry\n\n      for (var i = 0; i < compartments.length; i++) {\n        var bbox = {\n          'x': parseFloat(ele.bbox.x),\n          'y': parseFloat(ele.bbox.y),\n          'w': parseFloat(ele.bbox.w),\n          'h': parseFloat(ele.bbox.h),\n          'id': ele.id\n        };\n\n        if (self.isInBoundingBox(bbox, compartments[i])) {\n          nodeObj.parent = compartments[i].id;\n          break;\n        }\n      }\n    }\n  };\n\n  sbgnmlToJson.addCytoscapeJsNode = function (ele, jsonArray, parent, compartments) {\n    var self = this;\n    var nodeObj = {};\n    var styleObj = {}; // add id information\n\n    nodeObj.id = ele.id; // add node bounding box information\n\n    nodeObj.bbox = self.bboxProp(ele);\n\n    if (ele.minWidth) {\n      nodeObj.minWidth = ele.minWidth;\n      nodeObj.minWidthBiasLeft = ele.minWidthBiasLeft;\n      nodeObj.minWidthBiasRight = ele.minWidthBiasRight;\n    }\n\n    if (ele.minHeight) {\n      nodeObj.minHeight = ele.minHeight;\n      nodeObj.minHeightBiasTop = ele.minHeightBiasTop;\n      nodeObj.minHeightBiasBottom = ele.minHeightBiasBottom;\n    }\n\n    if (ele.originalW) {\n      nodeObj.originalW = ele.originalW;\n    }\n\n    if (ele.originalH) {\n      nodeObj.originalH = ele.originalH;\n    }\n\n    if (ele.complexCalculatedPadding) {\n      nodeObj.complexCalculatedPadding = ele.complexCalculatedPadding;\n    } // add class information\n\n\n    if (ele.class_ === \"source and sink\" || ele.class_ === \"emptyset\") {\n      nodeObj[\"class\"] = \"empty set\";\n    } else {\n      nodeObj[\"class\"] = ele.class_;\n    } // add label information\n\n\n    nodeObj.label = ele.label && ele.label.text || undefined;\n\n    if (nodeObj.label != undefined) {\n      nodeObj.label = \"\" + nodeObj.label;\n    } // add state and info box information\n\n\n    nodeObj.statesandinfos = self.stateAndInfoProp(ele, nodeObj); // adding parent information\n\n    self.addParentInfoToNode(ele, nodeObj, parent, compartments); // add language info, this will always be the mapType if not hybrid\n\n    var mapType = elementUtilities.mapType;\n\n    if (mapType == 'PD' || mapType == 'AF' || mapType == 'SIF') {\n      nodeObj.language = elementUtilities.mapType;\n    } else if (mapType == 'HybridSbgn') {\n      if (nodeObj[\"class\"] == 'delay' || nodeObj[\"class\"].startsWith(\"BA\")) {\n        nodeObj.language = 'AF';\n      } else {\n        nodeObj.language = 'PD';\n      }\n    } else {\n      //maptype == HybridAny\n      if (nodeObj[\"class\"].startsWith(\"SIF\")) {\n        nodeObj.language = 'SIF';\n      } else if (nodeObj[\"class\"] == 'delay' || nodeObj[\"class\"].startsWith(\"BA\")) {\n        nodeObj.language = 'AF';\n      } else {\n        nodeObj.language = 'PD';\n      }\n    } // add default properties of the node type to element data\n    // these props would be overriden by style properties of element\n    // stored in the file\n\n\n    elementUtilities.extendNodeDataWithClassDefaults(nodeObj, nodeObj[\"class\"]); // add clone information\n\n    if (ele.clone) {\n      nodeObj.clonemarker = true;\n    } else {\n      nodeObj.clonemarker = undefined;\n    } // add port information\n\n\n    var ports = [];\n    var portElements = ele.ports;\n\n    for (var i = 0; i < portElements.length; i++) {\n      var portEl = portElements[i];\n      var id = portEl.id;\n      var relativeXPos = parseFloat(portEl.x) - nodeObj.bbox.x;\n      var relativeYPos = parseFloat(portEl.y) - nodeObj.bbox.y;\n      relativeXPos = relativeXPos / parseFloat(nodeObj.bbox.w) * 100;\n      relativeYPos = relativeYPos / parseFloat(nodeObj.bbox.h) * 100; // In case port position is not vertically/horizontally aligned with the node center, decide a direction\n\n      if (Math.abs(relativeXPos) > 0 && Math.abs(relativeYPos) > 0) {\n        if (Math.abs(relativeXPos) >= Math.abs(relativeYPos)) relativeYPos = 0;else relativeXPos = 0;\n      } // We assume that ports are not inside the node shape.\n      // Therefore, abs. value of their relative x and y coordinates (relative to node center) should be bigger than 50.\n\n\n      if (Math.abs(relativeXPos) < 50) {\n        relativeXPos = 0;\n      }\n\n      if (Math.abs(relativeYPos) < 50) {\n        relativeYPos = 0;\n      }\n\n      if (relativeXPos === 0 && relativeYPos === 0) {\n        continue;\n      } // If port length is longer than the node size (for example, some sbgn files generated from Reactome database has very long ports),\n      // set the port length to 70 which is default in sbgnviz\n\n\n      if (Math.abs(relativeXPos) > 150 || Math.abs(relativeYPos) > 150) {\n        if (Math.abs(relativeXPos) > 150) relativeXPos = relativeXPos / Math.abs(relativeXPos) * 70;else relativeYPos = relativeYPos / Math.abs(relativeYPos) * 70;\n      }\n\n      ports.push({\n        id: id,\n        x: relativeXPos,\n        y: relativeYPos\n      });\n    }\n\n    nodeObj.ports = ports;\n    var _class = nodeObj[\"class\"]; // If the node can have ports and it has exactly 2 ports then it should be represented by a bigger bbox.\n    // This is because we represent it as a polygon and so the whole shape including the ports are rendered in the node bbox.\n\n    if (elementUtilities.canHavePorts(_class)) {\n      if (graphUtilities.portsEnabled && ports.length === 2) {\n        // We assume that the ports are symmetric to the node center so using just one of the ports is enough\n        var port = ports[0];\n        var orientation = port.x === 0 ? 'vertical' : 'horizontal'; // This is the ratio of the area occupied with ports over without ports\n\n        var ratio = orientation === 'vertical' ? Math.abs(port.y) / 50 : Math.abs(port.x) / 50; // Multiply the bbox with the calculated ratio\n\n        nodeObj.bbox.w = parseFloat(nodeObj.bbox.w) * ratio;\n        nodeObj.bbox.h = parseFloat(nodeObj.bbox.h) * ratio;\n      }\n    }\n\n    if (ele.extension && ele.extension.has('annotation')) {\n      // annotation extension was found\n      var rdfElement = ele.extension.get('annotation').rdfElement;\n      nodeObj = self.handleAnnotations(nodeObj, rdfElement);\n    }\n\n    if (ele.extension && ele.extension.has(\"sbgnviz\")) {\n      parseString(ele.extension.get(\"sbgnviz\"), function (err, result) {\n        if (result.sbgnviz.hidden) {\n          styleObj.display = \"none\";\n        }\n\n        if (result.sbgnviz.hasHiddenNeighbour) {\n          nodeObj.thickBorder = true;\n        }\n\n        if (result.sbgnviz.collapsed) {\n          nodeObj.positionBeforeSaving = {\n            x: Number(result.sbgnviz.positionBeforeSaving[0].$.x),\n            y: Number(result.sbgnviz.positionBeforeSaving[0].$.y)\n          };\n          nodeObj.collapse = true;\n        }\n      });\n    }\n\n    var cytoscapeJsNode = {\n      data: nodeObj,\n      style: styleObj\n    };\n    jsonArray.push(cytoscapeJsNode);\n  };\n  /**\n  * given a future cy object, and the corresponding element's libsbgnjs' extension, populates the annotations field\n  */\n\n\n  sbgnmlToJson.handleAnnotations = function (cyObject, rdfElement) {\n    // local utility function\n    function dbFromUrl(url) {\n      var regexp = /^http:\\/\\/identifiers.org\\/(.+?)\\/.+$/;\n      return url.replace(regexp, '$1');\n    }\n\n    function fillElementDataAnnotation(cyObject, annotationIndex, status, selectedDB, selectedRelation, annotationValue) {\n      if (!cyObject.annotations) {\n        cyObject.annotations = {};\n      }\n\n      var annotId = cyObject.id + \"-annot-\" + annotationIndex;\n      cyObject.annotations[annotId] = {\n        // The following may be hazardous. But setting it as unchecked leave the annotation out if the file is saved.\n        // This would lead to the user losing annotations without knowing it.\n        status: status,\n        // <-- we trust that what's been loaded is valid.\n        selectedDB: selectedDB,\n        selectedRelation: selectedRelation,\n        annotationValue: annotationValue\n      };\n      return cyObject;\n    } // we assume that the id of the rdf:about field is the one of the current node, and that there's only 1 description\n\n\n    var id = rdfElement.getAllIds()[0];\n    var resources = rdfElement.getResourcesOfId(id);\n    var customProperties = rdfElement.getCustomPropertiesOfId(id);\n    var globalAnnotIndex = 0; // handle controlled properties\n\n    for (var fullQualifier in resources) {\n      var relation = libsbgnjs.annot.Util.reducePrefix(fullQualifier);\n\n      for (var i = 0; i < resources[fullQualifier].length; i++) {\n        var value = resources[fullQualifier][i];\n        var selectedDB = dbFromUrl(value);\n        cyObject = fillElementDataAnnotation(cyObject, globalAnnotIndex, \"validated\", selectedDB, relation, value);\n        globalAnnotIndex++;\n      }\n    } // handle custom properties\n\n\n    for (var key in customProperties) {\n      var value = customProperties[key];\n      cyObject = fillElementDataAnnotation(cyObject, globalAnnotIndex, \"validated\", key, \"sio:SIO_000223\", value);\n      globalAnnotIndex++;\n    }\n\n    return cyObject;\n  };\n\n  sbgnmlToJson.traverseNodes = function (ele, jsonArray, parent, compartments) {\n    var elId = ele.id; // Workaround: In application we use class 'empty set' but on read write we use 'source and sink'\n    // SBGN-ML files can also have 'emptyset' class  \n\n    if (!handledElements[ele.class_] && ele.class_ !== \"source and sink\" && ele.class_ !== \"emptyset\") {\n      return;\n    }\n\n    this.insertedNodes[elId] = true;\n    var self = this; // add complex nodes here\n\n    var eleClass = ele.class_;\n\n    if (eleClass === 'complex' || eleClass === 'complex multimer' || eleClass === 'submap' || eleClass === 'topology group') {\n      self.addCytoscapeJsNode(ele, jsonArray, parent, compartments);\n      var childGlyphs = ele.glyphMembers;\n\n      for (var i = 0; i < childGlyphs.length; i++) {\n        var glyph = childGlyphs[i];\n        var glyphClass = glyph.class_;\n\n        if (glyphClass !== 'state variable' && glyphClass !== 'unit of information') {\n          if (glyph.compartmentRef && glyph.compartmentRef != elId && eleClass == 'submap') {\n            self.traverseNodes(glyph, jsonArray, glyph.compartmentRef, compartments);\n          } else {\n            self.traverseNodes(glyph, jsonArray, elId, compartments);\n          }\n        }\n      }\n    } else {\n      self.addCytoscapeJsNode(ele, jsonArray, parent, compartments);\n    }\n  };\n\n  sbgnmlToJson.getPorts = function (xmlObject) {\n    return xmlObject._cachedPorts = xmlObject._cachedPorts || xmlObject.querySelectorAll('port');\n  };\n\n  sbgnmlToJson.getGlyphs = function (xmlObject) {\n    var glyphs = xmlObject._cachedGlyphs;\n\n    if (!glyphs) {\n      glyphs = xmlObject._cachedGlyphs = xmlObject._cachedGlyphs || xmlObject.querySelectorAll('glyph');\n      var id2glyph = xmlObject._id2glyph = {};\n\n      for (var i = 0; i < glyphs.length; i++) {\n        var g = glyphs[i];\n        var id = g.getAttribute('id');\n        id2glyph[id] = g;\n      }\n    }\n\n    return glyphs;\n  };\n\n  sbgnmlToJson.getArcs = function (xmlObject) {\n    var arcs = xmlObject._cachedArcs;\n\n    if (!arcs) {\n      arcs = xmlObject._cachedArcs = xmlObject._cachedArcs || xmlObject.querySelectorAll('arc');\n      var id2arc = xmlObject._id2arc = {};\n\n      for (var i = 0; i < arcs.length; i++) {\n        var arc = arcs[i];\n        var id = arc.getAttribute('id');\n        id2arc[id] = arc;\n      }\n    }\n\n    return arcs;\n  };\n\n  sbgnmlToJson.getGlyphById = function (xmlObject, id) {\n    this.getGlyphs(xmlObject); // make sure cache is built\n\n    return xmlObject._id2glyph[id];\n  };\n\n  sbgnmlToJson.getArcById = function (xmlObject, id) {\n    this.getArcs(xmlObject); // make sure cache is built\n\n    return xmlObject._id2arc[id];\n  };\n\n  sbgnmlToJson.getArcSourceAndTarget = function (arc, xmlObject) {\n    // source and target can be inside of a port\n    var source = arc.source;\n    var target = arc.target;\n    var sourceNodeId;\n    var targetNodeId;\n    var sourceExists = this.getGlyphById(xmlObject, source);\n    var targetExists = this.getGlyphById(xmlObject, target);\n\n    if (sourceExists) {\n      sourceNodeId = source;\n    }\n\n    if (targetExists) {\n      targetNodeId = target;\n    }\n\n    var i;\n    var portEls = this.getPorts(xmlObject);\n    var port;\n\n    if (sourceNodeId === undefined) {\n      for (i = 0; i < portEls.length; i++) {\n        port = portEls[i];\n\n        if (port.getAttribute('id') === source) {\n          sourceNodeId = port.parentElement.getAttribute('id');\n        }\n      }\n    }\n\n    if (targetNodeId === undefined) {\n      for (i = 0; i < portEls.length; i++) {\n        port = portEls[i];\n\n        if (port.getAttribute('id') === target) {\n          targetNodeId = port.parentElement.getAttribute('id');\n        }\n      }\n    }\n\n    return {\n      'source': sourceNodeId,\n      'target': targetNodeId\n    };\n  };\n\n  sbgnmlToJson.getArcAnchorPointPositions = function (ele) {\n    var anchorPointPositions = [];\n    var children = ele.nexts;\n\n    for (var i = 0; i < children.length; i++) {\n      var posX = children[i].x;\n      var posY = children[i].y;\n      anchorPointPositions.push({\n        x: posX,\n        y: posY\n      });\n    }\n\n    return anchorPointPositions;\n  };\n\n  sbgnmlToJson.addCytoscapeJsEdge = function (ele, jsonArray, xmlObject) {\n    if (!handledElements[ele.class_]) {\n      return;\n    }\n\n    var self = this;\n    var sourceAndTarget = self.getArcSourceAndTarget(ele, xmlObject);\n\n    if (!this.insertedNodes[sourceAndTarget.source] || !this.insertedNodes[sourceAndTarget.target]) {\n      return;\n    }\n\n    var edgeObj = {};\n    var styleObj = {};\n    var anchorPointPositions = [];\n\n    if (sourceAndTarget.source !== sourceAndTarget.target) {\n      anchorPointPositions = self.getArcAnchorPointPositions(ele);\n    }\n\n    edgeObj.id = ele.id || undefined;\n    edgeObj[\"class\"] = ele.class_; // bezier edge is the default edge style\n    // change if the file being loaded has curveStyle field\n\n    var curveStyle = \"bezier\";\n\n    if (ele.extension && ele.extension.has(\"curveStyle\")) {\n      parseString(ele.extension.get(\"curveStyle\"), function (err, result) {\n        curveStyle = result.curveStyle;\n      });\n    }\n\n    if (curveStyle == \"unbundled-bezier\") {\n      edgeObj.controlPointPositions = anchorPointPositions;\n    } else {\n      edgeObj.bendPointPositions = anchorPointPositions;\n    }\n\n    var isSifMetaEdge;\n\n    if (ele.extension && ele.extension.has(\"sifMetaEdge\")) {\n      parseString(ele.extension.get(\"sifMetaEdge\"), function (err, result) {\n        isSifMetaEdge = result.sifMetaEdge;\n      });\n    }\n\n    if (isSifMetaEdge) {\n      edgeObj[\"sif-meta\"] = true;\n    } // add language info, this will always be the mapType if not hybrid\n\n\n    var PdEdges = [\"consumption\", \"production\", \"modulation\", \"stimulation\", \"catalysis\", \"inhibition\", \"necessary stimulation\", \"logic arc\", \"equivalence arc\"];\n    var AfEdges = [\"positive influence\", \"negative influence\", \"unknown influence\"];\n    var mapType = elementUtilities.mapType;\n\n    if (mapType == 'PD' || mapType == 'AF' || mapType == 'SIF') {\n      edgeObj.language = elementUtilities.mapType;\n    } else if (mapType == 'HybridSbgn') {\n      if (PdEdges.indexOf(edgeObj[\"class\"]) > -1) {\n        edgeObj.language = 'PD';\n      } else {\n        edgeObj.language = 'AF';\n      }\n    } else {\n      //maptype == HybridAny\n      if (PdEdges.indexOf(edgeObj[\"class\"]) > -1) {\n        edgeObj.language = 'PD';\n      } else if (AfEdges.indexOf(edgeObj[\"class\"]) > -1) {\n        edgeObj.language = 'AF';\n      } else {\n        edgeObj.language = 'SIF';\n      }\n    }\n\n    elementUtilities.extendEdgeDataWithClassDefaults(edgeObj, edgeObj[\"class\"]);\n    edgeObj.cardinality = 0;\n\n    if (ele.glyphs.length > 0) {\n      for (var i = 0; i < ele.glyphs.length; i++) {\n        if (ele.glyphs[i].class_ === 'cardinality' || ele.glyphs[i].class_ === 'stoichiometry') {\n          var label = ele.glyphs[i].label;\n          edgeObj.cardinality = label.text || undefined;\n        }\n      }\n    }\n\n    edgeObj.source = sourceAndTarget.source;\n    edgeObj.target = sourceAndTarget.target;\n    edgeObj.portsource = ele.source;\n    edgeObj.porttarget = ele.target;\n\n    if (ele.extension && ele.extension.has('annotation')) {\n      // annotation extension was found\n      var rdfElement = ele.extension.get('annotation').rdfElement;\n      edgeObj = self.handleAnnotations(edgeObj, rdfElement);\n    }\n\n    if (ele.extension && ele.extension.has(\"sbgnviz\")) {\n      parseString(ele.extension.get(\"sbgnviz\"), function (err, result) {\n        if (result.sbgnviz.hidden) {\n          styleObj.display = \"none\";\n        }\n      });\n    }\n\n    var cytoscapeJsEdge = {\n      data: edgeObj,\n      style: styleObj\n    };\n    jsonArray.push(cytoscapeJsEdge);\n  };\n\n  sbgnmlToJson.applyStyle = function (renderInformation, nodes, edges) {\n    // get all color id references to their value\n    if (renderInformation.listOfColorDefinitions) {\n      var colorList = renderInformation.listOfColorDefinitions.colorDefinitions;\n      var colorIDToValue = {};\n\n      for (var i = 0; i < colorList.length; i++) {\n        colorIDToValue[colorList[i].id] = colorList[i].value;\n      }\n    } // get all background image id references to their value\n\n\n    if (renderInformation.listOfBackgroundImages) {\n      var imageList = renderInformation.listOfBackgroundImages.backgroundImages;\n      var imageIDToValue = {};\n\n      for (var i = 0; i < imageList.length; i++) {\n        imageIDToValue[imageList[i].id] = imageList[i].value;\n      }\n    } // convert style list to elementId-indexed object pointing to style\n    // also convert color references to color values\n\n\n    var styleList = renderInformation.listOfStyles.styles;\n    var memberIDToStyle = {};\n\n    for (var i = 0; i < styleList.length; i++) {\n      var style = styleList[i];\n      var renderGroup = style.renderGroup; // convert color references\n\n      if (renderGroup.stroke != null && colorIDToValue) {\n        renderGroup.stroke = colorIDToValue[renderGroup.stroke];\n      }\n\n      if (renderGroup.fill != null && colorIDToValue) {\n        renderGroup.fill = colorIDToValue[renderGroup.fill];\n      } // convert background image references\n\n\n      if (renderGroup.backgroundImage != null && imageIDToValue) {\n        renderGroup.backgroundImage = imageIDToValue[renderGroup.backgroundImage];\n      }\n\n      var idList = style.idList.split(' ');\n\n      for (var j = 0; j < idList.length; j++) {\n        var id = idList[j];\n        memberIDToStyle[id] = renderGroup;\n      }\n    }\n\n    function hexToDecimal(hex) {\n      return Math.round(parseInt('0x' + hex) / 255 * 100) / 100;\n    }\n\n    function convertHexColor(hex) {\n      if (hex.length == 7) {\n        // no opacity provided\n        return {\n          opacity: null,\n          color: hex\n        };\n      } else {\n        // length of 9\n        var color = hex.slice(0, 7);\n        var opacity = hexToDecimal(hex.slice(-2));\n        return {\n          opacity: opacity,\n          color: color\n        };\n      }\n    }\n\n    var nodePropMap = {\n      'background-color': 'fill',\n      'background-opacity': 'backgroundOpacity',\n      'border-color': 'stroke',\n      'border-width': 'strokeWidth',\n      'font-size': 'fontSize',\n      'font-family': 'fontFamily',\n      'font-style': 'fontStyle',\n      'font-weight': 'fontWeight',\n      'color': 'fontColor',\n      'text-halign': 'textAnchor',\n      'text-valign': 'vtextAnchor',\n      'background-image': 'backgroundImage',\n      'background-fit': 'backgroundFit',\n      'background-position-x': 'backgroundPosX',\n      'background-position-y': 'backgroundPosY',\n      'background-width': 'backgroundWidth',\n      'background-height': 'backgroundHeight',\n      'background-image-opacity': 'backgroundImageOpacity'\n    };\n    var edgePropMap = {\n      'line-color': 'stroke',\n      'width': 'strokeWidth'\n    };\n    var infoboxPropMap = {\n      'background-color': 'fill',\n      'border-color': 'stroke',\n      'border-width': 'strokeWidth',\n      'font-size': 'fontSize',\n      'font-weight': 'fontWeight',\n      'font-style': 'fontStyle',\n      'font-family': 'fontFamily',\n      'font-color': 'fontColor'\n    };\n    var nodePropDetails = {\n      'background-color': {\n        'converter': convertHexColor,\n        'extra-field': 'color'\n      },\n\n      /*  'background-opacity': {\n         'converter': convertHexColor,\n         'extra-field': 'opacity'\n       }, */\n      'border-color': {\n        'converter': convertHexColor,\n        'extra-field': 'color'\n      }\n    };\n    var edgePropDetails = {\n      'line-color': {\n        'converter': convertHexColor,\n        'extra-field': 'color'\n      }\n    };\n    var infoboxPropDetails = {\n      'font-color': {\n        'converter': convertHexColor,\n        'extra-field': 'color'\n      },\n      'border-color': {\n        'converter': convertHexColor,\n        'extra-field': 'color'\n      }\n    };\n\n    function getElementId(ele) {\n      return ele.data.id;\n    }\n\n    function getInfoboxId(infobox) {\n      return infobox.id;\n    }\n\n    function setElementStyleProp(ele, name, value) {\n      ele.data[name] = value;\n    }\n\n    function setInfoboxStyleProp(infobox, name, value) {\n      infobox.style[name] = value;\n    } // apply the style to list and overwrite the default style\n\n\n    function overrideStyleProperties(list, propMap, propDetails, getId, setStyleProp) {\n      for (var i = 0; i < list.length; i++) {\n        var member = list[i];\n        var memberStyle = memberIDToStyle[getId(member)];\n\n        if (!memberStyle) {\n          return;\n        }\n\n        Object.keys(propMap).forEach(function (propName) {\n          var fieldName = propMap[propName];\n          var fieldVal = memberStyle[fieldName];\n\n          if (fieldVal !== undefined && fieldVal !== null) {\n            var details = propDetails && propDetails[propName];\n\n            if (details) {\n              if (details['converter']) {\n                fieldVal = details['converter'](fieldVal);\n              }\n\n              if (details['extra-field']) {\n                fieldVal = fieldVal[details['extra-field']];\n              }\n            }\n\n            setStyleProp(member, propName, fieldVal);\n          }\n        }); // if the member is a node\n\n        if (member.data && member.data.statesandinfos) {\n          overrideStyleProperties(member.data.statesandinfos, infoboxPropMap, infoboxPropDetails, getInfoboxId, setInfoboxStyleProp);\n        }\n      }\n    }\n\n    overrideStyleProperties(nodes, nodePropMap, nodePropDetails, getElementId, setElementStyleProp);\n    overrideStyleProperties(edges, edgePropMap, edgePropDetails, getElementId, setElementStyleProp);\n  };\n\n  sbgnmlToJson.mapPropertiesToObj = function () {\n    if (this.map.extension && this.map.extension.has('mapProperties')) {\n      // render extension was found\n      var xml = this.map.extension.get('mapProperties');\n      var obj;\n      parseString(xml, function (err, result) {\n        obj = result;\n      });\n      return obj;\n    } else {\n      return {\n        mapProperties: {\n          compoundPadding: mainUtilities.getCompoundPadding()\n        }\n      };\n    }\n  };\n\n  sbgnmlToJson.convert = function (xmlObject, urlParams) {\n    var self = this;\n    var cytoscapeJsNodes = [];\n    var cytoscapeJsEdges = [];\n    var compartmentChildrenMap = {}; // Map compartments children temporarily\n\n    elementUtilities.fileFormat = 'sbgnml';\n    var sbgn;\n\n    try {\n      var xmlString = new XMLSerializer().serializeToString(xmlObject);\n      sbgn = libsbgnjs.Sbgn.fromXML(xmlString);\n    } catch (err) {\n      throw new Error(\"Could not parse sbgnml. \" + err);\n    }\n\n    var map;\n\n    if (sbgn.maps.length < 1) {\n      // empty sbgn\n      return {\n        nodes: [],\n        edges: []\n      };\n    } else {\n      map = sbgn.maps[0]; // take first map of the file as the main map\n    }\n\n    this.map = map;\n    elementUtilities.mapType = elementUtilities.languageToMapType(map.language);\n    var compartments = self.getAllCompartments(map.glyphs);\n    var glyphs = map.glyphs;\n    var arcs = map.arcs;\n    var i;\n\n    for (i = 0; i < glyphs.length; i++) {\n      var glyph = glyphs[i]; // libsbgn library lists the glyphs of complexes in ele.glyphMembers but it does not store the glyphs of compartments\n      // store glyph members of compartments here.\n\n      var compartmentRef = glyph.compartmentRef;\n\n      if (glyph.class_ === 'compartment') {\n        if (compartmentChildrenMap[glyph.id] === undefined) {\n          compartmentChildrenMap[glyph.id] = glyph.glyphMembers;\n        }\n\n        glyph.glyphMembers = compartmentChildrenMap[glyph.id];\n      }\n\n      if (compartmentRef) {\n        if (compartmentChildrenMap[compartmentRef] === undefined) {\n          compartmentChildrenMap[compartmentRef] = [];\n        }\n\n        compartmentChildrenMap[compartmentRef].push(glyph);\n      }\n    }\n\n    var minDistanceToChildren = Number.MAX_SAFE_INTEGER;\n\n    if (urlParams && urlParams.compoundPadding) {\n      mainUtilities.setCompoundPadding(Number(urlParams.compoundPadding));\n    } else if (!map.extension) {\n      for (var i = 0; i < glyphs.length; i++) {\n        var glyph = glyphs[i];\n        childNodes = glyph.glyphMembers.filter(function (child) {\n          return child.class_ != \"state variable\" && child.class_ != \"unit of information\";\n        });\n\n        if (childNodes.length > 0) {\n          // compound node\n          var hasMin = false;\n\n          for (var j = 0; j < childNodes.length; j++) {\n            var childNode = childNodes[j];\n            var childClass = childNode.class_;\n\n            if (childClass === \"source and sink\" || childClass === \"emptyset\") {\n              childClass = \"empty set\";\n            }\n\n            var borderWidth = elementUtilities.getDefaultProperties(childClass)[\"border-width\"];\n            var stateAndInfos = childNode.glyphMembers.filter(function (child) {\n              return child.class_ == \"state variable\" || child.class_ == \"unit of information\";\n            });\n\n            if (stateAndInfos.length > 0) {\n              for (var k = 0; k < stateAndInfos.length; k++) {\n                var stateBbox = stateAndInfos[k].bbox;\n\n                if (stateBbox.y - glyph.bbox.y < minDistanceToChildren) {\n                  minDistanceToChildren = stateBbox.y - glyph.bbox.y - borderWidth;\n                  hasMin = true;\n                }\n\n                if (stateBbox.x - glyph.bbox.x < minDistanceToChildren) {\n                  minDistanceToChildren = stateBbox.x - glyph.bbox.x - borderWidth;\n                  hasMin = true;\n                }\n\n                if (glyph.bbox.y + glyph.bbox.h - (stateBbox.y + stateBbox.h) < minDistanceToChildren) {\n                  minDistanceToChildren = glyph.bbox.y + glyph.bbox.h - (stateBbox.y + stateBbox.h) - borderWidth;\n                  hasMin = true;\n                }\n\n                if (glyph.bbox.x + glyph.bbox.w - (stateBbox.x + stateBbox.w) < minDistanceToChildren) {\n                  minDistanceToChildren = glyph.bbox.x + glyph.bbox.w - (stateBbox.x + stateBbox.w) - borderWidth;\n                  hasMin = true;\n                }\n              }\n            }\n\n            var childNodeBbox = childNode.bbox;\n            var left = childNodeBbox.x - glyph.bbox.x - borderWidth / 2;\n            var right = glyph.bbox.x + glyph.bbox.w - (childNodeBbox.x + childNodeBbox.w) - borderWidth / 2;\n            var top = childNodeBbox.y - glyph.bbox.y - borderWidth / 2;\n            var bottom = glyph.bbox.y + glyph.bbox.h - (childNodeBbox.y + childNodeBbox.h) - borderWidth / 2;\n\n            if (left < minDistanceToChildren) {\n              minDistanceToChildren = left;\n              hasMin = true;\n            }\n\n            if (right < minDistanceToChildren) {\n              minDistanceToChildren = right;\n              hasMin = true;\n            }\n\n            if (top < minDistanceToChildren) {\n              minDistanceToChildren = top;\n              hasMin = true;\n            }\n\n            if (bottom < minDistanceToChildren) {\n              minDistanceToChildren = bottom;\n              hasMin = true;\n            }\n          }\n\n          if (hasMin) {\n            if (glyph.class_ == \"complex\") {\n              var stateAndInfos = glyph.glyphMembers.filter(function (child) {\n                return child.class_ == \"state variable\" || child.class_ == \"unit of information\";\n              });\n              var extraComplexPadding = typeof options.extraComplexPadding === 'function' ? options.extraComplexPadding.call() : options.extraComplexPadding;\n\n              if (glyph.label != undefined && glyph.label.text != undefined && glyph.label.text.length > 0) {\n                minDistanceToChildren = minDistanceToChildren - 0.5 * extraComplexPadding;\n                var hasTopBottomInfo = false;\n                stateAndInfos.forEach(function (stateAndInfo) {\n                  if (Number((stateAndInfo.bbox.y + stateAndInfo.bbox.h / 2).toFixed(2)) == Number((glyph.bbox.y + glyph.bbox.h).toFixed(2))) {\n                    hasTopBottomInfo = true;\n                  }\n                });\n\n                if (hasTopBottomInfo) {\n                  minDistanceToChildren = minDistanceToChildren - 0.5 * extraComplexPadding;\n                }\n              } else if (stateAndInfos.length > 0) {\n                minDistanceToChildren -= 2;\n              }\n            } else {\n              var extraCompartmentPadding = typeof options.extraCompartmentPadding === 'function' ? options.extraCompartmentPadding.call() : options.extraCompartmentPadding;\n              minDistanceToChildren = minDistanceToChildren - extraCompartmentPadding;\n            }\n          }\n        }\n      }\n\n      minDistanceToChildren = Math.round(minDistanceToChildren);\n      var newPadding = minDistanceToChildren - 1; // comes from cytoscape internal implementation of bounding box which is outerwidth + 1 (on each side)\n\n      if (newPadding < 0 || minDistanceToChildren == Math.round(Number.MAX_SAFE_INTEGER)) {\n        newPadding = 0;\n      }\n\n      mainUtilities.setCompoundPadding(newPadding);\n    } else {\n      mainUtilities.setCompoundPadding(Number(self.mapPropertiesToObj().mapProperties.compoundPadding));\n    }\n\n    for (i = 0; i < glyphs.length; i++) {\n      var glyph = glyphs[i];\n      self.traverseNodes(glyph, cytoscapeJsNodes, '', compartments, minDistanceToChildren);\n    }\n\n    for (i = 0; i < arcs.length; i++) {\n      var arc = arcs[i];\n      self.addCytoscapeJsEdge(arc, cytoscapeJsEdges, xmlObject);\n    }\n\n    if (map.extension && map.extension.has('renderInformation')) {\n      // render extension was found\n      self.applyStyle(map.extension.get('renderInformation'), cytoscapeJsNodes, cytoscapeJsEdges);\n    }\n\n    var cytoscapeJsGraph = {};\n    cytoscapeJsGraph.nodes = cytoscapeJsNodes;\n    cytoscapeJsGraph.edges = cytoscapeJsEdges;\n    this.insertedNodes = {};\n    var shouldDisablePorts = false;\n    cytoscapeJsGraph.nodes.forEach(function (node) {\n      if ((node.data.bbox.w == 0 || isNaN(node.data.bbox.w)) && (node.data.bbox.h == 0 || isNaN(node.data.bbox.h))) {\n        node.data.bbox.w = elementUtilities.getDefaultProperties(node.data[\"class\"]).width;\n        node.data.bbox.h = elementUtilities.getDefaultProperties(node.data[\"class\"]).height; // node.data.bbox.x = 15;     \n        // node.data.bbox.y = 10; \n      }\n\n      node.data.ports.forEach(function (port) {\n        if (isNaN(port.x) || isNaN(port.y)) {\n          shouldDisablePorts = true;\n        }\n      });\n    });\n\n    if (shouldDisablePorts) {\n      graphUtilities.disablePorts();\n    } //getDefaultProperties\n    //elementUtilities.nodeTypes.forEach(function(type){\n    //  console.log(elementUtilities.getDefaultProperties(type));\n    //});\n    //console.log(cytoscapeJsGraph);\n    //console.log( elementUtilities.nodeTypes);\n\n\n    return cytoscapeJsGraph;\n  };\n\n  sbgnmlToJson.doValidation = function (xmlString) {\n    var errors = [];\n\n    try {\n      errors = libsbgnjs.Sbgn.doValidation(xmlString);\n    } catch (err) {\n      throw new Error(\"Could not do validation. \" + err);\n    }\n\n    return errors;\n  };\n\n  return sbgnmlToJson;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/sbgnml-to-json-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/sbgnml-to-sbml-converter-factory.js":
/*!***********************************************************!*\
  !*** ./src/utilities/sbgnml-to-sbml-converter-factory.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var jsonToSbgnml, elementUtilities, cy;\n\n  function sbgnmlToSbml(param) {\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    elementUtilities = param.elementUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n\n  sbgnmlToSbml.convert = function (xml, callback) {\n    var conversionApiUrl = \"https://minerva-service.lcsb.uni.lu/minerva/api/convert/SBGN-ML:SBML\";\n    return $.ajax({\n      type: 'post',\n      url: conversionApiUrl,\n      contentType: \"text/xml; charset=UTF-8\",\n      data: xml,\n      dataType: \"text\",\n      success: function success(data, textStatus, xhr) {\n        if (xhr.status !== 200) {\n          callback({\n            result: false,\n            error: data,\n            message: \"Invalid response code: \" + xhr.status\n          });\n        } else {\n          callback({\n            result: true,\n            message: data,\n            error: \"\"\n          });\n        }\n      },\n      error: function error(_error) {\n        callback({\n          result: false,\n          error: _error,\n          message: \"\"\n        });\n      },\n      fail: function fail(error) {\n        callback({\n          result: false,\n          error: error,\n          message: \"\"\n        });\n      }\n    });\n  };\n\n  return sbgnmlToSbml;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vc3JjL3V0aWxpdGllcy9zYmdubWwtdG8tc2JtbC1jb252ZXJ0ZXItZmFjdG9yeS5qcz80ZWMwIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJqc29uVG9TYmdubWwiLCJlbGVtZW50VXRpbGl0aWVzIiwiY3kiLCJzYmdubWxUb1NibWwiLCJwYXJhbSIsImpzb25Ub1NiZ25tbENvbnZlcnRlciIsInNiZ25DeUluc3RhbmNlIiwiZ2V0Q3kiLCJjb252ZXJ0IiwieG1sIiwiY2FsbGJhY2siLCJjb252ZXJzaW9uQXBpVXJsIiwiJCIsImFqYXgiLCJ0eXBlIiwidXJsIiwiY29udGVudFR5cGUiLCJkYXRhIiwiZGF0YVR5cGUiLCJzdWNjZXNzIiwidGV4dFN0YXR1cyIsInhociIsInN0YXR1cyIsInJlc3VsdCIsImVycm9yIiwibWVzc2FnZSIsImZhaWwiXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsWUFBWTtBQUV6QixNQUFJQyxZQUFKLEVBQWtCQyxnQkFBbEIsRUFBb0NDLEVBQXBDOztBQUVBLFdBQVNDLFlBQVQsQ0FBc0JDLEtBQXRCLEVBQTZCO0FBQ3pCSixJQUFBQSxZQUFZLEdBQUdJLEtBQUssQ0FBQ0MscUJBQXJCO0FBQ0FKLElBQUFBLGdCQUFnQixHQUFHRyxLQUFLLENBQUNILGdCQUF6QjtBQUNBQyxJQUFBQSxFQUFFLEdBQUdFLEtBQUssQ0FBQ0UsY0FBTixDQUFxQkMsS0FBckIsRUFBTDtBQUNIOztBQUdESixFQUFBQSxZQUFZLENBQUNLLE9BQWIsR0FBdUIsVUFBVUMsR0FBVixFQUFlQyxRQUFmLEVBQXlCO0FBQzVDLFFBQUlDLGdCQUFnQixHQUFHLHNFQUF2QjtBQUVBLFdBQU9DLENBQUMsQ0FBQ0MsSUFBRixDQUFPO0FBQ1ZDLE1BQUFBLElBQUksRUFBRSxNQURJO0FBRVZDLE1BQUFBLEdBQUcsRUFBRUosZ0JBRks7QUFHVkssTUFBQUEsV0FBVyxFQUFFLHlCQUhIO0FBSVZDLE1BQUFBLElBQUksRUFBRVIsR0FKSTtBQUtWUyxNQUFBQSxRQUFRLEVBQUUsTUFMQTtBQU1WQyxNQUFBQSxPQUFPLEVBQUUsaUJBQVVGLElBQVYsRUFBZ0JHLFVBQWhCLEVBQTRCQyxHQUE1QixFQUFpQztBQUN0QyxZQUFJQSxHQUFHLENBQUNDLE1BQUosS0FBZSxHQUFuQixFQUF3QjtBQUNwQlosVUFBQUEsUUFBUSxDQUFDO0FBQUNhLFlBQUFBLE1BQU0sRUFBRSxLQUFUO0FBQWdCQyxZQUFBQSxLQUFLLEVBQUVQLElBQXZCO0FBQTZCUSxZQUFBQSxPQUFPLEVBQUUsNEJBQTRCSixHQUFHLENBQUNDO0FBQXRFLFdBQUQsQ0FBUjtBQUNILFNBRkQsTUFFTztBQUNIWixVQUFBQSxRQUFRLENBQUM7QUFBQ2EsWUFBQUEsTUFBTSxFQUFFLElBQVQ7QUFBZUUsWUFBQUEsT0FBTyxFQUFFUixJQUF4QjtBQUE4Qk8sWUFBQUEsS0FBSyxFQUFFO0FBQXJDLFdBQUQsQ0FBUjtBQUNIO0FBQ0osT0FaUztBQWFWQSxNQUFBQSxLQUFLLEVBQUUsZUFBVUEsTUFBVixFQUFpQjtBQUNwQmQsUUFBQUEsUUFBUSxDQUFDO0FBQUNhLFVBQUFBLE1BQU0sRUFBRSxLQUFUO0FBQWdCQyxVQUFBQSxLQUFLLEVBQUVBLE1BQXZCO0FBQThCQyxVQUFBQSxPQUFPLEVBQUU7QUFBdkMsU0FBRCxDQUFSO0FBQ0gsT0FmUztBQWdCVkMsTUFBQUEsSUFBSSxFQUFFLGNBQVVGLEtBQVYsRUFBaUI7QUFDbkJkLFFBQUFBLFFBQVEsQ0FBQztBQUFDYSxVQUFBQSxNQUFNLEVBQUUsS0FBVDtBQUFnQkMsVUFBQUEsS0FBSyxFQUFFQSxLQUF2QjtBQUE4QkMsVUFBQUEsT0FBTyxFQUFFO0FBQXZDLFNBQUQsQ0FBUjtBQUNIO0FBbEJTLEtBQVAsQ0FBUDtBQW9CSCxHQXZCRDs7QUF5QkEsU0FBT3RCLFlBQVA7QUFFSCxDQXRDRCIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xuXG4gICAgdmFyIGpzb25Ub1NiZ25tbCwgZWxlbWVudFV0aWxpdGllcywgY3k7XG5cbiAgICBmdW5jdGlvbiBzYmdubWxUb1NibWwocGFyYW0pIHtcbiAgICAgICAganNvblRvU2Jnbm1sID0gcGFyYW0uanNvblRvU2Jnbm1sQ29udmVydGVyO1xuICAgICAgICBlbGVtZW50VXRpbGl0aWVzID0gcGFyYW0uZWxlbWVudFV0aWxpdGllcztcbiAgICAgICAgY3kgPSBwYXJhbS5zYmduQ3lJbnN0YW5jZS5nZXRDeSgpO1xuICAgIH1cblxuXG4gICAgc2Jnbm1sVG9TYm1sLmNvbnZlcnQgPSBmdW5jdGlvbiAoeG1sLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgY29udmVyc2lvbkFwaVVybCA9IFwiaHR0cHM6Ly9taW5lcnZhLXNlcnZpY2UubGNzYi51bmkubHUvbWluZXJ2YS9hcGkvY29udmVydC9TQkdOLU1MOlNCTUxcIjtcblxuICAgICAgICByZXR1cm4gJC5hamF4KHtcbiAgICAgICAgICAgIHR5cGU6ICdwb3N0JyxcbiAgICAgICAgICAgIHVybDogY29udmVyc2lvbkFwaVVybCxcbiAgICAgICAgICAgIGNvbnRlbnRUeXBlOiBcInRleHQveG1sOyBjaGFyc2V0PVVURi04XCIsXG4gICAgICAgICAgICBkYXRhOiB4bWwsXG4gICAgICAgICAgICBkYXRhVHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZGF0YSwgdGV4dFN0YXR1cywgeGhyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgIT09IDIwMCkge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh7cmVzdWx0OiBmYWxzZSwgZXJyb3I6IGRhdGEsIG1lc3NhZ2U6IFwiSW52YWxpZCByZXNwb25zZSBjb2RlOiBcIiArIHhoci5zdGF0dXN9KTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh7cmVzdWx0OiB0cnVlLCBtZXNzYWdlOiBkYXRhLCBlcnJvcjogXCJcIn0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soe3Jlc3VsdDogZmFsc2UsIGVycm9yOiBlcnJvciwgbWVzc2FnZTogXCJcIn0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZhaWw6IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHtyZXN1bHQ6IGZhbHNlLCBlcnJvcjogZXJyb3IsIG1lc3NhZ2U6IFwiXCJ9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgcmV0dXJuIHNiZ25tbFRvU2JtbDtcblxufVxuICAiXSwiZmlsZSI6Ii4vc3JjL3V0aWxpdGllcy9zYmdubWwtdG8tc2JtbC1jb252ZXJ0ZXItZmFjdG9yeS5qcy5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/utilities/sbgnml-to-sbml-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/sbml-to-sbgnml-converter-factory.js":
/*!***********************************************************!*\
  !*** ./src/utilities/sbml-to-sbgnml-converter-factory.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("module.exports = function () {\n  var jsonToSbgnml, elementUtilities, cy;\n\n  function sbmlToSbgnml(param) {\n    jsonToSbgnml = param.jsonToSbgnmlConverter;\n    elementUtilities = param.elementUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n\n  sbmlToSbgnml.convert = function (xml, callback) {\n    var conversionApiUrl = \"https://minerva-service.lcsb.uni.lu/minerva/api/convert/SBML:SBGN-ML\";\n    return $.ajax({\n      type: 'post',\n      url: conversionApiUrl,\n      contentType: \"text/xml; charset=UTF-8\",\n      data: xml,\n      dataType: \"text\",\n      success: function success(data, textStatus, xhr) {\n        if (xhr.status !== 200) {\n          callback({\n            result: false,\n            error: data,\n            message: \"Invalid response code: \" + xhr.status\n          });\n        } else {\n          callback({\n            result: true,\n            message: data,\n            error: \"\"\n          });\n        }\n      },\n      error: function error(_error) {\n        callback({\n          result: false,\n          error: _error,\n          message: \"\"\n        });\n      },\n      fail: function fail(error) {\n        callback({\n          result: false,\n          error: error,\n          message: \"\"\n        });\n      }\n    });\n  };\n\n  return sbmlToSbgnml;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vc3JjL3V0aWxpdGllcy9zYm1sLXRvLXNiZ25tbC1jb252ZXJ0ZXItZmFjdG9yeS5qcz80ZjJhIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJqc29uVG9TYmdubWwiLCJlbGVtZW50VXRpbGl0aWVzIiwiY3kiLCJzYm1sVG9TYmdubWwiLCJwYXJhbSIsImpzb25Ub1NiZ25tbENvbnZlcnRlciIsInNiZ25DeUluc3RhbmNlIiwiZ2V0Q3kiLCJjb252ZXJ0IiwieG1sIiwiY2FsbGJhY2siLCJjb252ZXJzaW9uQXBpVXJsIiwiJCIsImFqYXgiLCJ0eXBlIiwidXJsIiwiY29udGVudFR5cGUiLCJkYXRhIiwiZGF0YVR5cGUiLCJzdWNjZXNzIiwidGV4dFN0YXR1cyIsInhociIsInN0YXR1cyIsInJlc3VsdCIsImVycm9yIiwibWVzc2FnZSIsImZhaWwiXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsWUFBVztBQUUxQixNQUFJQyxZQUFKLEVBQWtCQyxnQkFBbEIsRUFBb0NDLEVBQXBDOztBQUVBLFdBQVNDLFlBQVQsQ0FBc0JDLEtBQXRCLEVBQTZCO0FBQzNCSixJQUFBQSxZQUFZLEdBQUdJLEtBQUssQ0FBQ0MscUJBQXJCO0FBQ0FKLElBQUFBLGdCQUFnQixHQUFHRyxLQUFLLENBQUNILGdCQUF6QjtBQUNBQyxJQUFBQSxFQUFFLEdBQUdFLEtBQUssQ0FBQ0UsY0FBTixDQUFxQkMsS0FBckIsRUFBTDtBQUNEOztBQUdESixFQUFBQSxZQUFZLENBQUNLLE9BQWIsR0FBdUIsVUFBVUMsR0FBVixFQUFlQyxRQUFmLEVBQXlCO0FBQzVDLFFBQUlDLGdCQUFnQixHQUFHLHNFQUF2QjtBQUVBLFdBQU9DLENBQUMsQ0FBQ0MsSUFBRixDQUFPO0FBQ1ZDLE1BQUFBLElBQUksRUFBRSxNQURJO0FBRVZDLE1BQUFBLEdBQUcsRUFBRUosZ0JBRks7QUFHVkssTUFBQUEsV0FBVyxFQUFFLHlCQUhIO0FBSVZDLE1BQUFBLElBQUksRUFBRVIsR0FKSTtBQUtWUyxNQUFBQSxRQUFRLEVBQUUsTUFMQTtBQU1WQyxNQUFBQSxPQUFPLEVBQUUsaUJBQVVGLElBQVYsRUFBZ0JHLFVBQWhCLEVBQTRCQyxHQUE1QixFQUFpQztBQUN0QyxZQUFJQSxHQUFHLENBQUNDLE1BQUosS0FBZSxHQUFuQixFQUF3QjtBQUNwQlosVUFBQUEsUUFBUSxDQUFDO0FBQUNhLFlBQUFBLE1BQU0sRUFBRSxLQUFUO0FBQWdCQyxZQUFBQSxLQUFLLEVBQUVQLElBQXZCO0FBQTZCUSxZQUFBQSxPQUFPLEVBQUUsNEJBQTRCSixHQUFHLENBQUNDO0FBQXRFLFdBQUQsQ0FBUjtBQUNILFNBRkQsTUFFTztBQUNIWixVQUFBQSxRQUFRLENBQUM7QUFBQ2EsWUFBQUEsTUFBTSxFQUFFLElBQVQ7QUFBZUUsWUFBQUEsT0FBTyxFQUFFUixJQUF4QjtBQUE4Qk8sWUFBQUEsS0FBSyxFQUFFO0FBQXJDLFdBQUQsQ0FBUjtBQUNIO0FBQ0osT0FaUztBQWFWQSxNQUFBQSxLQUFLLEVBQUUsZUFBVUEsTUFBVixFQUFpQjtBQUNwQmQsUUFBQUEsUUFBUSxDQUFDO0FBQUNhLFVBQUFBLE1BQU0sRUFBRSxLQUFUO0FBQWdCQyxVQUFBQSxLQUFLLEVBQUVBLE1BQXZCO0FBQThCQyxVQUFBQSxPQUFPLEVBQUU7QUFBdkMsU0FBRCxDQUFSO0FBQ0gsT0FmUztBQWdCVkMsTUFBQUEsSUFBSSxFQUFFLGNBQVVGLEtBQVYsRUFBaUI7QUFDbkJkLFFBQUFBLFFBQVEsQ0FBQztBQUFDYSxVQUFBQSxNQUFNLEVBQUUsS0FBVDtBQUFnQkMsVUFBQUEsS0FBSyxFQUFFQSxLQUF2QjtBQUE4QkMsVUFBQUEsT0FBTyxFQUFFO0FBQXZDLFNBQUQsQ0FBUjtBQUNIO0FBbEJTLEtBQVAsQ0FBUDtBQXFCSCxHQXhCRDs7QUEwQkEsU0FBT3RCLFlBQVA7QUFFRCxDQXZDRCIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgdmFyIGpzb25Ub1NiZ25tbCwgZWxlbWVudFV0aWxpdGllcywgY3k7XG5cbiAgZnVuY3Rpb24gc2JtbFRvU2Jnbm1sKHBhcmFtKSB7XG4gICAganNvblRvU2Jnbm1sID0gcGFyYW0uanNvblRvU2Jnbm1sQ29udmVydGVyO1xuICAgIGVsZW1lbnRVdGlsaXRpZXMgPSBwYXJhbS5lbGVtZW50VXRpbGl0aWVzO1xuICAgIGN5ID0gcGFyYW0uc2JnbkN5SW5zdGFuY2UuZ2V0Q3koKTtcbiAgfVxuXG5cbiAgc2JtbFRvU2Jnbm1sLmNvbnZlcnQgPSBmdW5jdGlvbiAoeG1sLCBjYWxsYmFjaykge1xuICAgICAgdmFyIGNvbnZlcnNpb25BcGlVcmwgPSBcImh0dHBzOi8vbWluZXJ2YS1zZXJ2aWNlLmxjc2IudW5pLmx1L21pbmVydmEvYXBpL2NvbnZlcnQvU0JNTDpTQkdOLU1MXCI7XG5cbiAgICAgIHJldHVybiAkLmFqYXgoe1xuICAgICAgICAgIHR5cGU6ICdwb3N0JyxcbiAgICAgICAgICB1cmw6IGNvbnZlcnNpb25BcGlVcmwsXG4gICAgICAgICAgY29udGVudFR5cGU6IFwidGV4dC94bWw7IGNoYXJzZXQ9VVRGLThcIixcbiAgICAgICAgICBkYXRhOiB4bWwsXG4gICAgICAgICAgZGF0YVR5cGU6IFwidGV4dFwiLFxuICAgICAgICAgIHN1Y2Nlc3M6IGZ1bmN0aW9uIChkYXRhLCB0ZXh0U3RhdHVzLCB4aHIpIHtcbiAgICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgIT09IDIwMCkge1xuICAgICAgICAgICAgICAgICAgY2FsbGJhY2soe3Jlc3VsdDogZmFsc2UsIGVycm9yOiBkYXRhLCBtZXNzYWdlOiBcIkludmFsaWQgcmVzcG9uc2UgY29kZTogXCIgKyB4aHIuc3RhdHVzfSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBjYWxsYmFjayh7cmVzdWx0OiB0cnVlLCBtZXNzYWdlOiBkYXRhLCBlcnJvcjogXCJcIn0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgICAgICAgIGNhbGxiYWNrKHtyZXN1bHQ6IGZhbHNlLCBlcnJvcjogZXJyb3IsIG1lc3NhZ2U6IFwiXCJ9KTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGZhaWw6IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgICBjYWxsYmFjayh7cmVzdWx0OiBmYWxzZSwgZXJyb3I6IGVycm9yLCBtZXNzYWdlOiBcIlwifSk7XG4gICAgICAgICAgfSxcbiAgICAgIH0pXG4gICAgICBcbiAgfVxuXG4gIHJldHVybiBzYm1sVG9TYmdubWw7XG5cbn1cbiJdLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL3NibWwtdG8tc2Jnbm1sLWNvbnZlcnRlci1mYWN0b3J5LmpzLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/utilities/sbml-to-sbgnml-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/sif-to-json-converter-factory.js":
/*!********************************************************!*\
  !*** ./src/utilities/sif-to-json-converter-factory.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* provided dependency */ var console = __webpack_require__(/*! console-browserify */ \"console-browserify\");\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar tdParser = __webpack_require__(/*! ./tab-delimeted-parser */ \"./src/utilities/tab-delimeted-parser.js\");\n\nfunction strToSet(str, splitBy) {\n  var set = {};\n  var list = str ? str.split(splitBy) : [];\n  list.forEach(function (member) {\n    set[member] = true;\n  });\n  return set;\n}\n\nfunction getEmptyGraphData() {\n  return {\n    nodes: [],\n    edges: []\n  };\n}\n\nmodule.exports = function () {\n  var elementUtilities;\n\n  function sifToJson(param) {\n    elementUtilities = param.elementUtilities;\n  }\n\n  sifToJson.initGraphVariables = function () {\n    sifToJson.graphData = getEmptyGraphData();\n    sifToJson.nameToNode = {};\n    sifToJson.keyToEdge = {}; // set of nodes that are connected to an edge\n\n    sifToJson.nodeWithSpecifiedClass = {};\n  };\n\n  sifToJson.defaultNodeType = 'SIF macromolecule';\n\n  sifToJson.mergeGraphData = function () {\n    return [].concat(_toConsumableArray(sifToJson.graphData.nodes), _toConsumableArray(sifToJson.graphData.edges));\n  };\n\n  sifToJson.convert = function (graphText) {\n    elementUtilities.fileFormat = 'sif';\n    elementUtilities.mapType = 'SIF';\n    sifToJson.initGraphVariables();\n\n    if (graphText == undefined) {\n      return sifToJson.graphData;\n    }\n\n    var lines = tdParser.getLinesArray(graphText.toString());\n    lines.forEach(function (line) {\n      var tabs = tdParser.getTabsArray(line); // line represents a node\n\n      if (tabs.length === 1) {\n        var nodeName = tabs[0]; // create the node if does not exist yet\n        // if the node is just created it will have the default node class\n\n        sifToJson.getOrCreateNode(nodeName);\n      } // line represents an edge and the connected nodes\n      else {\n          var srcName = tabs[0];\n          var edgeType = tabs[1];\n          var tgtName = tabs[2];\n          var pcIDSet = strToSet(tabs[3], /;| /);\n          var siteLocSet = strToSet(tabs[4], ';');\n          var srcClass = sifToJson.getNodeClass(edgeType, 'src');\n          var tgtClass = sifToJson.getNodeClass(edgeType, 'tgt'); // create nodes if they do not exist yet\n          // if the node already exists the node type and so the default values\n          // will be updated\n\n          sifToJson.getOrCreateNode(srcName, srcClass);\n          sifToJson.getOrCreateNode(tgtName, tgtClass); // create the edge if it does not exist yet\n\n          sifToJson.getOrCreateEdge(srcName, edgeType, tgtName, pcIDSet, siteLocSet);\n        }\n    });\n    return sifToJson.mergeGraphData();\n  };\n\n  sifToJson.getNodeByName = function (name) {\n    return sifToJson.nameToNode[name];\n  };\n\n  sifToJson.getEdgeByProps = function (srcName, type, tgtName) {\n    var key = sifToJson.calculateEdgeKey(srcName, type, tgtName);\n    return sifToJson.keyToEdge[key];\n  };\n\n  sifToJson.mapNodeToName = function (node, name) {\n    sifToJson.nameToNode[name] = node;\n  };\n\n  sifToJson.mapEdgeToKey = function (edge, key) {\n    sifToJson.keyToEdge[key] = edge;\n  };\n\n  sifToJson.calculateEdgeKey = function (src, type, tgt) {\n    return [src, type, tgt].join(' ');\n  };\n\n  sifToJson.getOrCreateNode = function (name, className) {\n    // save if class name parameter is set\n    var classNameSpecified = !!className;\n    className = className || sifToJson.defaultNodeType;\n    var node = sifToJson.getNodeByName(name);\n    var defaults = elementUtilities.getDefaultProperties(className);\n\n    var updateWithDefaults = function updateWithDefaults() {\n      elementUtilities.extendNodeDataWithClassDefaults(node.data, className);\n      node.data.bbox.h = defaults.height;\n\n      if (elementUtilities.canHaveSBGNLabel(className)) {\n        var isDynamicLabel = sifToJson.getMapProperty('adjustNodeLabelFontSizeAutomatically');\n        var fontSize;\n        var fontFamily = node.data['font-family'];\n\n        if (isDynamicLabel) {\n          var dynamicLabelSize = sifToJson.getMapProperty('dynamicLabelSize');\n          var coeff = elementUtilities.getDynamicLabelSizeCoefficient(dynamicLabelSize);\n          var obj = {\n            height: node.data.bbox.h,\n            \"class\": className\n          };\n          fontSize = elementUtilities.getDynamicLabelTextSize(obj, coeff);\n        } else {\n          fontSize = node.data['font-size'];\n        }\n\n        var max = 250;\n        node.data.bbox.w = elementUtilities.getWidthByContent(name, fontFamily, fontSize, {\n          max: max\n        });\n      } else {\n        node.data.bbox.w = defaults.width;\n      }\n    };\n\n    if (node == undefined) {\n      var uid = elementUtilities.generateNodeId();\n      node = {};\n      node.data = {\n        id: uid,\n        label: name,\n        \"class\": className,\n        bbox: {\n          x: 0,\n          y: 0\n        },\n        statesandinfos: [],\n        ports: []\n      };\n      updateWithDefaults();\n      sifToJson.mapNodeToName(node, name);\n      sifToJson.graphData.nodes.push(node);\n    } // if class name parameter is set and the already existing node has a different\n    // class name check if the existing node has a specified class or just used the\n    // default one because it was not coming from an edge.\n    // In first case give a warning and do not update the class,\n    // in second case update the class and the node data with defaults\n    else if (classNameSpecified && node.data[\"class\"] !== className) {\n        if (sifToJson.nodeWithSpecifiedClass[name]) {\n          console.warn('Type of node ' + name + ' cannot be updated as ' + className + ' because it was already specified as ' + node.data[\"class\"]);\n        } else {\n          node.data[\"class\"] = className;\n          updateWithDefaults();\n        }\n      }\n\n    if (classNameSpecified) {\n      sifToJson.nodeWithSpecifiedClass[name] = true;\n    }\n\n    return node;\n  };\n\n  sifToJson.getOrCreateEdge = function (srcName, type, tgtName, pcIDSet, siteLocSet) {\n    var edge = sifToJson.getEdgeByProps(srcName, type, tgtName);\n\n    if (edge == undefined) {\n      var uid = elementUtilities.generateEdgeId();\n      var source = sifToJson.getNodeByName(srcName).data.id;\n      var target = sifToJson.getNodeByName(tgtName).data.id;\n      edge = {};\n      edge.data = {\n        id: uid,\n        pcIDSet: pcIDSet,\n        siteLocSet: siteLocSet,\n        source: source,\n        target: target,\n        \"class\": type\n      };\n      elementUtilities.extendEdgeDataWithClassDefaults(edge.data, type);\n      var key = sifToJson.calculateEdgeKey(srcName, type, tgtName);\n      sifToJson.mapEdgeToKey(edge, key);\n      sifToJson.graphData.edges.push(edge);\n    }\n\n    return edge;\n  };\n\n  sifToJson.getNodeClass = function (edgeType, role) {\n    var type;\n\n    switch (edgeType) {\n      case 'controls-production-of':\n      case 'controls-transport-of-chemical':\n        type = role === 'src' ? 'SIF macromolecule' : 'SIF simple chemical';\n        break;\n\n      case 'consumption-controled-by':\n      case 'chemical-affects':\n        type = role === 'src' ? 'SIF simple chemical' : 'SIF macromolecule';\n        break;\n\n      case 'reacts-with':\n      case 'used-to-produce':\n        type = 'SIF simple chemical';\n        break;\n\n      default:\n        type = 'SIF macromolecule';\n        break;\n    }\n\n    return type;\n  };\n\n  sifToJson.getMapProperty = function (propName) {\n    return sifToJson.mapPropertiesToObj()['mapProperties'][propName];\n  };\n\n  sifToJson.mapPropertiesToObj = function () {\n    return {\n      mapProperties: {\n        dynamicLabelSize: 'large',\n        adjustNodeLabelFontSizeAutomatically: true\n      }\n    };\n  };\n\n  return sifToJson;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vc3JjL3V0aWxpdGllcy9zaWYtdG8tanNvbi1jb252ZXJ0ZXItZmFjdG9yeS5qcz80N2VkIl0sIm5hbWVzIjpbInRkUGFyc2VyIiwicmVxdWlyZSIsInN0clRvU2V0Iiwic3RyIiwic3BsaXRCeSIsInNldCIsImxpc3QiLCJzcGxpdCIsImZvckVhY2giLCJtZW1iZXIiLCJnZXRFbXB0eUdyYXBoRGF0YSIsIm5vZGVzIiwiZWRnZXMiLCJtb2R1bGUiLCJleHBvcnRzIiwiZWxlbWVudFV0aWxpdGllcyIsInNpZlRvSnNvbiIsInBhcmFtIiwiaW5pdEdyYXBoVmFyaWFibGVzIiwiZ3JhcGhEYXRhIiwibmFtZVRvTm9kZSIsImtleVRvRWRnZSIsIm5vZGVXaXRoU3BlY2lmaWVkQ2xhc3MiLCJkZWZhdWx0Tm9kZVR5cGUiLCJtZXJnZUdyYXBoRGF0YSIsImNvbnZlcnQiLCJncmFwaFRleHQiLCJmaWxlRm9ybWF0IiwibWFwVHlwZSIsInVuZGVmaW5lZCIsImxpbmVzIiwiZ2V0TGluZXNBcnJheSIsInRvU3RyaW5nIiwibGluZSIsInRhYnMiLCJnZXRUYWJzQXJyYXkiLCJsZW5ndGgiLCJub2RlTmFtZSIsImdldE9yQ3JlYXRlTm9kZSIsInNyY05hbWUiLCJlZGdlVHlwZSIsInRndE5hbWUiLCJwY0lEU2V0Iiwic2l0ZUxvY1NldCIsInNyY0NsYXNzIiwiZ2V0Tm9kZUNsYXNzIiwidGd0Q2xhc3MiLCJnZXRPckNyZWF0ZUVkZ2UiLCJnZXROb2RlQnlOYW1lIiwibmFtZSIsImdldEVkZ2VCeVByb3BzIiwidHlwZSIsImtleSIsImNhbGN1bGF0ZUVkZ2VLZXkiLCJtYXBOb2RlVG9OYW1lIiwibm9kZSIsIm1hcEVkZ2VUb0tleSIsImVkZ2UiLCJzcmMiLCJ0Z3QiLCJqb2luIiwiY2xhc3NOYW1lIiwiY2xhc3NOYW1lU3BlY2lmaWVkIiwiZGVmYXVsdHMiLCJnZXREZWZhdWx0UHJvcGVydGllcyIsInVwZGF0ZVdpdGhEZWZhdWx0cyIsImV4dGVuZE5vZGVEYXRhV2l0aENsYXNzRGVmYXVsdHMiLCJkYXRhIiwiYmJveCIsImgiLCJoZWlnaHQiLCJjYW5IYXZlU0JHTkxhYmVsIiwiaXNEeW5hbWljTGFiZWwiLCJnZXRNYXBQcm9wZXJ0eSIsImZvbnRTaXplIiwiZm9udEZhbWlseSIsImR5bmFtaWNMYWJlbFNpemUiLCJjb2VmZiIsImdldER5bmFtaWNMYWJlbFNpemVDb2VmZmljaWVudCIsIm9iaiIsImdldER5bmFtaWNMYWJlbFRleHRTaXplIiwibWF4IiwidyIsImdldFdpZHRoQnlDb250ZW50Iiwid2lkdGgiLCJ1aWQiLCJnZW5lcmF0ZU5vZGVJZCIsImlkIiwibGFiZWwiLCJ4IiwieSIsInN0YXRlc2FuZGluZm9zIiwicG9ydHMiLCJwdXNoIiwiY29uc29sZSIsIndhcm4iLCJnZW5lcmF0ZUVkZ2VJZCIsInNvdXJjZSIsInRhcmdldCIsImV4dGVuZEVkZ2VEYXRhV2l0aENsYXNzRGVmYXVsdHMiLCJyb2xlIiwicHJvcE5hbWUiLCJtYXBQcm9wZXJ0aWVzVG9PYmoiLCJtYXBQcm9wZXJ0aWVzIiwiYWRqdXN0Tm9kZUxhYmVsRm9udFNpemVBdXRvbWF0aWNhbGx5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsUUFBUSxHQUFHQyxtQkFBTyxDQUFDLHVFQUFELENBQXRCOztBQUVBLFNBQVNDLFFBQVQsQ0FBbUJDLEdBQW5CLEVBQXdCQyxPQUF4QixFQUFrQztBQUNoQyxNQUFJQyxHQUFHLEdBQUcsRUFBVjtBQUNBLE1BQUlDLElBQUksR0FBR0gsR0FBRyxHQUFHQSxHQUFHLENBQUNJLEtBQUosQ0FBV0gsT0FBWCxDQUFILEdBQTBCLEVBQXhDO0FBRUFFLE1BQUksQ0FBQ0UsT0FBTCxDQUFjLFVBQVVDLE1BQVYsRUFBbUI7QUFDL0JKLE9BQUcsQ0FBRUksTUFBRixDQUFILEdBQWdCLElBQWhCO0FBQ0QsR0FGRDtBQUlBLFNBQU9KLEdBQVA7QUFDRDs7QUFFRCxTQUFTSyxpQkFBVCxHQUE2QjtBQUMzQixTQUFPO0FBQUVDLFNBQUssRUFBRSxFQUFUO0FBQWFDLFNBQUssRUFBRTtBQUFwQixHQUFQO0FBQ0Q7O0FBRURDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixZQUFXO0FBRTFCLE1BQUlDLGdCQUFKOztBQUVBLFdBQVNDLFNBQVQsQ0FBbUJDLEtBQW5CLEVBQTBCO0FBQ3hCRixvQkFBZ0IsR0FBR0UsS0FBSyxDQUFDRixnQkFBekI7QUFDRDs7QUFFREMsV0FBUyxDQUFDRSxrQkFBVixHQUErQixZQUFXO0FBQ3hDRixhQUFTLENBQUNHLFNBQVYsR0FBc0JULGlCQUFpQixFQUF2QztBQUNBTSxhQUFTLENBQUNJLFVBQVYsR0FBdUIsRUFBdkI7QUFDQUosYUFBUyxDQUFDSyxTQUFWLEdBQXNCLEVBQXRCLENBSHdDLENBSXhDOztBQUNBTCxhQUFTLENBQUNNLHNCQUFWLEdBQW1DLEVBQW5DO0FBQ0QsR0FORDs7QUFRQU4sV0FBUyxDQUFDTyxlQUFWLEdBQTRCLG1CQUE1Qjs7QUFFQVAsV0FBUyxDQUFDUSxjQUFWLEdBQTJCLFlBQVc7QUFDcEMsd0NBQVlSLFNBQVMsQ0FBQ0csU0FBVixDQUFvQlIsS0FBaEMsc0JBQTBDSyxTQUFTLENBQUNHLFNBQVYsQ0FBb0JQLEtBQTlEO0FBQ0QsR0FGRDs7QUFJQUksV0FBUyxDQUFDUyxPQUFWLEdBQW9CLFVBQVVDLFNBQVYsRUFBc0I7QUFDeENYLG9CQUFnQixDQUFDWSxVQUFqQixHQUE4QixLQUE5QjtBQUNBWixvQkFBZ0IsQ0FBQ2EsT0FBakIsR0FBMkIsS0FBM0I7QUFFQVosYUFBUyxDQUFDRSxrQkFBVjs7QUFFQSxRQUFLUSxTQUFTLElBQUlHLFNBQWxCLEVBQThCO0FBQzVCLGFBQU9iLFNBQVMsQ0FBQ0csU0FBakI7QUFDRDs7QUFFRCxRQUFJVyxLQUFLLEdBQUc5QixRQUFRLENBQUMrQixhQUFULENBQXdCTCxTQUFTLENBQUNNLFFBQVYsRUFBeEIsQ0FBWjtBQUVBRixTQUFLLENBQUN0QixPQUFOLENBQWUsVUFBVXlCLElBQVYsRUFBaUI7QUFDOUIsVUFBSUMsSUFBSSxHQUFHbEMsUUFBUSxDQUFDbUMsWUFBVCxDQUF1QkYsSUFBdkIsQ0FBWCxDQUQ4QixDQUc5Qjs7QUFDQSxVQUFLQyxJQUFJLENBQUNFLE1BQUwsS0FBZ0IsQ0FBckIsRUFBeUI7QUFDdkIsWUFBSUMsUUFBUSxHQUFHSCxJQUFJLENBQUUsQ0FBRixDQUFuQixDQUR1QixDQUV2QjtBQUNBOztBQUNBbEIsaUJBQVMsQ0FBQ3NCLGVBQVYsQ0FBMkJELFFBQTNCO0FBQ0QsT0FMRCxDQU1BO0FBTkEsV0FPSztBQUNILGNBQUlFLE9BQU8sR0FBR0wsSUFBSSxDQUFFLENBQUYsQ0FBbEI7QUFDQSxjQUFJTSxRQUFRLEdBQUdOLElBQUksQ0FBRSxDQUFGLENBQW5CO0FBQ0EsY0FBSU8sT0FBTyxHQUFHUCxJQUFJLENBQUUsQ0FBRixDQUFsQjtBQUNBLGNBQUlRLE9BQU8sR0FBR3hDLFFBQVEsQ0FBRWdDLElBQUksQ0FBRSxDQUFGLENBQU4sRUFBYSxLQUFiLENBQXRCO0FBQ0EsY0FBSVMsVUFBVSxHQUFHekMsUUFBUSxDQUFFZ0MsSUFBSSxDQUFFLENBQUYsQ0FBTixFQUFhLEdBQWIsQ0FBekI7QUFFQSxjQUFJVSxRQUFRLEdBQUc1QixTQUFTLENBQUM2QixZQUFWLENBQXdCTCxRQUF4QixFQUFrQyxLQUFsQyxDQUFmO0FBQ0EsY0FBSU0sUUFBUSxHQUFHOUIsU0FBUyxDQUFDNkIsWUFBVixDQUF3QkwsUUFBeEIsRUFBa0MsS0FBbEMsQ0FBZixDQVJHLENBVUg7QUFDQTtBQUNBOztBQUNBeEIsbUJBQVMsQ0FBQ3NCLGVBQVYsQ0FBMkJDLE9BQTNCLEVBQW9DSyxRQUFwQztBQUNBNUIsbUJBQVMsQ0FBQ3NCLGVBQVYsQ0FBMkJHLE9BQTNCLEVBQW9DSyxRQUFwQyxFQWRHLENBZ0JIOztBQUNBOUIsbUJBQVMsQ0FBQytCLGVBQVYsQ0FBMkJSLE9BQTNCLEVBQW9DQyxRQUFwQyxFQUE4Q0MsT0FBOUMsRUFBdURDLE9BQXZELEVBQWdFQyxVQUFoRTtBQUNEO0FBQ0YsS0E5QkQ7QUFnQ0EsV0FBTzNCLFNBQVMsQ0FBQ1EsY0FBVixFQUFQO0FBQ0QsR0E3Q0Q7O0FBK0NBUixXQUFTLENBQUNnQyxhQUFWLEdBQTBCLFVBQVVDLElBQVYsRUFBaUI7QUFDekMsV0FBT2pDLFNBQVMsQ0FBQ0ksVUFBVixDQUFzQjZCLElBQXRCLENBQVA7QUFDRCxHQUZEOztBQUlBakMsV0FBUyxDQUFDa0MsY0FBVixHQUEyQixVQUFVWCxPQUFWLEVBQW1CWSxJQUFuQixFQUF5QlYsT0FBekIsRUFBbUM7QUFDNUQsUUFBSVcsR0FBRyxHQUFHcEMsU0FBUyxDQUFDcUMsZ0JBQVYsQ0FBNEJkLE9BQTVCLEVBQXFDWSxJQUFyQyxFQUEyQ1YsT0FBM0MsQ0FBVjtBQUNBLFdBQU96QixTQUFTLENBQUNLLFNBQVYsQ0FBcUIrQixHQUFyQixDQUFQO0FBQ0QsR0FIRDs7QUFLQXBDLFdBQVMsQ0FBQ3NDLGFBQVYsR0FBMEIsVUFBVUMsSUFBVixFQUFnQk4sSUFBaEIsRUFBdUI7QUFDL0NqQyxhQUFTLENBQUNJLFVBQVYsQ0FBc0I2QixJQUF0QixJQUErQk0sSUFBL0I7QUFDRCxHQUZEOztBQUlBdkMsV0FBUyxDQUFDd0MsWUFBVixHQUF5QixVQUFVQyxJQUFWLEVBQWdCTCxHQUFoQixFQUFzQjtBQUM3Q3BDLGFBQVMsQ0FBQ0ssU0FBVixDQUFxQitCLEdBQXJCLElBQTZCSyxJQUE3QjtBQUNELEdBRkQ7O0FBSUF6QyxXQUFTLENBQUNxQyxnQkFBVixHQUE2QixVQUFVSyxHQUFWLEVBQWVQLElBQWYsRUFBcUJRLEdBQXJCLEVBQTJCO0FBQ3RELFdBQU8sQ0FBRUQsR0FBRixFQUFPUCxJQUFQLEVBQWFRLEdBQWIsRUFBbUJDLElBQW5CLENBQXlCLEdBQXpCLENBQVA7QUFDRCxHQUZEOztBQUlBNUMsV0FBUyxDQUFDc0IsZUFBVixHQUE0QixVQUFVVyxJQUFWLEVBQWdCWSxTQUFoQixFQUE0QjtBQUN0RDtBQUNBLFFBQUlDLGtCQUFrQixHQUFHLENBQUMsQ0FBQ0QsU0FBM0I7QUFDQUEsYUFBUyxHQUFHQSxTQUFTLElBQUk3QyxTQUFTLENBQUNPLGVBQW5DO0FBRUEsUUFBSWdDLElBQUksR0FBR3ZDLFNBQVMsQ0FBQ2dDLGFBQVYsQ0FBeUJDLElBQXpCLENBQVg7QUFDQSxRQUFJYyxRQUFRLEdBQUdoRCxnQkFBZ0IsQ0FBQ2lELG9CQUFqQixDQUF1Q0gsU0FBdkMsQ0FBZjs7QUFFQSxRQUFJSSxrQkFBa0IsR0FBRyxTQUFyQkEsa0JBQXFCLEdBQVc7QUFDbENsRCxzQkFBZ0IsQ0FBQ21ELCtCQUFqQixDQUFrRFgsSUFBSSxDQUFDWSxJQUF2RCxFQUE2RE4sU0FBN0Q7QUFDQU4sVUFBSSxDQUFDWSxJQUFMLENBQVVDLElBQVYsQ0FBZUMsQ0FBZixHQUFtQk4sUUFBUSxDQUFDTyxNQUE1Qjs7QUFFQSxVQUFLdkQsZ0JBQWdCLENBQUN3RCxnQkFBakIsQ0FBbUNWLFNBQW5DLENBQUwsRUFBc0Q7QUFDcEQsWUFBSVcsY0FBYyxHQUFHeEQsU0FBUyxDQUFDeUQsY0FBVixDQUEwQixzQ0FBMUIsQ0FBckI7QUFFQSxZQUFJQyxRQUFKO0FBQ0EsWUFBSUMsVUFBVSxHQUFHcEIsSUFBSSxDQUFDWSxJQUFMLENBQVcsYUFBWCxDQUFqQjs7QUFFQSxZQUFLSyxjQUFMLEVBQXNCO0FBQ3BCLGNBQUlJLGdCQUFnQixHQUFHNUQsU0FBUyxDQUFDeUQsY0FBVixDQUEwQixrQkFBMUIsQ0FBdkI7QUFDQSxjQUFJSSxLQUFLLEdBQUc5RCxnQkFBZ0IsQ0FBQytELDhCQUFqQixDQUFpREYsZ0JBQWpELENBQVo7QUFDQSxjQUFJRyxHQUFHLEdBQUc7QUFDUlQsa0JBQU0sRUFBRWYsSUFBSSxDQUFDWSxJQUFMLENBQVVDLElBQVYsQ0FBZUMsQ0FEZjtBQUVSLHFCQUFPUjtBQUZDLFdBQVY7QUFJQWEsa0JBQVEsR0FBRzNELGdCQUFnQixDQUFDaUUsdUJBQWpCLENBQTBDRCxHQUExQyxFQUErQ0YsS0FBL0MsQ0FBWDtBQUNELFNBUkQsTUFTSztBQUNISCxrQkFBUSxHQUFHbkIsSUFBSSxDQUFDWSxJQUFMLENBQVcsV0FBWCxDQUFYO0FBQ0Q7O0FBRUQsWUFBSWMsR0FBRyxHQUFHLEdBQVY7QUFDQTFCLFlBQUksQ0FBQ1ksSUFBTCxDQUFVQyxJQUFWLENBQWVjLENBQWYsR0FBbUJuRSxnQkFBZ0IsQ0FBQ29FLGlCQUFqQixDQUFvQ2xDLElBQXBDLEVBQTBDMEIsVUFBMUMsRUFBc0RELFFBQXRELEVBQWdFO0FBQUVPLGFBQUcsRUFBSEE7QUFBRixTQUFoRSxDQUFuQjtBQUNELE9BckJELE1Bc0JLO0FBQ0gxQixZQUFJLENBQUNZLElBQUwsQ0FBVUMsSUFBVixDQUFlYyxDQUFmLEdBQW1CbkIsUUFBUSxDQUFDcUIsS0FBNUI7QUFDRDtBQUNGLEtBN0JEOztBQStCQSxRQUFLN0IsSUFBSSxJQUFJMUIsU0FBYixFQUF5QjtBQUN2QixVQUFJd0QsR0FBRyxHQUFHdEUsZ0JBQWdCLENBQUN1RSxjQUFqQixFQUFWO0FBQ0EvQixVQUFJLEdBQUcsRUFBUDtBQUVBQSxVQUFJLENBQUNZLElBQUwsR0FBWTtBQUNWb0IsVUFBRSxFQUFFRixHQURNO0FBRVZHLGFBQUssRUFBRXZDLElBRkc7QUFHVixpQkFBT1ksU0FIRztBQUlWTyxZQUFJLEVBQUU7QUFDSnFCLFdBQUMsRUFBRSxDQURDO0FBRUpDLFdBQUMsRUFBRTtBQUZDLFNBSkk7QUFRVkMsc0JBQWMsRUFBRSxFQVJOO0FBU1ZDLGFBQUssRUFBRTtBQVRHLE9BQVo7QUFZQTNCLHdCQUFrQjtBQUVsQmpELGVBQVMsQ0FBQ3NDLGFBQVYsQ0FBeUJDLElBQXpCLEVBQStCTixJQUEvQjtBQUNBakMsZUFBUyxDQUFDRyxTQUFWLENBQW9CUixLQUFwQixDQUEwQmtGLElBQTFCLENBQWdDdEMsSUFBaEM7QUFDRCxLQXBCRCxDQXFCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBekJBLFNBMEJLLElBQUtPLGtCQUFrQixJQUFJUCxJQUFJLENBQUNZLElBQUwsY0FBb0JOLFNBQS9DLEVBQTJEO0FBQzlELFlBQUs3QyxTQUFTLENBQUNNLHNCQUFWLENBQWtDMkIsSUFBbEMsQ0FBTCxFQUFnRDtBQUM5QzZDLGlCQUFPLENBQUNDLElBQVIsQ0FBYyxrQkFBa0I5QyxJQUFsQixHQUF5Qix3QkFBekIsR0FDQVksU0FEQSxHQUNZLHVDQURaLEdBQ3NETixJQUFJLENBQUNZLElBQUwsU0FEcEU7QUFFRCxTQUhELE1BSUs7QUFDSFosY0FBSSxDQUFDWSxJQUFMLFlBQWtCTixTQUFsQjtBQUNBSSw0QkFBa0I7QUFDbkI7QUFDRjs7QUFFRCxRQUFLSCxrQkFBTCxFQUEwQjtBQUN4QjlDLGVBQVMsQ0FBQ00sc0JBQVYsQ0FBa0MyQixJQUFsQyxJQUEyQyxJQUEzQztBQUNEOztBQUVELFdBQU9NLElBQVA7QUFDRCxHQWpGRDs7QUFtRkF2QyxXQUFTLENBQUMrQixlQUFWLEdBQTRCLFVBQVVSLE9BQVYsRUFBbUJZLElBQW5CLEVBQXlCVixPQUF6QixFQUFrQ0MsT0FBbEMsRUFBMkNDLFVBQTNDLEVBQXdEO0FBQ2xGLFFBQUljLElBQUksR0FBR3pDLFNBQVMsQ0FBQ2tDLGNBQVYsQ0FBMEJYLE9BQTFCLEVBQW1DWSxJQUFuQyxFQUF5Q1YsT0FBekMsQ0FBWDs7QUFFQSxRQUFLZ0IsSUFBSSxJQUFJNUIsU0FBYixFQUF5QjtBQUN2QixVQUFJd0QsR0FBRyxHQUFHdEUsZ0JBQWdCLENBQUNpRixjQUFqQixFQUFWO0FBQ0EsVUFBSUMsTUFBTSxHQUFHakYsU0FBUyxDQUFDZ0MsYUFBVixDQUF5QlQsT0FBekIsRUFBbUM0QixJQUFuQyxDQUF3Q29CLEVBQXJEO0FBQ0EsVUFBSVcsTUFBTSxHQUFHbEYsU0FBUyxDQUFDZ0MsYUFBVixDQUF5QlAsT0FBekIsRUFBbUMwQixJQUFuQyxDQUF3Q29CLEVBQXJEO0FBQ0E5QixVQUFJLEdBQUcsRUFBUDtBQUNBQSxVQUFJLENBQUNVLElBQUwsR0FBWTtBQUNWb0IsVUFBRSxFQUFFRixHQURNO0FBRVYzQyxlQUFPLEVBQVBBLE9BRlU7QUFHVkMsa0JBQVUsRUFBVkEsVUFIVTtBQUlWc0QsY0FBTSxFQUFOQSxNQUpVO0FBS1ZDLGNBQU0sRUFBTkEsTUFMVTtBQU1WLGlCQUFPL0M7QUFORyxPQUFaO0FBU0FwQyxzQkFBZ0IsQ0FBQ29GLCtCQUFqQixDQUFrRDFDLElBQUksQ0FBQ1UsSUFBdkQsRUFBNkRoQixJQUE3RDtBQUVBLFVBQUlDLEdBQUcsR0FBR3BDLFNBQVMsQ0FBQ3FDLGdCQUFWLENBQTRCZCxPQUE1QixFQUFxQ1ksSUFBckMsRUFBMkNWLE9BQTNDLENBQVY7QUFDQXpCLGVBQVMsQ0FBQ3dDLFlBQVYsQ0FBd0JDLElBQXhCLEVBQThCTCxHQUE5QjtBQUNBcEMsZUFBUyxDQUFDRyxTQUFWLENBQW9CUCxLQUFwQixDQUEwQmlGLElBQTFCLENBQWdDcEMsSUFBaEM7QUFDRDs7QUFFRCxXQUFPQSxJQUFQO0FBQ0QsR0F6QkQ7O0FBMkJBekMsV0FBUyxDQUFDNkIsWUFBVixHQUF5QixVQUFVTCxRQUFWLEVBQW9CNEQsSUFBcEIsRUFBMkI7QUFDbEQsUUFBSWpELElBQUo7O0FBRUEsWUFBUVgsUUFBUjtBQUNFLFdBQUssd0JBQUw7QUFDQSxXQUFLLGdDQUFMO0FBQ0VXLFlBQUksR0FBS2lELElBQUksS0FBSyxLQUFULEdBQWlCLG1CQUFqQixHQUF1QyxxQkFBaEQ7QUFDQTs7QUFDRixXQUFLLDBCQUFMO0FBQ0EsV0FBSyxrQkFBTDtBQUNFakQsWUFBSSxHQUFLaUQsSUFBSSxLQUFLLEtBQVQsR0FBaUIscUJBQWpCLEdBQXlDLG1CQUFsRDtBQUNBOztBQUNGLFdBQUssYUFBTDtBQUNBLFdBQUssaUJBQUw7QUFDRWpELFlBQUksR0FBRyxxQkFBUDtBQUNBOztBQUNGO0FBQ0VBLFlBQUksR0FBRyxtQkFBUDtBQUNBO0FBZko7O0FBa0JBLFdBQU9BLElBQVA7QUFDRCxHQXRCRDs7QUF3QkFuQyxXQUFTLENBQUN5RCxjQUFWLEdBQTJCLFVBQVU0QixRQUFWLEVBQXFCO0FBQzlDLFdBQU9yRixTQUFTLENBQUNzRixrQkFBVixHQUFnQyxlQUFoQyxFQUFtREQsUUFBbkQsQ0FBUDtBQUNELEdBRkQ7O0FBSUFyRixXQUFTLENBQUNzRixrQkFBVixHQUErQixZQUFXO0FBQ3hDLFdBQU87QUFDTEMsbUJBQWEsRUFBRTtBQUNiM0Isd0JBQWdCLEVBQUUsT0FETDtBQUViNEIsNENBQW9DLEVBQUU7QUFGekI7QUFEVixLQUFQO0FBTUQsR0FQRDs7QUFTQSxTQUFPeEYsU0FBUDtBQUNELENBOU9EIiwiZmlsZSI6Ii4vc3JjL3V0aWxpdGllcy9zaWYtdG8tanNvbi1jb252ZXJ0ZXItZmFjdG9yeS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciB0ZFBhcnNlciA9IHJlcXVpcmUoJy4vdGFiLWRlbGltZXRlZC1wYXJzZXInKTtcblxuZnVuY3Rpb24gc3RyVG9TZXQoIHN0ciwgc3BsaXRCeSApIHtcbiAgdmFyIHNldCA9IHt9O1xuICB2YXIgbGlzdCA9IHN0ciA/IHN0ci5zcGxpdCggc3BsaXRCeSApIDogW107XG5cbiAgbGlzdC5mb3JFYWNoKCBmdW5jdGlvbiggbWVtYmVyICkge1xuICAgIHNldFsgbWVtYmVyIF0gPSB0cnVlO1xuICB9ICk7XG5cbiAgcmV0dXJuIHNldDtcbn1cblxuZnVuY3Rpb24gZ2V0RW1wdHlHcmFwaERhdGEoKSB7XG4gIHJldHVybiB7IG5vZGVzOiBbXSwgZWRnZXM6IFtdIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG5cbiAgdmFyIGVsZW1lbnRVdGlsaXRpZXM7XG5cbiAgZnVuY3Rpb24gc2lmVG9Kc29uKHBhcmFtKSB7XG4gICAgZWxlbWVudFV0aWxpdGllcyA9IHBhcmFtLmVsZW1lbnRVdGlsaXRpZXM7XG4gIH1cblxuICBzaWZUb0pzb24uaW5pdEdyYXBoVmFyaWFibGVzID0gZnVuY3Rpb24oKSB7XG4gICAgc2lmVG9Kc29uLmdyYXBoRGF0YSA9IGdldEVtcHR5R3JhcGhEYXRhKCk7XG4gICAgc2lmVG9Kc29uLm5hbWVUb05vZGUgPSB7fTtcbiAgICBzaWZUb0pzb24ua2V5VG9FZGdlID0ge307XG4gICAgLy8gc2V0IG9mIG5vZGVzIHRoYXQgYXJlIGNvbm5lY3RlZCB0byBhbiBlZGdlXG4gICAgc2lmVG9Kc29uLm5vZGVXaXRoU3BlY2lmaWVkQ2xhc3MgPSB7fTtcbiAgfVxuXG4gIHNpZlRvSnNvbi5kZWZhdWx0Tm9kZVR5cGUgPSAnU0lGIG1hY3JvbW9sZWN1bGUnO1xuXG4gIHNpZlRvSnNvbi5tZXJnZUdyYXBoRGF0YSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBbIC4uLnNpZlRvSnNvbi5ncmFwaERhdGEubm9kZXMsIC4uLnNpZlRvSnNvbi5ncmFwaERhdGEuZWRnZXMgXTtcbiAgfTtcblxuICBzaWZUb0pzb24uY29udmVydCA9IGZ1bmN0aW9uKCBncmFwaFRleHQgKSB7XG4gICAgZWxlbWVudFV0aWxpdGllcy5maWxlRm9ybWF0ID0gJ3NpZic7XG4gICAgZWxlbWVudFV0aWxpdGllcy5tYXBUeXBlID0gJ1NJRic7XG5cbiAgICBzaWZUb0pzb24uaW5pdEdyYXBoVmFyaWFibGVzKCk7XG5cbiAgICBpZiAoIGdyYXBoVGV4dCA9PSB1bmRlZmluZWQgKSB7XG4gICAgICByZXR1cm4gc2lmVG9Kc29uLmdyYXBoRGF0YTtcbiAgICB9XG5cbiAgICB2YXIgbGluZXMgPSB0ZFBhcnNlci5nZXRMaW5lc0FycmF5KCBncmFwaFRleHQudG9TdHJpbmcoKSApO1xuXG4gICAgbGluZXMuZm9yRWFjaCggZnVuY3Rpb24oIGxpbmUgKSB7XG4gICAgICB2YXIgdGFicyA9IHRkUGFyc2VyLmdldFRhYnNBcnJheSggbGluZSApO1xuXG4gICAgICAvLyBsaW5lIHJlcHJlc2VudHMgYSBub2RlXG4gICAgICBpZiAoIHRhYnMubGVuZ3RoID09PSAxICkge1xuICAgICAgICB2YXIgbm9kZU5hbWUgPSB0YWJzWyAwIF07XG4gICAgICAgIC8vIGNyZWF0ZSB0aGUgbm9kZSBpZiBkb2VzIG5vdCBleGlzdCB5ZXRcbiAgICAgICAgLy8gaWYgdGhlIG5vZGUgaXMganVzdCBjcmVhdGVkIGl0IHdpbGwgaGF2ZSB0aGUgZGVmYXVsdCBub2RlIGNsYXNzXG4gICAgICAgIHNpZlRvSnNvbi5nZXRPckNyZWF0ZU5vZGUoIG5vZGVOYW1lICk7XG4gICAgICB9XG4gICAgICAvLyBsaW5lIHJlcHJlc2VudHMgYW4gZWRnZSBhbmQgdGhlIGNvbm5lY3RlZCBub2Rlc1xuICAgICAgZWxzZSB7XG4gICAgICAgIHZhciBzcmNOYW1lID0gdGFic1sgMCBdO1xuICAgICAgICB2YXIgZWRnZVR5cGUgPSB0YWJzWyAxIF07XG4gICAgICAgIHZhciB0Z3ROYW1lID0gdGFic1sgMiBdO1xuICAgICAgICB2YXIgcGNJRFNldCA9IHN0clRvU2V0KCB0YWJzWyAzIF0sIC87fCAvICk7XG4gICAgICAgIHZhciBzaXRlTG9jU2V0ID0gc3RyVG9TZXQoIHRhYnNbIDQgXSwgJzsnICk7XG5cbiAgICAgICAgdmFyIHNyY0NsYXNzID0gc2lmVG9Kc29uLmdldE5vZGVDbGFzcyggZWRnZVR5cGUsICdzcmMnICk7XG4gICAgICAgIHZhciB0Z3RDbGFzcyA9IHNpZlRvSnNvbi5nZXROb2RlQ2xhc3MoIGVkZ2VUeXBlLCAndGd0JyApO1xuXG4gICAgICAgIC8vIGNyZWF0ZSBub2RlcyBpZiB0aGV5IGRvIG5vdCBleGlzdCB5ZXRcbiAgICAgICAgLy8gaWYgdGhlIG5vZGUgYWxyZWFkeSBleGlzdHMgdGhlIG5vZGUgdHlwZSBhbmQgc28gdGhlIGRlZmF1bHQgdmFsdWVzXG4gICAgICAgIC8vIHdpbGwgYmUgdXBkYXRlZFxuICAgICAgICBzaWZUb0pzb24uZ2V0T3JDcmVhdGVOb2RlKCBzcmNOYW1lLCBzcmNDbGFzcyApO1xuICAgICAgICBzaWZUb0pzb24uZ2V0T3JDcmVhdGVOb2RlKCB0Z3ROYW1lLCB0Z3RDbGFzcyApO1xuXG4gICAgICAgIC8vIGNyZWF0ZSB0aGUgZWRnZSBpZiBpdCBkb2VzIG5vdCBleGlzdCB5ZXRcbiAgICAgICAgc2lmVG9Kc29uLmdldE9yQ3JlYXRlRWRnZSggc3JjTmFtZSwgZWRnZVR5cGUsIHRndE5hbWUsIHBjSURTZXQsIHNpdGVMb2NTZXQgKTtcbiAgICAgIH1cbiAgICB9ICk7XG5cbiAgICByZXR1cm4gc2lmVG9Kc29uLm1lcmdlR3JhcGhEYXRhKCk7XG4gIH07XG5cbiAgc2lmVG9Kc29uLmdldE5vZGVCeU5hbWUgPSBmdW5jdGlvbiggbmFtZSApIHtcbiAgICByZXR1cm4gc2lmVG9Kc29uLm5hbWVUb05vZGVbIG5hbWUgXTtcbiAgfTtcblxuICBzaWZUb0pzb24uZ2V0RWRnZUJ5UHJvcHMgPSBmdW5jdGlvbiggc3JjTmFtZSwgdHlwZSwgdGd0TmFtZSApIHtcbiAgICB2YXIga2V5ID0gc2lmVG9Kc29uLmNhbGN1bGF0ZUVkZ2VLZXkoIHNyY05hbWUsIHR5cGUsIHRndE5hbWUgKTtcbiAgICByZXR1cm4gc2lmVG9Kc29uLmtleVRvRWRnZVsga2V5IF07XG4gIH07XG5cbiAgc2lmVG9Kc29uLm1hcE5vZGVUb05hbWUgPSBmdW5jdGlvbiggbm9kZSwgbmFtZSApIHtcbiAgICBzaWZUb0pzb24ubmFtZVRvTm9kZVsgbmFtZSBdID0gbm9kZTtcbiAgfTtcblxuICBzaWZUb0pzb24ubWFwRWRnZVRvS2V5ID0gZnVuY3Rpb24oIGVkZ2UsIGtleSApIHtcbiAgICBzaWZUb0pzb24ua2V5VG9FZGdlWyBrZXkgXSA9IGVkZ2U7XG4gIH07XG5cbiAgc2lmVG9Kc29uLmNhbGN1bGF0ZUVkZ2VLZXkgPSBmdW5jdGlvbiggc3JjLCB0eXBlLCB0Z3QgKSB7XG4gICAgcmV0dXJuIFsgc3JjLCB0eXBlLCB0Z3QgXS5qb2luKCAnICcgKTtcbiAgfTtcblxuICBzaWZUb0pzb24uZ2V0T3JDcmVhdGVOb2RlID0gZnVuY3Rpb24oIG5hbWUsIGNsYXNzTmFtZSApIHtcbiAgICAvLyBzYXZlIGlmIGNsYXNzIG5hbWUgcGFyYW1ldGVyIGlzIHNldFxuICAgIHZhciBjbGFzc05hbWVTcGVjaWZpZWQgPSAhIWNsYXNzTmFtZTtcbiAgICBjbGFzc05hbWUgPSBjbGFzc05hbWUgfHwgc2lmVG9Kc29uLmRlZmF1bHROb2RlVHlwZTtcblxuICAgIHZhciBub2RlID0gc2lmVG9Kc29uLmdldE5vZGVCeU5hbWUoIG5hbWUgKTtcbiAgICB2YXIgZGVmYXVsdHMgPSBlbGVtZW50VXRpbGl0aWVzLmdldERlZmF1bHRQcm9wZXJ0aWVzKCBjbGFzc05hbWUgKTtcblxuICAgIHZhciB1cGRhdGVXaXRoRGVmYXVsdHMgPSBmdW5jdGlvbigpIHtcbiAgICAgIGVsZW1lbnRVdGlsaXRpZXMuZXh0ZW5kTm9kZURhdGFXaXRoQ2xhc3NEZWZhdWx0cyggbm9kZS5kYXRhLCBjbGFzc05hbWUgKTtcbiAgICAgIG5vZGUuZGF0YS5iYm94LmggPSBkZWZhdWx0cy5oZWlnaHQ7XG5cbiAgICAgIGlmICggZWxlbWVudFV0aWxpdGllcy5jYW5IYXZlU0JHTkxhYmVsKCBjbGFzc05hbWUgKSApIHtcbiAgICAgICAgdmFyIGlzRHluYW1pY0xhYmVsID0gc2lmVG9Kc29uLmdldE1hcFByb3BlcnR5KCAnYWRqdXN0Tm9kZUxhYmVsRm9udFNpemVBdXRvbWF0aWNhbGx5JyApO1xuXG4gICAgICAgIHZhciBmb250U2l6ZTtcbiAgICAgICAgdmFyIGZvbnRGYW1pbHkgPSBub2RlLmRhdGFbICdmb250LWZhbWlseScgXTtcblxuICAgICAgICBpZiAoIGlzRHluYW1pY0xhYmVsICkge1xuICAgICAgICAgIHZhciBkeW5hbWljTGFiZWxTaXplID0gc2lmVG9Kc29uLmdldE1hcFByb3BlcnR5KCAnZHluYW1pY0xhYmVsU2l6ZScgKTtcbiAgICAgICAgICB2YXIgY29lZmYgPSBlbGVtZW50VXRpbGl0aWVzLmdldER5bmFtaWNMYWJlbFNpemVDb2VmZmljaWVudCggZHluYW1pY0xhYmVsU2l6ZSApO1xuICAgICAgICAgIHZhciBvYmogPSB7XG4gICAgICAgICAgICBoZWlnaHQ6IG5vZGUuZGF0YS5iYm94LmgsXG4gICAgICAgICAgICBjbGFzczogY2xhc3NOYW1lXG4gICAgICAgICAgfTtcbiAgICAgICAgICBmb250U2l6ZSA9IGVsZW1lbnRVdGlsaXRpZXMuZ2V0RHluYW1pY0xhYmVsVGV4dFNpemUoIG9iaiwgY29lZmYgKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBmb250U2l6ZSA9IG5vZGUuZGF0YVsgJ2ZvbnQtc2l6ZScgXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtYXggPSAyNTA7XG4gICAgICAgIG5vZGUuZGF0YS5iYm94LncgPSBlbGVtZW50VXRpbGl0aWVzLmdldFdpZHRoQnlDb250ZW50KCBuYW1lLCBmb250RmFtaWx5LCBmb250U2l6ZSwgeyBtYXggfSApO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIG5vZGUuZGF0YS5iYm94LncgPSBkZWZhdWx0cy53aWR0aDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKCBub2RlID09IHVuZGVmaW5lZCApIHtcbiAgICAgIHZhciB1aWQgPSBlbGVtZW50VXRpbGl0aWVzLmdlbmVyYXRlTm9kZUlkKCk7XG4gICAgICBub2RlID0ge307XG5cbiAgICAgIG5vZGUuZGF0YSA9IHtcbiAgICAgICAgaWQ6IHVpZCxcbiAgICAgICAgbGFiZWw6IG5hbWUsXG4gICAgICAgIGNsYXNzOiBjbGFzc05hbWUsXG4gICAgICAgIGJib3g6IHtcbiAgICAgICAgICB4OiAwLFxuICAgICAgICAgIHk6IDBcbiAgICAgICAgfSxcbiAgICAgICAgc3RhdGVzYW5kaW5mb3M6IFtdLFxuICAgICAgICBwb3J0czogW11cbiAgICAgIH07XG5cbiAgICAgIHVwZGF0ZVdpdGhEZWZhdWx0cygpO1xuXG4gICAgICBzaWZUb0pzb24ubWFwTm9kZVRvTmFtZSggbm9kZSwgbmFtZSApO1xuICAgICAgc2lmVG9Kc29uLmdyYXBoRGF0YS5ub2Rlcy5wdXNoKCBub2RlICk7XG4gICAgfVxuICAgIC8vIGlmIGNsYXNzIG5hbWUgcGFyYW1ldGVyIGlzIHNldCBhbmQgdGhlIGFscmVhZHkgZXhpc3Rpbmcgbm9kZSBoYXMgYSBkaWZmZXJlbnRcbiAgICAvLyBjbGFzcyBuYW1lIGNoZWNrIGlmIHRoZSBleGlzdGluZyBub2RlIGhhcyBhIHNwZWNpZmllZCBjbGFzcyBvciBqdXN0IHVzZWQgdGhlXG4gICAgLy8gZGVmYXVsdCBvbmUgYmVjYXVzZSBpdCB3YXMgbm90IGNvbWluZyBmcm9tIGFuIGVkZ2UuXG4gICAgLy8gSW4gZmlyc3QgY2FzZSBnaXZlIGEgd2FybmluZyBhbmQgZG8gbm90IHVwZGF0ZSB0aGUgY2xhc3MsXG4gICAgLy8gaW4gc2Vjb25kIGNhc2UgdXBkYXRlIHRoZSBjbGFzcyBhbmQgdGhlIG5vZGUgZGF0YSB3aXRoIGRlZmF1bHRzXG4gICAgZWxzZSBpZiAoIGNsYXNzTmFtZVNwZWNpZmllZCAmJiBub2RlLmRhdGEuY2xhc3MgIT09IGNsYXNzTmFtZSApIHtcbiAgICAgIGlmICggc2lmVG9Kc29uLm5vZGVXaXRoU3BlY2lmaWVkQ2xhc3NbIG5hbWUgXSApIHtcbiAgICAgICAgY29uc29sZS53YXJuKCAnVHlwZSBvZiBub2RlICcgKyBuYW1lICsgJyBjYW5ub3QgYmUgdXBkYXRlZCBhcyAnXG4gICAgICAgICAgICAgICAgICAgICsgY2xhc3NOYW1lICsgJyBiZWNhdXNlIGl0IHdhcyBhbHJlYWR5IHNwZWNpZmllZCBhcyAnICsgbm9kZS5kYXRhLmNsYXNzICk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbm9kZS5kYXRhLmNsYXNzID0gY2xhc3NOYW1lO1xuICAgICAgICB1cGRhdGVXaXRoRGVmYXVsdHMoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIGNsYXNzTmFtZVNwZWNpZmllZCApIHtcbiAgICAgIHNpZlRvSnNvbi5ub2RlV2l0aFNwZWNpZmllZENsYXNzWyBuYW1lIF0gPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBub2RlO1xuICB9O1xuXG4gIHNpZlRvSnNvbi5nZXRPckNyZWF0ZUVkZ2UgPSBmdW5jdGlvbiggc3JjTmFtZSwgdHlwZSwgdGd0TmFtZSwgcGNJRFNldCwgc2l0ZUxvY1NldCApIHtcbiAgICB2YXIgZWRnZSA9IHNpZlRvSnNvbi5nZXRFZGdlQnlQcm9wcyggc3JjTmFtZSwgdHlwZSwgdGd0TmFtZSApO1xuXG4gICAgaWYgKCBlZGdlID09IHVuZGVmaW5lZCApIHtcbiAgICAgIHZhciB1aWQgPSBlbGVtZW50VXRpbGl0aWVzLmdlbmVyYXRlRWRnZUlkKCk7XG4gICAgICB2YXIgc291cmNlID0gc2lmVG9Kc29uLmdldE5vZGVCeU5hbWUoIHNyY05hbWUgKS5kYXRhLmlkO1xuICAgICAgdmFyIHRhcmdldCA9IHNpZlRvSnNvbi5nZXROb2RlQnlOYW1lKCB0Z3ROYW1lICkuZGF0YS5pZDtcbiAgICAgIGVkZ2UgPSB7fTtcbiAgICAgIGVkZ2UuZGF0YSA9IHtcbiAgICAgICAgaWQ6IHVpZCxcbiAgICAgICAgcGNJRFNldCxcbiAgICAgICAgc2l0ZUxvY1NldCxcbiAgICAgICAgc291cmNlLFxuICAgICAgICB0YXJnZXQsXG4gICAgICAgIGNsYXNzOiB0eXBlXG4gICAgICB9O1xuXG4gICAgICBlbGVtZW50VXRpbGl0aWVzLmV4dGVuZEVkZ2VEYXRhV2l0aENsYXNzRGVmYXVsdHMoIGVkZ2UuZGF0YSwgdHlwZSApO1xuXG4gICAgICB2YXIga2V5ID0gc2lmVG9Kc29uLmNhbGN1bGF0ZUVkZ2VLZXkoIHNyY05hbWUsIHR5cGUsIHRndE5hbWUgKTtcbiAgICAgIHNpZlRvSnNvbi5tYXBFZGdlVG9LZXkoIGVkZ2UsIGtleSApO1xuICAgICAgc2lmVG9Kc29uLmdyYXBoRGF0YS5lZGdlcy5wdXNoKCBlZGdlICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVkZ2U7XG4gIH07XG5cbiAgc2lmVG9Kc29uLmdldE5vZGVDbGFzcyA9IGZ1bmN0aW9uKCBlZGdlVHlwZSwgcm9sZSApIHtcbiAgICB2YXIgdHlwZTtcblxuICAgIHN3aXRjaCAoZWRnZVR5cGUpIHtcbiAgICAgIGNhc2UgJ2NvbnRyb2xzLXByb2R1Y3Rpb24tb2YnOlxuICAgICAgY2FzZSAnY29udHJvbHMtdHJhbnNwb3J0LW9mLWNoZW1pY2FsJzpcbiAgICAgICAgdHlwZSA9ICggcm9sZSA9PT0gJ3NyYycgPyAnU0lGIG1hY3JvbW9sZWN1bGUnIDogJ1NJRiBzaW1wbGUgY2hlbWljYWwnICk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnY29uc3VtcHRpb24tY29udHJvbGVkLWJ5JzpcbiAgICAgIGNhc2UgJ2NoZW1pY2FsLWFmZmVjdHMnOlxuICAgICAgICB0eXBlID0gKCByb2xlID09PSAnc3JjJyA/ICdTSUYgc2ltcGxlIGNoZW1pY2FsJyA6ICdTSUYgbWFjcm9tb2xlY3VsZScgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdyZWFjdHMtd2l0aCc6XG4gICAgICBjYXNlICd1c2VkLXRvLXByb2R1Y2UnOlxuICAgICAgICB0eXBlID0gJ1NJRiBzaW1wbGUgY2hlbWljYWwnO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHR5cGUgPSAnU0lGIG1hY3JvbW9sZWN1bGUnO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICByZXR1cm4gdHlwZTtcbiAgfTtcblxuICBzaWZUb0pzb24uZ2V0TWFwUHJvcGVydHkgPSBmdW5jdGlvbiggcHJvcE5hbWUgKSB7XG4gICAgcmV0dXJuIHNpZlRvSnNvbi5tYXBQcm9wZXJ0aWVzVG9PYmooKVsgJ21hcFByb3BlcnRpZXMnIF1bIHByb3BOYW1lIF07XG4gIH07XG5cbiAgc2lmVG9Kc29uLm1hcFByb3BlcnRpZXNUb09iaiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICBtYXBQcm9wZXJ0aWVzOiB7XG4gICAgICAgIGR5bmFtaWNMYWJlbFNpemU6ICdsYXJnZScsXG4gICAgICAgIGFkanVzdE5vZGVMYWJlbEZvbnRTaXplQXV0b21hdGljYWxseTogdHJ1ZVxuICAgICAgfVxuICAgIH07XG4gIH07XG5cbiAgcmV0dXJuIHNpZlRvSnNvbjtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/utilities/sif-to-json-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/tab-delimeted-parser.js":
/*!***********************************************!*\
  !*** ./src/utilities/tab-delimeted-parser.js ***!
  \***********************************************/
/***/ ((module) => {

eval("function tdParser() {}\n\n;\n\ntdParser.getTabsArray = function (line) {\n  return line.split('\\t');\n};\n\ntdParser.getLinesArray = function (content) {\n  var separator = /\\r?\\n|\\r/;\n\n  var notEmpty = function notEmpty(line) {\n    return line !== '';\n  };\n\n  return content.split(separator).filter(notEmpty);\n};\n\nmodule.exports = tdParser;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vc3JjL3V0aWxpdGllcy90YWItZGVsaW1ldGVkLXBhcnNlci5qcz8wZWZjIl0sIm5hbWVzIjpbInRkUGFyc2VyIiwiZ2V0VGFic0FycmF5IiwibGluZSIsInNwbGl0IiwiZ2V0TGluZXNBcnJheSIsImNvbnRlbnQiLCJzZXBhcmF0b3IiLCJub3RFbXB0eSIsImZpbHRlciIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLFFBQVQsR0FBb0IsQ0FDbkI7O0FBQUE7O0FBRURBLFFBQVEsQ0FBQ0MsWUFBVCxHQUF3QixVQUFVQyxJQUFWLEVBQWlCO0FBQ3ZDLFNBQU9BLElBQUksQ0FBQ0MsS0FBTCxDQUFZLElBQVosQ0FBUDtBQUNELENBRkQ7O0FBSUFILFFBQVEsQ0FBQ0ksYUFBVCxHQUF5QixVQUFVQyxPQUFWLEVBQW9CO0FBQzNDLE1BQUlDLFNBQVMsR0FBRyxVQUFoQjs7QUFDQSxNQUFJQyxRQUFRLEdBQUcsU0FBWEEsUUFBVyxDQUFVTCxJQUFWLEVBQWlCO0FBQzlCLFdBQU9BLElBQUksS0FBSyxFQUFoQjtBQUNELEdBRkQ7O0FBR0EsU0FBT0csT0FBTyxDQUFDRixLQUFSLENBQWVHLFNBQWYsRUFBMkJFLE1BQTNCLENBQW1DRCxRQUFuQyxDQUFQO0FBQ0QsQ0FORDs7QUFRQUUsTUFBTSxDQUFDQyxPQUFQLEdBQWlCVixRQUFqQiIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHRkUGFyc2VyKCkge1xufTtcblxudGRQYXJzZXIuZ2V0VGFic0FycmF5ID0gZnVuY3Rpb24oIGxpbmUgKSB7XG4gIHJldHVybiBsaW5lLnNwbGl0KCAnXFx0JyApO1xufTtcblxudGRQYXJzZXIuZ2V0TGluZXNBcnJheSA9IGZ1bmN0aW9uKCBjb250ZW50ICkge1xuICB2YXIgc2VwYXJhdG9yID0gL1xccj9cXG58XFxyLztcbiAgdmFyIG5vdEVtcHR5ID0gZnVuY3Rpb24oIGxpbmUgKSB7XG4gICAgcmV0dXJuIGxpbmUgIT09ICcnO1xuICB9O1xuICByZXR1cm4gY29udGVudC5zcGxpdCggc2VwYXJhdG9yICkuZmlsdGVyKCBub3RFbXB0eSApO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB0ZFBhcnNlcjtcbiJdLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL3RhYi1kZWxpbWV0ZWQtcGFyc2VyLmpzLmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/utilities/tab-delimeted-parser.js\n");

/***/ }),

/***/ "./src/utilities/tab-delimited-to-json-converter-factory.js":
/*!******************************************************************!*\
  !*** ./src/utilities/tab-delimited-to-json-converter-factory.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("var libsbgnjs = __webpack_require__(/*! libsbgn.js */ \"libsbgn.js\");\n\nvar parseString = __webpack_require__(/*! xml2js */ \"xml2js\").parseString;\n\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\n\nvar classes = __webpack_require__(/*! ./classes */ \"./src/utilities/classes.js\");\n\nmodule.exports = function () {\n  var elementUtilities;\n\n  function tdToJson(param) {\n    optionUtilities = param.optionUtilities;\n    options = optionUtilities.getOptions();\n    elementUtilities = param.elementUtilities;\n  }\n\n  tdToJson.map = undefined;\n  tdToJson.edgeTypes = {\n    'positive influence': true,\n    'negative influence': true,\n    'unknown influence': true,\n    'necassary influence': true,\n    'logic arcs': true,\n    'equivalance arcs': true\n  };\n  tdToJson.nodeTypes = {\n    'biological activity': 'BA plain',\n    'macromolecule': 'BA macromolecule',\n    'complex': 'BA complex',\n    'simple chemical': 'BA simple chemical',\n    'unspecified entity': 'BA unspecified entity',\n    'nucleic acid feature': 'BA nucleic acid feature',\n    'perturbing agent': 'BA perturbing agent',\n    'phenotype': 'phenotype',\n    'compartment': 'compartment',\n    'submap': 'submap',\n    'tag': 'tag',\n    'and': 'and',\n    'or': 'or',\n    'not': 'not',\n    'delay': 'delay'\n  };\n\n  tdToJson.validateNodeType = function (type) {\n    var _type = type.replace(/_/g, ' ').toLowerCase();\n\n    return this.nodeTypes.hasOwnProperty(_type);\n  };\n\n  tdToJson.validateEdgeType = function (type) {\n    var _type = type.replace(/_/g, ' ').toLowerCase();\n\n    return this.edgeTypes.hasOwnProperty(_type);\n  };\n\n  tdToJson.convertTypeToClass = function (ele, type, isNode) {\n    var _type = type.replace(/_/g, ' ').toLowerCase();\n\n    ele.data[\"class\"] = isNode ? this.nodeTypes[_type] : _type;\n  };\n\n  tdToJson.mapPropertiesToObj = function () {\n    return {\n      mapProperties: this.map.mapProperties\n    };\n  };\n  /**\n   * Adds states and infobox information to given node\n   * @param node : a node object\n   */\n\n\n  tdToJson.addInfoBox = function (node) {\n    var _class = node.data[\"class\"];\n\n    if (_class.startsWith(\"BA\") && _class != \"BA plain\") {\n      var unitOfInformation = classes.UnitOfInformation.construct();\n      unitOfInformation.parent = node.data.id; // file format does not contain bbox information, hence define them below\n\n      unitOfInformation.bbox = {\n        x: 25,\n        y: -50,\n        w: 30,\n        h: 12\n      };\n      classes.UnitOfInformation.setAnchorSide(unitOfInformation);\n      node.data.statesandinfos = [unitOfInformation];\n    } else {\n      node.data.statesandinfos = [];\n    }\n  };\n\n  tdToJson.convert = function (graphText) {\n    elementUtilities.fileFormat = 'td';\n\n    if (graphText === undefined) {\n      return {\n        nodes: [],\n        edges: []\n      };\n    } else {\n      var map = {};\n      var nodes = []; //Holds nodes\n\n      var edges = []; //Holds edges\n\n      this.map = map; //Define the line separator\n      // \\r\\n, \\n and \\r line separators\n\n      var separator = /\\r?\\n|\\r/;\n      var lines = graphText.toString().split(separator);\n      var graphDataIndex = 4; //graph data starts at index 4\n\n      var edgesStartIndex = -1; //unkown at the begining\n\n      var formatVersion = lines[0];\n\n      if (formatVersion.length < 10 || formatVersion.substring(0, 10).toLowerCase() != 'sbgnviz af') {\n        throw \"Wrong file format!\";\n      }\n\n      if (formatVersion.length == 10) {\n        formatVersion = formatVersion + \" 1.0\"; //default 1.0\n      }\n\n      var title = lines[1];\n      var description = lines[2]; //Second element of the format version specifies map language\n\n      var mapLanguage = formatVersion.toString().split(\" \")[1];\n      elementUtilities.mapType = mapLanguage;\n      map.mapProperties = {};\n      map.mapProperties.mapDescription = description;\n      map.mapProperties.mapName = title; //start to parse the graph\n\n      for (var i = graphDataIndex; i < lines.length; i++) {\n        //blank line indicates that nodes are finished\n        //so continue with edges\n        if (lines[i].length === 0 || lines[i] === \"\") {\n          while (lines[i] === \"\" && i < lines.length) {\n            i++;\n          }\n\n          edgesStartIndex = i + 2;\n          break;\n        } //Parse the node data\n\n\n        var data = lines[i].toString().split('\\t'); //each data seperated by tab\n\n        var nodeName = data[0]; //If there is no blank line\n\n        if (nodeName.toString().toLowerCase() == '--edge_id') {\n          edgesStartIndex = i + 1;\n          break;\n        }\n\n        var nodeId = data[1];\n        var nodeType = data[2];\n        var parentID = data[3];\n        var posX = data.length > 4 ? data[4] : \"0\"; //if posX not given\n\n        var posY = data.length > 5 ? data[5] : \"0\"; //if posY not given\n\n        var nodeWidth = data.length > 6 ? data[6] : undefined;\n        var nodeHeight = data.length > 7 ? data[7] : undefined; //add parsed Node\n\n        var newNode = {\n          group: 'nodes',\n          data: {\n            id: nodeId,\n            label: nodeName,\n            ports: [],\n            bbox: {\n              x: parseFloat(posX),\n              y: parseFloat(posY),\n              w: nodeWidth,\n              h: nodeHeight\n            }\n          }\n        };\n\n        if (this.validateNodeType(nodeType)) {\n          this.convertTypeToClass(newNode, nodeType, true);\n          this.addInfoBox(newNode);\n        } else {\n          throw \"Node type mismatched...\";\n        }\n\n        if (parentID != '-1') {\n          newNode.data.parent = parentID;\n        }\n\n        if (newNode.data[\"class\"]) {\n          elementUtilities.extendNodeDataWithClassDefaults(newNode.data, newNode.data[\"class\"]);\n\n          if (!newNode.data.bbox.w || !newNode.data.bbox.h) {\n            var defaults = elementUtilities.getDefaultProperties(newNode.data[\"class\"]);\n            newNode.data.bbox.w = newNode.data.bbox.w || defaults.width;\n            newNode.data.bbox.h = newNode.data.bbox.h || defaults.height;\n          }\n        }\n\n        nodes.push(newNode);\n      } //Start parsing edges\n\n\n      for (var i = edgesStartIndex; i < lines.length; i++) {\n        //EOF finish loop\n        if (lines[i].length === 0) {\n          break;\n        }\n\n        var data = lines[i].toString().split('\\t');\n        var edgeID = data[0];\n        var edgeSource = data[1];\n        var edgeTarget = data[2];\n        var edgeType = data[3];\n        var newEdge = {\n          group: 'edges',\n          data: {\n            id: edgeID,\n            source: edgeSource,\n            target: edgeTarget\n          }\n        };\n        if (this.validateEdgeType(edgeType)) this.convertTypeToClass(newEdge, edgeType);else {\n          throw \"Edge Type mismatched...\";\n        }\n        elementUtilities.extendEdgeDataWithClassDefaults(newEdge.data, newEdge.data[\"class\"]);\n        edges.push(newEdge);\n      }\n\n      var jsGraph = {};\n      jsGraph.nodes = nodes;\n      jsGraph.edges = edges;\n      return jsGraph;\n    }\n  };\n\n  return tdToJson;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vc3JjL3V0aWxpdGllcy90YWItZGVsaW1pdGVkLXRvLWpzb24tY29udmVydGVyLWZhY3RvcnkuanM/NWI1MiJdLCJuYW1lcyI6WyJsaWJzYmduanMiLCJyZXF1aXJlIiwicGFyc2VTdHJpbmciLCJsaWJVdGlsaXRpZXMiLCJjbGFzc2VzIiwibW9kdWxlIiwiZXhwb3J0cyIsImVsZW1lbnRVdGlsaXRpZXMiLCJ0ZFRvSnNvbiIsInBhcmFtIiwib3B0aW9uVXRpbGl0aWVzIiwib3B0aW9ucyIsImdldE9wdGlvbnMiLCJtYXAiLCJ1bmRlZmluZWQiLCJlZGdlVHlwZXMiLCJub2RlVHlwZXMiLCJ2YWxpZGF0ZU5vZGVUeXBlIiwidHlwZSIsIl90eXBlIiwicmVwbGFjZSIsInRvTG93ZXJDYXNlIiwiaGFzT3duUHJvcGVydHkiLCJ2YWxpZGF0ZUVkZ2VUeXBlIiwiY29udmVydFR5cGVUb0NsYXNzIiwiZWxlIiwiaXNOb2RlIiwiZGF0YSIsIm1hcFByb3BlcnRpZXNUb09iaiIsIm1hcFByb3BlcnRpZXMiLCJhZGRJbmZvQm94Iiwibm9kZSIsIl9jbGFzcyIsInN0YXJ0c1dpdGgiLCJ1bml0T2ZJbmZvcm1hdGlvbiIsIlVuaXRPZkluZm9ybWF0aW9uIiwiY29uc3RydWN0IiwicGFyZW50IiwiaWQiLCJiYm94IiwieCIsInkiLCJ3IiwiaCIsInNldEFuY2hvclNpZGUiLCJzdGF0ZXNhbmRpbmZvcyIsImNvbnZlcnQiLCJncmFwaFRleHQiLCJmaWxlRm9ybWF0Iiwibm9kZXMiLCJlZGdlcyIsInNlcGFyYXRvciIsImxpbmVzIiwidG9TdHJpbmciLCJzcGxpdCIsImdyYXBoRGF0YUluZGV4IiwiZWRnZXNTdGFydEluZGV4IiwiZm9ybWF0VmVyc2lvbiIsImxlbmd0aCIsInN1YnN0cmluZyIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJtYXBMYW5ndWFnZSIsIm1hcFR5cGUiLCJtYXBEZXNjcmlwdGlvbiIsIm1hcE5hbWUiLCJpIiwibm9kZU5hbWUiLCJub2RlSWQiLCJub2RlVHlwZSIsInBhcmVudElEIiwicG9zWCIsInBvc1kiLCJub2RlV2lkdGgiLCJub2RlSGVpZ2h0IiwibmV3Tm9kZSIsImdyb3VwIiwibGFiZWwiLCJwb3J0cyIsInBhcnNlRmxvYXQiLCJleHRlbmROb2RlRGF0YVdpdGhDbGFzc0RlZmF1bHRzIiwiZGVmYXVsdHMiLCJnZXREZWZhdWx0UHJvcGVydGllcyIsIndpZHRoIiwiaGVpZ2h0IiwicHVzaCIsImVkZ2VJRCIsImVkZ2VTb3VyY2UiLCJlZGdlVGFyZ2V0IiwiZWRnZVR5cGUiLCJuZXdFZGdlIiwic291cmNlIiwidGFyZ2V0IiwiZXh0ZW5kRWRnZURhdGFXaXRoQ2xhc3NEZWZhdWx0cyIsImpzR3JhcGgiXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLFNBQVMsR0FBR0MsbUJBQU8sQ0FBQyw4QkFBRCxDQUF2Qjs7QUFDQSxJQUFJQyxXQUFXLEdBQUdELHVEQUFsQjs7QUFDQSxJQUFJRSxZQUFZLEdBQUdGLG1CQUFPLENBQUMseURBQUQsQ0FBMUI7O0FBQ0EsSUFBSUcsT0FBTyxHQUFHSCxtQkFBTyxDQUFDLDZDQUFELENBQXJCOztBQUVBSSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsWUFBVztBQUMzQixNQUFJQyxnQkFBSjs7QUFFQSxXQUFTQyxRQUFULENBQWtCQyxLQUFsQixFQUF5QjtBQUN4QkMsbUJBQWUsR0FBR0QsS0FBSyxDQUFDQyxlQUF4QjtBQUNBQyxXQUFPLEdBQUdELGVBQWUsQ0FBQ0UsVUFBaEIsRUFBVjtBQUNBTCxvQkFBZ0IsR0FBR0UsS0FBSyxDQUFDRixnQkFBekI7QUFDQTs7QUFFREMsVUFBUSxDQUFDSyxHQUFULEdBQWVDLFNBQWY7QUFFQU4sVUFBUSxDQUFDTyxTQUFULEdBQW9CO0FBQ25CLDBCQUFzQixJQURIO0FBRW5CLDBCQUFzQixJQUZIO0FBR25CLHlCQUFxQixJQUhGO0FBSW5CLDJCQUF1QixJQUpKO0FBS25CLGtCQUFjLElBTEs7QUFNbkIsd0JBQW9CO0FBTkQsR0FBcEI7QUFTQVAsVUFBUSxDQUFDUSxTQUFULEdBQW9CO0FBQ25CLDJCQUF1QixVQURKO0FBRW5CLHFCQUFpQixrQkFGRTtBQUduQixlQUFXLFlBSFE7QUFJbkIsdUJBQW1CLG9CQUpBO0FBS25CLDBCQUFzQix1QkFMSDtBQU1uQiw0QkFBd0IseUJBTkw7QUFPbkIsd0JBQW1CLHFCQVBBO0FBUW5CLGlCQUFhLFdBUk07QUFTbkIsbUJBQWUsYUFUSTtBQVVuQixjQUFVLFFBVlM7QUFXbkIsV0FBTyxLQVhZO0FBWW5CLFdBQU8sS0FaWTtBQWFuQixVQUFNLElBYmE7QUFjbkIsV0FBTyxLQWRZO0FBZW5CLGFBQVM7QUFmVSxHQUFwQjs7QUFrQkFSLFVBQVEsQ0FBQ1MsZ0JBQVQsR0FBNEIsVUFBVUMsSUFBVixFQUFlO0FBQzFDLFFBQUlDLEtBQUssR0FBR0QsSUFBSSxDQUFDRSxPQUFMLENBQWEsSUFBYixFQUFtQixHQUFuQixFQUF3QkMsV0FBeEIsRUFBWjs7QUFDQSxXQUFPLEtBQUtMLFNBQUwsQ0FBZU0sY0FBZixDQUE4QkgsS0FBOUIsQ0FBUDtBQUNBLEdBSEQ7O0FBS0FYLFVBQVEsQ0FBQ2UsZ0JBQVQsR0FBNEIsVUFBVUwsSUFBVixFQUFlO0FBQzFDLFFBQUlDLEtBQUssR0FBR0QsSUFBSSxDQUFDRSxPQUFMLENBQWEsSUFBYixFQUFtQixHQUFuQixFQUF3QkMsV0FBeEIsRUFBWjs7QUFDQSxXQUFPLEtBQUtOLFNBQUwsQ0FBZU8sY0FBZixDQUE4QkgsS0FBOUIsQ0FBUDtBQUNBLEdBSEQ7O0FBS0FYLFVBQVEsQ0FBQ2dCLGtCQUFULEdBQThCLFVBQVVDLEdBQVYsRUFBZVAsSUFBZixFQUFxQlEsTUFBckIsRUFBNEI7QUFDekQsUUFBSVAsS0FBSyxHQUFHRCxJQUFJLENBQUNFLE9BQUwsQ0FBYSxJQUFiLEVBQW1CLEdBQW5CLEVBQXdCQyxXQUF4QixFQUFaOztBQUNBSSxPQUFHLENBQUNFLElBQUosWUFBaUJELE1BQU0sR0FBRyxLQUFLVixTQUFMLENBQWVHLEtBQWYsQ0FBSCxHQUEyQkEsS0FBbEQ7QUFDQSxHQUhEOztBQUtBWCxVQUFRLENBQUNvQixrQkFBVCxHQUE4QixZQUFVO0FBQ3ZDLFdBQU87QUFBRUMsbUJBQWEsRUFBRSxLQUFLaEIsR0FBTCxDQUFTZ0I7QUFBMUIsS0FBUDtBQUNBLEdBRkQ7QUFJQTtBQUNEO0FBQ0E7QUFDQTs7O0FBQ0NyQixVQUFRLENBQUNzQixVQUFULEdBQXNCLFVBQVNDLElBQVQsRUFBYztBQUNuQyxRQUFJQyxNQUFNLEdBQUdELElBQUksQ0FBQ0osSUFBTCxTQUFiOztBQUNBLFFBQUlLLE1BQU0sQ0FBQ0MsVUFBUCxDQUFrQixJQUFsQixLQUEyQkQsTUFBTSxJQUFJLFVBQXpDLEVBQW9EO0FBQ25ELFVBQUlFLGlCQUFpQixHQUFHOUIsT0FBTyxDQUFDK0IsaUJBQVIsQ0FBMEJDLFNBQTFCLEVBQXhCO0FBQ0FGLHVCQUFpQixDQUFDRyxNQUFsQixHQUEyQk4sSUFBSSxDQUFDSixJQUFMLENBQVVXLEVBQXJDLENBRm1ELENBR25EOztBQUNBSix1QkFBaUIsQ0FBQ0ssSUFBbEIsR0FBeUI7QUFBQ0MsU0FBQyxFQUFFLEVBQUo7QUFBUUMsU0FBQyxFQUFFLENBQUMsRUFBWjtBQUFnQkMsU0FBQyxFQUFFLEVBQW5CO0FBQXVCQyxTQUFDLEVBQUU7QUFBMUIsT0FBekI7QUFDQXZDLGFBQU8sQ0FBQytCLGlCQUFSLENBQTBCUyxhQUExQixDQUF3Q1YsaUJBQXhDO0FBQ0FILFVBQUksQ0FBQ0osSUFBTCxDQUFVa0IsY0FBVixHQUEyQixDQUFDWCxpQkFBRCxDQUEzQjtBQUNBLEtBUEQsTUFPTTtBQUNMSCxVQUFJLENBQUNKLElBQUwsQ0FBVWtCLGNBQVYsR0FBMkIsRUFBM0I7QUFDQTtBQUNELEdBWkQ7O0FBY0FyQyxVQUFRLENBQUNzQyxPQUFULEdBQW1CLFVBQVVDLFNBQVYsRUFBb0I7QUFDdEN4QyxvQkFBZ0IsQ0FBQ3lDLFVBQWpCLEdBQThCLElBQTlCOztBQUNBLFFBQUlELFNBQVMsS0FBS2pDLFNBQWxCLEVBQ0E7QUFDQyxhQUFPO0FBQUVtQyxhQUFLLEVBQUUsRUFBVDtBQUFhQyxhQUFLLEVBQUU7QUFBcEIsT0FBUDtBQUNBLEtBSEQsTUFJSztBQUNKLFVBQUlyQyxHQUFHLEdBQUcsRUFBVjtBQUNBLFVBQUlvQyxLQUFLLEdBQUcsRUFBWixDQUZJLENBRVk7O0FBQ2hCLFVBQUlDLEtBQUssR0FBRyxFQUFaLENBSEksQ0FHWTs7QUFDaEIsV0FBS3JDLEdBQUwsR0FBV0EsR0FBWCxDQUpJLENBTUo7QUFDQTs7QUFDQSxVQUFJc0MsU0FBUyxHQUFHLFVBQWhCO0FBQ0EsVUFBSUMsS0FBSyxHQUFHTCxTQUFTLENBQUNNLFFBQVYsR0FBcUJDLEtBQXJCLENBQTRCSCxTQUE1QixDQUFaO0FBQ0EsVUFBSUksY0FBYyxHQUFHLENBQXJCLENBVkksQ0FVb0I7O0FBQ3hCLFVBQUlDLGVBQWUsR0FBRyxDQUFDLENBQXZCLENBWEksQ0FXc0I7O0FBRTFCLFVBQUlDLGFBQWEsR0FBR0wsS0FBSyxDQUFDLENBQUQsQ0FBekI7O0FBRUEsVUFBSUssYUFBYSxDQUFDQyxNQUFkLEdBQXVCLEVBQXZCLElBQTZCRCxhQUFhLENBQUNFLFNBQWQsQ0FBd0IsQ0FBeEIsRUFBMEIsRUFBMUIsRUFBOEJ0QyxXQUE5QixNQUErQyxZQUFoRixFQUNBO0FBQ0MsY0FBTSxvQkFBTjtBQUNBOztBQUVELFVBQUlvQyxhQUFhLENBQUNDLE1BQWQsSUFBd0IsRUFBNUIsRUFBK0I7QUFDOUJELHFCQUFhLEdBQUdBLGFBQWEsR0FBRyxNQUFoQyxDQUQ4QixDQUNVO0FBQ3hDOztBQUNELFVBQUlHLEtBQUssR0FBR1IsS0FBSyxDQUFDLENBQUQsQ0FBakI7QUFDQSxVQUFJUyxXQUFXLEdBQUdULEtBQUssQ0FBQyxDQUFELENBQXZCLENBeEJJLENBeUJKOztBQUNBLFVBQUlVLFdBQVcsR0FBSUwsYUFBYSxDQUFDSixRQUFkLEdBQXlCQyxLQUF6QixDQUErQixHQUEvQixDQUFELENBQXNDLENBQXRDLENBQWxCO0FBQ0EvQyxzQkFBZ0IsQ0FBQ3dELE9BQWpCLEdBQTJCRCxXQUEzQjtBQUNBakQsU0FBRyxDQUFDZ0IsYUFBSixHQUFvQixFQUFwQjtBQUNBaEIsU0FBRyxDQUFDZ0IsYUFBSixDQUFrQm1DLGNBQWxCLEdBQW1DSCxXQUFuQztBQUNBaEQsU0FBRyxDQUFDZ0IsYUFBSixDQUFrQm9DLE9BQWxCLEdBQTRCTCxLQUE1QixDQTlCSSxDQStCSjs7QUFDQSxXQUFLLElBQUlNLENBQUMsR0FBR1gsY0FBYixFQUE2QlcsQ0FBQyxHQUFHZCxLQUFLLENBQUNNLE1BQXZDLEVBQStDUSxDQUFDLEVBQWhELEVBQW1EO0FBRWxEO0FBQ0E7QUFDQSxZQUFJZCxLQUFLLENBQUNjLENBQUQsQ0FBTCxDQUFTUixNQUFULEtBQW9CLENBQXBCLElBQXlCTixLQUFLLENBQUNjLENBQUQsQ0FBTCxLQUFhLEVBQTFDLEVBQTZDO0FBQzVDLGlCQUFPZCxLQUFLLENBQUNjLENBQUQsQ0FBTCxLQUFhLEVBQWIsSUFBbUJBLENBQUMsR0FBR2QsS0FBSyxDQUFDTSxNQUFwQyxFQUEyQztBQUN6Q1EsYUFBQztBQUNGOztBQUNEVix5QkFBZSxHQUFHVSxDQUFDLEdBQUcsQ0FBdEI7QUFDQTtBQUNBLFNBVmlELENBWWxEOzs7QUFDQSxZQUFJdkMsSUFBSSxHQUFHeUIsS0FBSyxDQUFDYyxDQUFELENBQUwsQ0FBU2IsUUFBVCxHQUFvQkMsS0FBcEIsQ0FBMEIsSUFBMUIsQ0FBWCxDQWJrRCxDQWFOOztBQUM1QyxZQUFJYSxRQUFRLEdBQUd4QyxJQUFJLENBQUMsQ0FBRCxDQUFuQixDQWRrRCxDQWdCbEQ7O0FBQ0EsWUFBSXdDLFFBQVEsQ0FBQ2QsUUFBVCxHQUFvQmhDLFdBQXBCLE1BQXFDLFdBQXpDLEVBQXFEO0FBQ3BEbUMseUJBQWUsR0FBR1UsQ0FBQyxHQUFHLENBQXRCO0FBQ0E7QUFDQTs7QUFFRCxZQUFJRSxNQUFNLEdBQUd6QyxJQUFJLENBQUMsQ0FBRCxDQUFqQjtBQUNBLFlBQUkwQyxRQUFRLEdBQUcxQyxJQUFJLENBQUMsQ0FBRCxDQUFuQjtBQUNBLFlBQUkyQyxRQUFRLEdBQUczQyxJQUFJLENBQUMsQ0FBRCxDQUFuQjtBQUNBLFlBQUk0QyxJQUFJLEdBQUs1QyxJQUFJLENBQUMrQixNQUFMLEdBQWMsQ0FBaEIsR0FBcUIvQixJQUFJLENBQUMsQ0FBRCxDQUF6QixHQUErQixHQUExQyxDQXpCa0QsQ0F5Qkg7O0FBQy9DLFlBQUk2QyxJQUFJLEdBQUs3QyxJQUFJLENBQUMrQixNQUFMLEdBQWMsQ0FBaEIsR0FBcUIvQixJQUFJLENBQUMsQ0FBRCxDQUF6QixHQUErQixHQUExQyxDQTFCa0QsQ0EwQkg7O0FBQy9DLFlBQUk4QyxTQUFTLEdBQUs5QyxJQUFJLENBQUMrQixNQUFMLEdBQWMsQ0FBaEIsR0FBcUIvQixJQUFJLENBQUMsQ0FBRCxDQUF6QixHQUErQmIsU0FBL0M7QUFDQSxZQUFJNEQsVUFBVSxHQUFLL0MsSUFBSSxDQUFDK0IsTUFBTCxHQUFjLENBQWhCLEdBQXFCL0IsSUFBSSxDQUFDLENBQUQsQ0FBekIsR0FBK0JiLFNBQWhELENBNUJrRCxDQThCbEQ7O0FBQ0EsWUFBSTZELE9BQU8sR0FBRztBQUNiQyxlQUFLLEVBQUUsT0FETTtBQUViakQsY0FBSSxFQUNKO0FBQ0NXLGNBQUUsRUFBRThCLE1BREw7QUFFQ1MsaUJBQUssRUFBRVYsUUFGUjtBQUdDVyxpQkFBSyxFQUFFLEVBSFI7QUFJQ3ZDLGdCQUFJLEVBQUU7QUFDTEMsZUFBQyxFQUFFdUMsVUFBVSxDQUFFUixJQUFGLENBRFI7QUFFTDlCLGVBQUMsRUFBRXNDLFVBQVUsQ0FBRVAsSUFBRixDQUZSO0FBR0w5QixlQUFDLEVBQUUrQixTQUhFO0FBSUw5QixlQUFDLEVBQUUrQjtBQUpFO0FBSlA7QUFIYSxTQUFkOztBQWdCQSxZQUFJLEtBQUt6RCxnQkFBTCxDQUF1Qm9ELFFBQXZCLENBQUosRUFBcUM7QUFDcEMsZUFBSzdDLGtCQUFMLENBQXlCbUQsT0FBekIsRUFBa0NOLFFBQWxDLEVBQTRDLElBQTVDO0FBQ0EsZUFBS3ZDLFVBQUwsQ0FBZ0I2QyxPQUFoQjtBQUNBLFNBSEQsTUFHTTtBQUNMLGdCQUFNLHlCQUFOO0FBQ0E7O0FBRUQsWUFBSUwsUUFBUSxJQUFJLElBQWhCLEVBQXFCO0FBQ3BCSyxpQkFBTyxDQUFDaEQsSUFBUixDQUFhVSxNQUFiLEdBQXNCaUMsUUFBdEI7QUFDQTs7QUFFRCxZQUFLSyxPQUFPLENBQUNoRCxJQUFSLFNBQUwsRUFBMEI7QUFDekJwQiwwQkFBZ0IsQ0FBQ3lFLCtCQUFqQixDQUFrREwsT0FBTyxDQUFDaEQsSUFBMUQsRUFBZ0VnRCxPQUFPLENBQUNoRCxJQUFSLFNBQWhFOztBQUVBLGNBQUssQ0FBQ2dELE9BQU8sQ0FBQ2hELElBQVIsQ0FBYVksSUFBYixDQUFrQkcsQ0FBbkIsSUFBd0IsQ0FBQ2lDLE9BQU8sQ0FBQ2hELElBQVIsQ0FBYVksSUFBYixDQUFrQkksQ0FBaEQsRUFBb0Q7QUFDbkQsZ0JBQUlzQyxRQUFRLEdBQUcxRSxnQkFBZ0IsQ0FBQzJFLG9CQUFqQixDQUF1Q1AsT0FBTyxDQUFDaEQsSUFBUixTQUF2QyxDQUFmO0FBQ0FnRCxtQkFBTyxDQUFDaEQsSUFBUixDQUFhWSxJQUFiLENBQWtCRyxDQUFsQixHQUFzQmlDLE9BQU8sQ0FBQ2hELElBQVIsQ0FBYVksSUFBYixDQUFrQkcsQ0FBbEIsSUFBdUJ1QyxRQUFRLENBQUNFLEtBQXREO0FBQ0FSLG1CQUFPLENBQUNoRCxJQUFSLENBQWFZLElBQWIsQ0FBa0JJLENBQWxCLEdBQXNCZ0MsT0FBTyxDQUFDaEQsSUFBUixDQUFhWSxJQUFiLENBQWtCSSxDQUFsQixJQUF1QnNDLFFBQVEsQ0FBQ0csTUFBdEQ7QUFDQTtBQUNEOztBQUVEbkMsYUFBSyxDQUFDb0MsSUFBTixDQUFXVixPQUFYO0FBRUEsT0F0R0csQ0F3R0o7OztBQUNBLFdBQUssSUFBSVQsQ0FBQyxHQUFHVixlQUFiLEVBQThCVSxDQUFDLEdBQUdkLEtBQUssQ0FBQ00sTUFBeEMsRUFBaURRLENBQUMsRUFBbEQsRUFBcUQ7QUFDcEQ7QUFDQSxZQUFJZCxLQUFLLENBQUNjLENBQUQsQ0FBTCxDQUFTUixNQUFULEtBQW9CLENBQXhCLEVBQTBCO0FBQ3pCO0FBQ0E7O0FBQ0QsWUFBSS9CLElBQUksR0FBR3lCLEtBQUssQ0FBQ2MsQ0FBRCxDQUFMLENBQVNiLFFBQVQsR0FBb0JDLEtBQXBCLENBQTBCLElBQTFCLENBQVg7QUFDQSxZQUFJZ0MsTUFBTSxHQUFHM0QsSUFBSSxDQUFDLENBQUQsQ0FBakI7QUFDQSxZQUFJNEQsVUFBVSxHQUFHNUQsSUFBSSxDQUFDLENBQUQsQ0FBckI7QUFDQSxZQUFJNkQsVUFBVSxHQUFHN0QsSUFBSSxDQUFDLENBQUQsQ0FBckI7QUFDQSxZQUFJOEQsUUFBUSxHQUFHOUQsSUFBSSxDQUFDLENBQUQsQ0FBbkI7QUFFQSxZQUFJK0QsT0FBTyxHQUFHO0FBQ2JkLGVBQUssRUFBRSxPQURNO0FBRWJqRCxjQUFJLEVBQ0o7QUFDQ1csY0FBRSxFQUFFZ0QsTUFETDtBQUVDSyxrQkFBTSxFQUFFSixVQUZUO0FBR0NLLGtCQUFNLEVBQUVKO0FBSFQ7QUFIYSxTQUFkO0FBVUEsWUFBSSxLQUFLakUsZ0JBQUwsQ0FBdUJrRSxRQUF2QixDQUFKLEVBQ0MsS0FBS2pFLGtCQUFMLENBQXlCa0UsT0FBekIsRUFBa0NELFFBQWxDLEVBREQsS0FFSTtBQUNILGdCQUFNLHlCQUFOO0FBQ0E7QUFFRGxGLHdCQUFnQixDQUFDc0YsK0JBQWpCLENBQWtESCxPQUFPLENBQUMvRCxJQUExRCxFQUFnRStELE9BQU8sQ0FBQy9ELElBQVIsU0FBaEU7QUFFQXVCLGFBQUssQ0FBQ21DLElBQU4sQ0FBWUssT0FBWjtBQUNBOztBQUNELFVBQUlJLE9BQU8sR0FBRyxFQUFkO0FBQ0FBLGFBQU8sQ0FBQzdDLEtBQVIsR0FBZ0JBLEtBQWhCO0FBQ0E2QyxhQUFPLENBQUM1QyxLQUFSLEdBQWdCQSxLQUFoQjtBQUNBLGFBQU80QyxPQUFQO0FBQ0E7QUFDRCxHQW5KRDs7QUFxSkEsU0FBT3RGLFFBQVA7QUFDQSxDQWpPRCIsImZpbGUiOiIuL3NyYy91dGlsaXRpZXMvdGFiLWRlbGltaXRlZC10by1qc29uLWNvbnZlcnRlci1mYWN0b3J5LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGxpYnNiZ25qcyA9IHJlcXVpcmUoJ2xpYnNiZ24uanMnKTtcbnZhciBwYXJzZVN0cmluZyA9IHJlcXVpcmUoJ3htbDJqcycpLnBhcnNlU3RyaW5nO1xudmFyIGxpYlV0aWxpdGllcyA9IHJlcXVpcmUoJy4vbGliLXV0aWxpdGllcycpO1xudmFyIGNsYXNzZXMgPSByZXF1aXJlKCcuL2NsYXNzZXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcblx0dmFyIGVsZW1lbnRVdGlsaXRpZXM7XG5cblx0ZnVuY3Rpb24gdGRUb0pzb24ocGFyYW0pIHtcblx0XHRvcHRpb25VdGlsaXRpZXMgPSBwYXJhbS5vcHRpb25VdGlsaXRpZXM7XG5cdFx0b3B0aW9ucyA9IG9wdGlvblV0aWxpdGllcy5nZXRPcHRpb25zKCk7XG5cdFx0ZWxlbWVudFV0aWxpdGllcyA9IHBhcmFtLmVsZW1lbnRVdGlsaXRpZXM7XG5cdH1cblxuXHR0ZFRvSnNvbi5tYXAgPSB1bmRlZmluZWQ7XG5cblx0dGRUb0pzb24uZWRnZVR5cGVzPSB7IFxuXHRcdCdwb3NpdGl2ZSBpbmZsdWVuY2UnOiB0cnVlLCBcblx0XHQnbmVnYXRpdmUgaW5mbHVlbmNlJzogdHJ1ZSwgXG5cdFx0J3Vua25vd24gaW5mbHVlbmNlJzogdHJ1ZSwgXG5cdFx0J25lY2Fzc2FyeSBpbmZsdWVuY2UnOiB0cnVlLFxuXHRcdCdsb2dpYyBhcmNzJzogdHJ1ZSwgXG5cdFx0J2VxdWl2YWxhbmNlIGFyY3MnOiB0cnVlIFxuXHR9O1xuXG5cdHRkVG9Kc29uLm5vZGVUeXBlcz0ge1xuXHRcdCdiaW9sb2dpY2FsIGFjdGl2aXR5JzogJ0JBIHBsYWluJyxcblx0XHQnbWFjcm9tb2xlY3VsZSc6ICdCQSBtYWNyb21vbGVjdWxlJywgXG5cdFx0J2NvbXBsZXgnOiAnQkEgY29tcGxleCcsIFxuXHRcdCdzaW1wbGUgY2hlbWljYWwnOiAnQkEgc2ltcGxlIGNoZW1pY2FsJywgXG5cdFx0J3Vuc3BlY2lmaWVkIGVudGl0eSc6ICdCQSB1bnNwZWNpZmllZCBlbnRpdHknLCBcblx0XHQnbnVjbGVpYyBhY2lkIGZlYXR1cmUnOiAnQkEgbnVjbGVpYyBhY2lkIGZlYXR1cmUnLFxuXHRcdCdwZXJ0dXJiaW5nIGFnZW50JzonQkEgcGVydHVyYmluZyBhZ2VudCcsIFxuXHRcdCdwaGVub3R5cGUnOiAncGhlbm90eXBlJywgXG5cdFx0J2NvbXBhcnRtZW50JzogJ2NvbXBhcnRtZW50JywgXG5cdFx0J3N1Ym1hcCc6ICdzdWJtYXAnLCBcblx0XHQndGFnJzogJ3RhZycsIFxuXHRcdCdhbmQnOiAnYW5kJywgXG5cdFx0J29yJzogJ29yJywgXG5cdFx0J25vdCc6ICdub3QnLCBcblx0XHQnZGVsYXknOiAnZGVsYXknXG5cdH07XG5cblx0dGRUb0pzb24udmFsaWRhdGVOb2RlVHlwZSA9IGZ1bmN0aW9uKCB0eXBlKXtcblx0XHR2YXIgX3R5cGUgPSB0eXBlLnJlcGxhY2UoL18vZywgJyAnKS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiB0aGlzLm5vZGVUeXBlcy5oYXNPd25Qcm9wZXJ0eShfdHlwZSk7XG5cdH07XG5cblx0dGRUb0pzb24udmFsaWRhdGVFZGdlVHlwZSA9IGZ1bmN0aW9uKCB0eXBlKXtcblx0XHR2YXIgX3R5cGUgPSB0eXBlLnJlcGxhY2UoL18vZywgJyAnKS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiB0aGlzLmVkZ2VUeXBlcy5oYXNPd25Qcm9wZXJ0eShfdHlwZSk7XG5cdH07XG5cblx0dGRUb0pzb24uY29udmVydFR5cGVUb0NsYXNzID0gZnVuY3Rpb24oIGVsZSwgdHlwZSwgaXNOb2RlKXtcblx0XHR2YXIgX3R5cGUgPSB0eXBlLnJlcGxhY2UoL18vZywgJyAnKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGVsZS5kYXRhLmNsYXNzID0gaXNOb2RlID8gdGhpcy5ub2RlVHlwZXNbX3R5cGVdIDogX3R5cGU7XG5cdH07XG5cblx0dGRUb0pzb24ubWFwUHJvcGVydGllc1RvT2JqID0gZnVuY3Rpb24oKXtcblx0XHRyZXR1cm4geyBtYXBQcm9wZXJ0aWVzOiB0aGlzLm1hcC5tYXBQcm9wZXJ0aWVzfTtcblx0fTtcblxuXHQvKipcblx0ICogQWRkcyBzdGF0ZXMgYW5kIGluZm9ib3ggaW5mb3JtYXRpb24gdG8gZ2l2ZW4gbm9kZVxuXHQgKiBAcGFyYW0gbm9kZSA6IGEgbm9kZSBvYmplY3Rcblx0ICovXG5cdHRkVG9Kc29uLmFkZEluZm9Cb3ggPSBmdW5jdGlvbihub2RlKXtcblx0XHR2YXIgX2NsYXNzID0gbm9kZS5kYXRhLmNsYXNzO1xuXHRcdGlmIChfY2xhc3Muc3RhcnRzV2l0aChcIkJBXCIpICYmIF9jbGFzcyAhPSBcIkJBIHBsYWluXCIpe1xuXHRcdFx0dmFyIHVuaXRPZkluZm9ybWF0aW9uID0gY2xhc3Nlcy5Vbml0T2ZJbmZvcm1hdGlvbi5jb25zdHJ1Y3QoKTtcblx0XHRcdHVuaXRPZkluZm9ybWF0aW9uLnBhcmVudCA9IG5vZGUuZGF0YS5pZDtcblx0XHRcdC8vIGZpbGUgZm9ybWF0IGRvZXMgbm90IGNvbnRhaW4gYmJveCBpbmZvcm1hdGlvbiwgaGVuY2UgZGVmaW5lIHRoZW0gYmVsb3dcblx0XHRcdHVuaXRPZkluZm9ybWF0aW9uLmJib3ggPSB7eDogMjUsIHk6IC01MCwgdzogMzAsIGg6IDEyfTtcblx0XHRcdGNsYXNzZXMuVW5pdE9mSW5mb3JtYXRpb24uc2V0QW5jaG9yU2lkZSh1bml0T2ZJbmZvcm1hdGlvbik7XG5cdFx0XHRub2RlLmRhdGEuc3RhdGVzYW5kaW5mb3MgPSBbdW5pdE9mSW5mb3JtYXRpb25dO1xuXHRcdH0gZWxzZXtcblx0XHRcdG5vZGUuZGF0YS5zdGF0ZXNhbmRpbmZvcyA9IFtdO1xuXHRcdH1cblx0fVxuXG5cdHRkVG9Kc29uLmNvbnZlcnQgPSBmdW5jdGlvbiggZ3JhcGhUZXh0KXtcblx0XHRlbGVtZW50VXRpbGl0aWVzLmZpbGVGb3JtYXQgPSAndGQnO1xuXHRcdGlmKCBncmFwaFRleHQgPT09IHVuZGVmaW5lZClcblx0XHR7XG5cdFx0XHRyZXR1cm4geyBub2RlczogW10sIGVkZ2VzOiBbXX07XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0dmFyIG1hcCA9IHt9O1xuXHRcdFx0dmFyIG5vZGVzID0gW107IC8vSG9sZHMgbm9kZXNcblx0XHRcdHZhciBlZGdlcyA9IFtdOyAvL0hvbGRzIGVkZ2VzXG5cdFx0XHR0aGlzLm1hcCA9IG1hcDtcblxuXHRcdFx0Ly9EZWZpbmUgdGhlIGxpbmUgc2VwYXJhdG9yXG5cdFx0XHQvLyBcXHJcXG4sIFxcbiBhbmQgXFxyIGxpbmUgc2VwYXJhdG9yc1xuXHRcdFx0dmFyIHNlcGFyYXRvciA9IC9cXHI/XFxufFxcci87XG5cdFx0XHR2YXIgbGluZXMgPSBncmFwaFRleHQudG9TdHJpbmcoKS5zcGxpdCggc2VwYXJhdG9yKTtcblx0XHRcdHZhciBncmFwaERhdGFJbmRleCA9IDQ7IC8vZ3JhcGggZGF0YSBzdGFydHMgYXQgaW5kZXggNFxuXHRcdFx0dmFyIGVkZ2VzU3RhcnRJbmRleCA9IC0xOyAvL3Vua293biBhdCB0aGUgYmVnaW5pbmdcblxuXHRcdFx0dmFyIGZvcm1hdFZlcnNpb24gPSBsaW5lc1swXTtcblxuXHRcdFx0aWYoIGZvcm1hdFZlcnNpb24ubGVuZ3RoIDwgMTAgfHwgZm9ybWF0VmVyc2lvbi5zdWJzdHJpbmcoMCwxMCkudG9Mb3dlckNhc2UoKSAhPSAnc2JnbnZpeiBhZicpXG5cdFx0XHR7XG5cdFx0XHRcdHRocm93IFwiV3JvbmcgZmlsZSBmb3JtYXQhXCI7XG5cdFx0XHR9XG5cblx0XHRcdGlmKCBmb3JtYXRWZXJzaW9uLmxlbmd0aCA9PSAxMCl7XG5cdFx0XHRcdGZvcm1hdFZlcnNpb24gPSBmb3JtYXRWZXJzaW9uICsgXCIgMS4wXCI7IC8vZGVmYXVsdCAxLjBcblx0XHRcdH1cblx0XHRcdHZhciB0aXRsZSA9IGxpbmVzWzFdO1xuXHRcdFx0dmFyIGRlc2NyaXB0aW9uID0gbGluZXNbMl07XG5cdFx0XHQvL1NlY29uZCBlbGVtZW50IG9mIHRoZSBmb3JtYXQgdmVyc2lvbiBzcGVjaWZpZXMgbWFwIGxhbmd1YWdlXG5cdFx0XHR2YXIgbWFwTGFuZ3VhZ2UgPSAoZm9ybWF0VmVyc2lvbi50b1N0cmluZygpLnNwbGl0KFwiIFwiKSlbMV07IFxuXHRcdFx0ZWxlbWVudFV0aWxpdGllcy5tYXBUeXBlID0gbWFwTGFuZ3VhZ2U7XG5cdFx0XHRtYXAubWFwUHJvcGVydGllcyA9IHt9O1xuXHRcdFx0bWFwLm1hcFByb3BlcnRpZXMubWFwRGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcblx0XHRcdG1hcC5tYXBQcm9wZXJ0aWVzLm1hcE5hbWUgPSB0aXRsZTtcblx0XHRcdC8vc3RhcnQgdG8gcGFyc2UgdGhlIGdyYXBoXG5cdFx0XHRmb3IoIHZhciBpID0gZ3JhcGhEYXRhSW5kZXg7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKyl7XG5cblx0XHRcdFx0Ly9ibGFuayBsaW5lIGluZGljYXRlcyB0aGF0IG5vZGVzIGFyZSBmaW5pc2hlZFxuXHRcdFx0XHQvL3NvIGNvbnRpbnVlIHdpdGggZWRnZXNcblx0XHRcdFx0aWYoIGxpbmVzW2ldLmxlbmd0aCA9PT0gMCB8fCBsaW5lc1tpXSA9PT0gXCJcIil7XG5cdFx0XHRcdFx0d2hpbGUoIGxpbmVzW2ldID09PSBcIlwiICYmIGkgPCBsaW5lcy5sZW5ndGgpe1xuXHRcdFx0XHRcdFx0XHRpKys7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVkZ2VzU3RhcnRJbmRleCA9IGkgKyAyO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly9QYXJzZSB0aGUgbm9kZSBkYXRhXG5cdFx0XHRcdHZhciBkYXRhID0gbGluZXNbaV0udG9TdHJpbmcoKS5zcGxpdCgnXFx0Jyk7IC8vZWFjaCBkYXRhIHNlcGVyYXRlZCBieSB0YWJcblx0XHRcdFx0dmFyIG5vZGVOYW1lID0gZGF0YVswXTtcblxuXHRcdFx0XHQvL0lmIHRoZXJlIGlzIG5vIGJsYW5rIGxpbmVcblx0XHRcdFx0aWYoIG5vZGVOYW1lLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKSA9PSAnLS1lZGdlX2lkJyl7XG5cdFx0XHRcdFx0ZWRnZXNTdGFydEluZGV4ID0gaSArIDE7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgbm9kZUlkID0gZGF0YVsxXTtcblx0XHRcdFx0dmFyIG5vZGVUeXBlID0gZGF0YVsyXTtcblx0XHRcdFx0dmFyIHBhcmVudElEID0gZGF0YVszXTtcblx0XHRcdFx0dmFyIHBvc1ggPSAoIGRhdGEubGVuZ3RoID4gNCkgPyBkYXRhWzRdIDogXCIwXCI7IC8vaWYgcG9zWCBub3QgZ2l2ZW5cblx0XHRcdFx0dmFyIHBvc1kgPSAoIGRhdGEubGVuZ3RoID4gNSkgPyBkYXRhWzVdIDogXCIwXCI7IC8vaWYgcG9zWSBub3QgZ2l2ZW5cblx0XHRcdFx0dmFyIG5vZGVXaWR0aCA9ICggZGF0YS5sZW5ndGggPiA2KSA/IGRhdGFbNl0gOiB1bmRlZmluZWQ7XG5cdFx0XHRcdHZhciBub2RlSGVpZ2h0ID0gKCBkYXRhLmxlbmd0aCA+IDcpID8gZGF0YVs3XSA6IHVuZGVmaW5lZDtcblxuXHRcdFx0XHQvL2FkZCBwYXJzZWQgTm9kZVxuXHRcdFx0XHR2YXIgbmV3Tm9kZSA9IHtcblx0XHRcdFx0XHRncm91cDogJ25vZGVzJyxcblx0XHRcdFx0XHRkYXRhOlxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGlkOiBub2RlSWQsXG5cdFx0XHRcdFx0XHRsYWJlbDogbm9kZU5hbWUsXG5cdFx0XHRcdFx0XHRwb3J0czogW10sXG5cdFx0XHRcdFx0XHRiYm94OiB7XG5cdFx0XHRcdFx0XHRcdHg6IHBhcnNlRmxvYXQoIHBvc1gpLFxuXHRcdFx0XHRcdFx0XHR5OiBwYXJzZUZsb2F0KCBwb3NZKSxcblx0XHRcdFx0XHRcdFx0dzogbm9kZVdpZHRoLFxuXHRcdFx0XHRcdFx0XHRoOiBub2RlSGVpZ2h0XG5cdFx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblxuXHRcdFx0XHRpZiggdGhpcy52YWxpZGF0ZU5vZGVUeXBlKCBub2RlVHlwZSkpe1xuXHRcdFx0XHRcdHRoaXMuY29udmVydFR5cGVUb0NsYXNzKCBuZXdOb2RlLCBub2RlVHlwZSwgdHJ1ZSk7XG5cdFx0XHRcdFx0dGhpcy5hZGRJbmZvQm94KG5ld05vZGUpO1xuXHRcdFx0XHR9IGVsc2V7XG5cdFx0XHRcdFx0dGhyb3cgXCJOb2RlIHR5cGUgbWlzbWF0Y2hlZC4uLlwiO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYoIHBhcmVudElEICE9ICctMScpe1xuXHRcdFx0XHRcdG5ld05vZGUuZGF0YS5wYXJlbnQgPSBwYXJlbnRJRDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggbmV3Tm9kZS5kYXRhLmNsYXNzICkge1xuXHRcdFx0XHRcdGVsZW1lbnRVdGlsaXRpZXMuZXh0ZW5kTm9kZURhdGFXaXRoQ2xhc3NEZWZhdWx0cyggbmV3Tm9kZS5kYXRhLCBuZXdOb2RlLmRhdGEuY2xhc3MgKTtcblxuXHRcdFx0XHRcdGlmICggIW5ld05vZGUuZGF0YS5iYm94LncgfHwgIW5ld05vZGUuZGF0YS5iYm94LmggKSB7XG5cdFx0XHRcdFx0XHR2YXIgZGVmYXVsdHMgPSBlbGVtZW50VXRpbGl0aWVzLmdldERlZmF1bHRQcm9wZXJ0aWVzKCBuZXdOb2RlLmRhdGEuY2xhc3MgKTtcblx0XHRcdFx0XHRcdG5ld05vZGUuZGF0YS5iYm94LncgPSBuZXdOb2RlLmRhdGEuYmJveC53IHx8IGRlZmF1bHRzLndpZHRoO1xuXHRcdFx0XHRcdFx0bmV3Tm9kZS5kYXRhLmJib3guaCA9IG5ld05vZGUuZGF0YS5iYm94LmggfHwgZGVmYXVsdHMuaGVpZ2h0O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdG5vZGVzLnB1c2gobmV3Tm9kZSk7XG5cblx0XHRcdH1cblxuXHRcdFx0Ly9TdGFydCBwYXJzaW5nIGVkZ2VzXG5cdFx0XHRmb3IoIHZhciBpID0gZWRnZXNTdGFydEluZGV4OyBpIDwgbGluZXMubGVuZ3RoIDsgaSsrKXtcblx0XHRcdFx0Ly9FT0YgZmluaXNoIGxvb3Bcblx0XHRcdFx0aWYoIGxpbmVzW2ldLmxlbmd0aCA9PT0gMCl7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0dmFyIGRhdGEgPSBsaW5lc1tpXS50b1N0cmluZygpLnNwbGl0KCdcXHQnKTtcblx0XHRcdFx0dmFyIGVkZ2VJRCA9IGRhdGFbMF07XG5cdFx0XHRcdHZhciBlZGdlU291cmNlID0gZGF0YVsxXTtcblx0XHRcdFx0dmFyIGVkZ2VUYXJnZXQgPSBkYXRhWzJdO1xuXHRcdFx0XHR2YXIgZWRnZVR5cGUgPSBkYXRhWzNdO1xuXG5cdFx0XHRcdHZhciBuZXdFZGdlID0ge1xuXHRcdFx0XHRcdGdyb3VwOiAnZWRnZXMnLFxuXHRcdFx0XHRcdGRhdGE6XG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0aWQ6IGVkZ2VJRCxcblx0XHRcdFx0XHRcdHNvdXJjZTogZWRnZVNvdXJjZSxcblx0XHRcdFx0XHRcdHRhcmdldDogZWRnZVRhcmdldFxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblxuXHRcdFx0XHRpZiggdGhpcy52YWxpZGF0ZUVkZ2VUeXBlKCBlZGdlVHlwZSkpXG5cdFx0XHRcdFx0dGhpcy5jb252ZXJ0VHlwZVRvQ2xhc3MoIG5ld0VkZ2UsIGVkZ2VUeXBlKTtcblx0XHRcdFx0ZWxzZXtcblx0XHRcdFx0XHR0aHJvdyBcIkVkZ2UgVHlwZSBtaXNtYXRjaGVkLi4uXCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRlbGVtZW50VXRpbGl0aWVzLmV4dGVuZEVkZ2VEYXRhV2l0aENsYXNzRGVmYXVsdHMoIG5ld0VkZ2UuZGF0YSwgbmV3RWRnZS5kYXRhLmNsYXNzICk7XG5cblx0XHRcdFx0ZWRnZXMucHVzaCggbmV3RWRnZSk7XG5cdFx0XHR9XG5cdFx0XHR2YXIganNHcmFwaCA9IHt9O1xuXHRcdFx0anNHcmFwaC5ub2RlcyA9IG5vZGVzO1xuXHRcdFx0anNHcmFwaC5lZGdlcyA9IGVkZ2VzO1xuXHRcdFx0cmV0dXJuIGpzR3JhcGg7XG5cdFx0fVxuXHR9O1xuXG5cdHJldHVybiB0ZFRvSnNvbjtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/utilities/tab-delimited-to-json-converter-factory.js\n");

/***/ }),

/***/ "./src/utilities/text-utilities.js":
/*!*****************************************!*\
  !*** ./src/utilities/text-utilities.js ***!
  \*****************************************/
/***/ ((module) => {

eval("/*\n * Text utilities for common usage\n */\nvar textUtilities = {\n  // same purpose as previous one, but with clearer responsibility\n  truncate: function truncate(text, font, width) {\n    text = text + \"\";\n    var context = document.createElement('canvas').getContext(\"2d\");\n    context.font = font; // check trivial case first, when entire text is already small enough\n\n    if (context.measureText(text).width < width) {\n      return text;\n    } else {\n      var ellipsis = \"..\"; // if ellipsis alone is already too large\n\n      if (context.measureText(ellipsis).width > width) {\n        return \"\";\n      }\n\n      var finalLength; // this should always have a value after the loop\n\n      for (var i = 0; i < text.length; i++) {\n        var subtext = text.substring(0, i) + ellipsis;\n\n        if (context.measureText(subtext).width > width) {\n          // we're too far, take the previous index\n          finalLength = i > 0 ? i - 1 : 0;\n          break;\n        }\n      }\n\n      return text.substring(0, finalLength) + ellipsis;\n    }\n  },\n  // ensure that returned string follows xsd:ID standard\n  // should follow r'^[a-zA-Z_][\\w.-]*$'\n  getXMLValidId: function getXMLValidId(originalId) {\n    var newId = \"\";\n    var xmlValidRegex = /^[a-zA-Z_][\\w.-]*$/;\n\n    if (!xmlValidRegex.test(originalId)) {\n      // doesn't comply\n      newId = originalId;\n      newId = newId.replace(/[^\\w.-]/g, \"\");\n\n      if (!xmlValidRegex.test(newId)) {\n        // still doesn't comply\n        newId = \"_\" + newId;\n\n        if (!xmlValidRegex.test(newId)) {\n          // normally we should never enter this\n          // if for some obscure reason we still don't comply, throw error.\n          throw new Error(\"Can't make identifer comply to xsd:ID requirements: \" + newId);\n        }\n      }\n\n      return newId;\n    } else {\n      return originalId;\n    }\n  },\n  getWidthByContent: function getWidthByContent(content, fontFamily, fontSize, options) {\n    var DEFAULT_MARGIN = 5;\n    var lines = content.split(\"\\n\");\n    var context = document.createElement('canvas').getContext('2d'); // should not make type check so '===' should not be used here\n\n    var shouldAppend = parseFloat(fontSize) == fontSize;\n    var validFontSize = shouldAppend ? fontSize + 'px' : fontSize;\n    context.font = validFontSize + ' ' + fontFamily;\n    var width = 0;\n    lines.forEach(function (line) {\n      var w = context.measureText(line).width;\n\n      if (w > width) {\n        width = w;\n      }\n    });\n    var margin = options && options.margin;\n\n    if (margin == null) {\n      margin = DEFAULT_MARGIN;\n    }\n\n    width += 2 * margin;\n    var min = options && options.min;\n    var max = options && options.max;\n\n    if (min != null && width < min) {\n      width = min;\n    } else if (max != null && width > max) {\n      width = max;\n    }\n\n    return width;\n  },\n  FromKebabToCamelCase: function FromKebabToCamelCase(input) {\n    return input.replace(/(-\\w)/g, function (m) {\n      return m[1].toUpperCase();\n    });\n  },\n  FromCamelToKebabCase: function FromCamelToKebabCase(input) {\n    return input.replace(/[\\w]([A-Z])/g, function (m) {\n      return m[0] + \"-\" + m[1];\n    }).toLowerCase();\n  }\n};\nmodule.exports = textUtilities;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/text-utilities.js\n");

/***/ }),

/***/ "./src/utilities/ui-utilities-factory.js":
/*!***********************************************!*\
  !*** ./src/utilities/ui-utilities-factory.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n* Commonly needed UI Utilities\n*/\nvar libUtilities = __webpack_require__(/*! ./lib-utilities */ \"./src/utilities/lib-utilities.js\");\n\nvar libs = libUtilities.getLibs();\nvar jQuery = $ = libs.jQuery;\n\nmodule.exports = function () {\n  var optionUtilities;\n  var options;\n\n  function uiUtilities(param) {\n    optionUtilities = param.optionUtilities;\n    options = optionUtilities.getOptions();\n  }\n\n  uiUtilities.startSpinner = function (className) {\n    if (!className) {\n      className = 'default-class';\n    }\n\n    if ($('.' + className).length === 0) {\n      var containerWidth = $(options.networkContainerSelector).width();\n      var containerHeight = $(options.networkContainerSelector).height();\n      $(options.networkContainerSelector + ':parent').prepend('<i style=\"position: absolute; z-index: 9999999; left: ' + containerWidth / 2 + 'px; top: ' + containerHeight / 2 + 'px;\" class=\"fa fa-spinner fa-spin fa-3x fa-fw ' + className + '\"></i>');\n    }\n  };\n\n  uiUtilities.endSpinner = function (className) {\n    if (!className) {\n      className = 'default-class';\n    }\n\n    if ($('.' + className).length > 0) {\n      $('.' + className).remove();\n    }\n  };\n\n  return uiUtilities;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vc3JjL3V0aWxpdGllcy91aS11dGlsaXRpZXMtZmFjdG9yeS5qcz83ZjMyIl0sIm5hbWVzIjpbImxpYlV0aWxpdGllcyIsInJlcXVpcmUiLCJsaWJzIiwiZ2V0TGlicyIsImpRdWVyeSIsIiQiLCJtb2R1bGUiLCJleHBvcnRzIiwib3B0aW9uVXRpbGl0aWVzIiwib3B0aW9ucyIsInVpVXRpbGl0aWVzIiwicGFyYW0iLCJnZXRPcHRpb25zIiwic3RhcnRTcGlubmVyIiwiY2xhc3NOYW1lIiwibGVuZ3RoIiwiY29udGFpbmVyV2lkdGgiLCJuZXR3b3JrQ29udGFpbmVyU2VsZWN0b3IiLCJ3aWR0aCIsImNvbnRhaW5lckhlaWdodCIsImhlaWdodCIsInByZXBlbmQiLCJlbmRTcGlubmVyIiwicmVtb3ZlIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFFQSxJQUFJQSxZQUFZLEdBQUdDLG1CQUFPLENBQUMseURBQUQsQ0FBMUI7O0FBQ0EsSUFBSUMsSUFBSSxHQUFHRixZQUFZLENBQUNHLE9BQWIsRUFBWDtBQUNBLElBQUlDLE1BQU0sR0FBR0MsQ0FBQyxHQUFHSCxJQUFJLENBQUNFLE1BQXRCOztBQUVBRSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsWUFBWTtBQUU1QixNQUFJQyxlQUFKO0FBQ0EsTUFBSUMsT0FBSjs7QUFFQSxXQUFTQyxXQUFULENBQXNCQyxLQUF0QixFQUE2QjtBQUMzQkgsbUJBQWUsR0FBR0csS0FBSyxDQUFDSCxlQUF4QjtBQUNBQyxXQUFPLEdBQUdELGVBQWUsQ0FBQ0ksVUFBaEIsRUFBVjtBQUNEOztBQUVERixhQUFXLENBQUNHLFlBQVosR0FBMkIsVUFBVUMsU0FBVixFQUFxQjtBQUM5QyxRQUFJLENBQUNBLFNBQUwsRUFBZ0I7QUFDZEEsZUFBUyxHQUFHLGVBQVo7QUFDRDs7QUFFRCxRQUFJVCxDQUFDLENBQUMsTUFBTVMsU0FBUCxDQUFELENBQW1CQyxNQUFuQixLQUE4QixDQUFsQyxFQUFxQztBQUNuQyxVQUFJQyxjQUFjLEdBQUdYLENBQUMsQ0FBQ0ksT0FBTyxDQUFDUSx3QkFBVCxDQUFELENBQW9DQyxLQUFwQyxFQUFyQjtBQUNBLFVBQUlDLGVBQWUsR0FBR2QsQ0FBQyxDQUFDSSxPQUFPLENBQUNRLHdCQUFULENBQUQsQ0FBb0NHLE1BQXBDLEVBQXRCO0FBQ0FmLE9BQUMsQ0FBQ0ksT0FBTyxDQUFDUSx3QkFBUixHQUFtQyxTQUFwQyxDQUFELENBQWdESSxPQUFoRCxDQUF3RCwyREFBMkRMLGNBQWMsR0FBRyxDQUE1RSxHQUFnRixXQUFoRixHQUE4RkcsZUFBZSxHQUFHLENBQWhILEdBQW9ILGdEQUFwSCxHQUF1S0wsU0FBdkssR0FBbUwsUUFBM087QUFDRDtBQUNGLEdBVkQ7O0FBWUFKLGFBQVcsQ0FBQ1ksVUFBWixHQUF5QixVQUFVUixTQUFWLEVBQXFCO0FBQzVDLFFBQUksQ0FBQ0EsU0FBTCxFQUFnQjtBQUNkQSxlQUFTLEdBQUcsZUFBWjtBQUNEOztBQUVELFFBQUlULENBQUMsQ0FBQyxNQUFNUyxTQUFQLENBQUQsQ0FBbUJDLE1BQW5CLEdBQTRCLENBQWhDLEVBQW1DO0FBQ2pDVixPQUFDLENBQUMsTUFBTVMsU0FBUCxDQUFELENBQW1CUyxNQUFuQjtBQUNEO0FBQ0YsR0FSRDs7QUFVQSxTQUFPYixXQUFQO0FBQ0EsQ0FqQ0QiLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL3VpLXV0aWxpdGllcy1mYWN0b3J5LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiogQ29tbW9ubHkgbmVlZGVkIFVJIFV0aWxpdGllc1xuKi9cblxudmFyIGxpYlV0aWxpdGllcyA9IHJlcXVpcmUoJy4vbGliLXV0aWxpdGllcycpO1xudmFyIGxpYnMgPSBsaWJVdGlsaXRpZXMuZ2V0TGlicygpO1xudmFyIGpRdWVyeSA9ICQgPSBsaWJzLmpRdWVyeTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG5cbiB2YXIgb3B0aW9uVXRpbGl0aWVzO1xuIHZhciBvcHRpb25zO1xuXG4gZnVuY3Rpb24gdWlVdGlsaXRpZXMgKHBhcmFtKSB7XG4gICBvcHRpb25VdGlsaXRpZXMgPSBwYXJhbS5vcHRpb25VdGlsaXRpZXM7XG4gICBvcHRpb25zID0gb3B0aW9uVXRpbGl0aWVzLmdldE9wdGlvbnMoKTtcbiB9XG5cbiB1aVV0aWxpdGllcy5zdGFydFNwaW5uZXIgPSBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICBpZiAoIWNsYXNzTmFtZSkge1xuICAgICBjbGFzc05hbWUgPSAnZGVmYXVsdC1jbGFzcyc7XG4gICB9XG5cbiAgIGlmICgkKCcuJyArIGNsYXNzTmFtZSkubGVuZ3RoID09PSAwKSB7XG4gICAgIHZhciBjb250YWluZXJXaWR0aCA9ICQob3B0aW9ucy5uZXR3b3JrQ29udGFpbmVyU2VsZWN0b3IpLndpZHRoKCk7XG4gICAgIHZhciBjb250YWluZXJIZWlnaHQgPSAkKG9wdGlvbnMubmV0d29ya0NvbnRhaW5lclNlbGVjdG9yKS5oZWlnaHQoKTtcbiAgICAgJChvcHRpb25zLm5ldHdvcmtDb250YWluZXJTZWxlY3RvciArICc6cGFyZW50JykucHJlcGVuZCgnPGkgc3R5bGU9XCJwb3NpdGlvbjogYWJzb2x1dGU7IHotaW5kZXg6IDk5OTk5OTk7IGxlZnQ6ICcgKyBjb250YWluZXJXaWR0aCAvIDIgKyAncHg7IHRvcDogJyArIGNvbnRhaW5lckhlaWdodCAvIDIgKyAncHg7XCIgY2xhc3M9XCJmYSBmYS1zcGlubmVyIGZhLXNwaW4gZmEtM3ggZmEtZncgJyArIGNsYXNzTmFtZSArICdcIj48L2k+Jyk7XG4gICB9XG4gfTtcblxuIHVpVXRpbGl0aWVzLmVuZFNwaW5uZXIgPSBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICBpZiAoIWNsYXNzTmFtZSkge1xuICAgICBjbGFzc05hbWUgPSAnZGVmYXVsdC1jbGFzcyc7XG4gICB9XG5cbiAgIGlmICgkKCcuJyArIGNsYXNzTmFtZSkubGVuZ3RoID4gMCkge1xuICAgICAkKCcuJyArIGNsYXNzTmFtZSkucmVtb3ZlKCk7XG4gICB9XG4gfTtcblxuIHJldHVybiB1aVV0aWxpdGllcztcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/utilities/ui-utilities-factory.js\n");

/***/ }),

/***/ "./src/utilities/undo-redo-action-functions-factory.js":
/*!*************************************************************!*\
  !*** ./src/utilities/undo-redo-action-functions-factory.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("/*\n * This file exports the functions to be utilized in undoredo extension actions\n */\nmodule.exports = function () {\n  var elementUtilities;\n  var experimentalDataOverlay;\n  var mainUtilities;\n  var cy;\n\n  function undoRedoActionFunctions(param) {\n    elementUtilities = param.elementUtilities;\n    experimentalDataOverlay = param.experimentalDataOverlay;\n    mainUtilities = param.mainUtilities;\n    cy = param.sbgnCyInstance.getCy();\n  }\n\n  undoRedoActionFunctions.deleteElesSimple = function (param) {\n    return elementUtilities.deleteElesSimple(param.eles);\n  };\n\n  undoRedoActionFunctions.restoreEles = function (eles) {\n    var param = {};\n    param.eles = elementUtilities.restoreEles(eles);\n    return param;\n  };\n\n  undoRedoActionFunctions.deleteNodesSmart = function (param) {\n    if (param.firstTime) {\n      return elementUtilities.deleteNodesSmart(param.eles);\n    }\n\n    return elementUtilities.deleteElesSimple(param.eles);\n  };\n\n  undoRedoActionFunctions.setPortsOrdering = function (param) {\n    var nodes = param.nodes;\n    var ordering = param.ordering;\n    var portDistance = param.portDistance;\n    var connectedEdges = nodes.connectedEdges();\n    var nodePropMap = {}; // Node prop map for current status of the nodes it is to be attached to the result map. It includes node current port ordering and current ports.\n\n    var edgePropMap = {}; // Edge prop map for current status of the nodes it is to be attached to the result map. It includes edge portsource and porttarget.\n    // Fill node/edge prop maps for undo/redo actions\n    // Node prop map includes a copy of node ports\n\n    for (var i = 0; i < nodes.length; i++) {\n      var node = nodes[i];\n      var ports = node.data('ports');\n      var currentOrdering = elementUtilities.getPortsOrdering(node); // Get the current node ports ordering\n\n      var portsCopy = ports.length === 2 ? [{\n        id: ports[0].id,\n        x: ports[0].x,\n        y: ports[0].y\n      }, {\n        id: ports[1].id,\n        x: ports[1].x,\n        y: ports[1].y\n      }] : [];\n      nodePropMap[node.id()] = {\n        ordering: currentOrdering,\n        ports: portsCopy\n      };\n    } // Node prop map includes edge portsource and porttarget\n\n\n    for (var i = 0; i < connectedEdges.length; i++) {\n      var edge = connectedEdges[i];\n      edgePropMap[edge.id()] = {\n        portsource: edge.data('portsource'),\n        porttarget: edge.data('porttarget')\n      };\n    }\n\n    var result = {\n      nodes: nodes,\n      nodePropMap: nodePropMap,\n      edgePropMap: edgePropMap\n    }; // If this is the first time call related method from element utilities else go back to the stored props of nodes/edges\n\n    if (param.firstTime) {\n      elementUtilities.setPortsOrdering(nodes, ordering, portDistance);\n    } else {\n      cy.startBatch(); // Go back to stored node ports state\n\n      for (var i = 0; i < nodes.length; i++) {\n        var node = nodes[i];\n        var portsToReturn = param.nodePropMap[node.id()].ports;\n        var orderingsToReturn = param.nodePropMap[node.id()].ordering;\n        node.data('ports', portsToReturn);\n        node.data('portsordering', orderingsToReturn); // Update the cached ports ordering\n      } // Go back to stored edge portsource/porttargets state\n\n\n      for (var i = 0; i < connectedEdges.length; i++) {\n        var edge = connectedEdges[i];\n        var props = param.edgePropMap[edge.id()];\n        edge.data('portsource', props.portsource);\n        edge.data('porttarget', props.porttarget);\n      }\n\n      cy.endBatch();\n    }\n\n    return result;\n  };\n\n  undoRedoActionFunctions.hideExp = function (param) {\n    var expName = param.expName;\n    var fileName = param.fileName;\n    return experimentalDataOverlay.hideExp(fileName, expName);\n  };\n\n  undoRedoActionFunctions.unhideExp = function (param) {\n    var expName = param.expName;\n    var fileName = param.fileName;\n    return experimentalDataOverlay.unhideExp(fileName, expName);\n  };\n\n  undoRedoActionFunctions.hideAll = function () {\n    return experimentalDataOverlay.hideAll();\n  };\n\n  undoRedoActionFunctions.hideAllUndo = function (param) {\n    var invisibleFile = param.invisibleFile;\n    var invisibleExp = param.invisibleExp;\n    return experimentalDataOverlay.hideAllUndo(invisibleFile, invisibleExp);\n  };\n\n  undoRedoActionFunctions.unhideAll = function () {\n    return experimentalDataOverlay.unhideAll();\n  };\n\n  undoRedoActionFunctions.unhideAllUndo = function (param) {\n    var visibleFile = param.visibleFile;\n    var visibleExp = param.visibleExp;\n    return experimentalDataOverlay.unhideFileUndo(visibleFile, visibleExp);\n  };\n\n  undoRedoActionFunctions.hideFile = function (param) {\n    var fileName = param.fileName;\n    return experimentalDataOverlay.hideFile(fileName);\n  };\n\n  undoRedoActionFunctions.hideFileUndo = function (param) {\n    var fileName = param.fileName;\n    var invisible = param.invisible;\n    return experimentalDataOverlay.hideFileUndo(fileName, invisible);\n  };\n\n  undoRedoActionFunctions.unhideFile = function (param) {\n    var fileName = param.fileName;\n    return experimentalDataOverlay.unhideFile(fileName);\n  };\n\n  undoRedoActionFunctions.unhideFileUndo = function (param) {\n    var fileName = param.fileName;\n    var visible = param.visible;\n    return experimentalDataOverlay.unhideFileUndo(fileName, visible);\n  };\n\n  undoRedoActionFunctions.addExp = function (param) {\n    var fileName = param.fileName;\n    var expName = param.expName;\n    var isVisible = param.isVisible;\n    var values = param.values;\n    var groupArray = param.groupArray;\n    return experimentalDataOverlay.addExp(fileName, expName, isVisible, values, groupArray);\n  };\n\n  undoRedoActionFunctions.removeExp = function (param) {\n    var fileName = param.fileName;\n    var expName = param.expName;\n    return experimentalDataOverlay.removeExp(fileName, expName);\n  };\n\n  undoRedoActionFunctions.addFile = function (param) {\n    var fileName = param.fileName;\n    var parsed = param.parsed;\n    var grouped = param.grouped;\n    var visible = param.visible;\n    var visiblef = param.visiblef;\n    return experimentalDataOverlay.addFile(fileName, parsed, visible, grouped, visiblef);\n  };\n\n  undoRedoActionFunctions.removeFile = function (param) {\n    var fileName = param.fileName;\n    return experimentalDataOverlay.removeFile(fileName);\n  };\n\n  undoRedoActionFunctions.removeAll = function (param) {\n    return experimentalDataOverlay.removeAll();\n  };\n\n  undoRedoActionFunctions.restoreAll = function (param) {\n    var parsed = param.parsed;\n    var grouped = param.grouped;\n    var visible = param.visible;\n    var visiblef = param.visiblef;\n    return experimentalDataOverlay.restoreAll(parsed, visible, grouped, visiblef);\n  };\n\n  undoRedoActionFunctions.setCompoundPadding = function (newPadding) {\n    var result = mainUtilities.getCompoundPadding();\n    mainUtilities.setCompoundPadding(newPadding);\n    return result;\n  };\n\n  return undoRedoActionFunctions;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utilities/undo-redo-action-functions-factory.js\n");

/***/ }),

/***/ "./src/utilities/validMapProperties.js":
/*!*********************************************!*\
  !*** ./src/utilities/validMapProperties.js ***!
  \*********************************************/
/***/ ((module) => {

eval("/*\n* Lookup object for valid map properties.\n* In the future it could be combined with other similar properties/functions in a new file.\n*/\nmodule.exports = {\n  compoundPadding: true,\n  extraCompartmentPadding: true,\n  extraComplexPadding: true,\n  arrowScale: true,\n  showComplexName: true,\n  dynamicLabelSize: true,\n  inferNestingOnLoad: true,\n  fitLabelsToNodes: true,\n  fitLabelsToInfoboxes: true,\n  recalculateLayoutOnComplexityManagement: true,\n  rearrangeOnComplexityManagement: true,\n  animateOnDrawingChanges: true,\n  adjustNodeLabelFontSizeAutomatically: true,\n  enablePorts: true,\n  allowCompoundNodeResize: true,\n  mapColorScheme: true,\n  mapColorSchemeStyle: true,\n  mapName: true,\n  mapDescription: true,\n  enableSIFTopologyGrouping: true,\n  experimentDescription: true\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYmdudml6Ly4vc3JjL3V0aWxpdGllcy92YWxpZE1hcFByb3BlcnRpZXMuanM/NGM4YyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiY29tcG91bmRQYWRkaW5nIiwiZXh0cmFDb21wYXJ0bWVudFBhZGRpbmciLCJleHRyYUNvbXBsZXhQYWRkaW5nIiwiYXJyb3dTY2FsZSIsInNob3dDb21wbGV4TmFtZSIsImR5bmFtaWNMYWJlbFNpemUiLCJpbmZlck5lc3RpbmdPbkxvYWQiLCJmaXRMYWJlbHNUb05vZGVzIiwiZml0TGFiZWxzVG9JbmZvYm94ZXMiLCJyZWNhbGN1bGF0ZUxheW91dE9uQ29tcGxleGl0eU1hbmFnZW1lbnQiLCJyZWFycmFuZ2VPbkNvbXBsZXhpdHlNYW5hZ2VtZW50IiwiYW5pbWF0ZU9uRHJhd2luZ0NoYW5nZXMiLCJhZGp1c3ROb2RlTGFiZWxGb250U2l6ZUF1dG9tYXRpY2FsbHkiLCJlbmFibGVQb3J0cyIsImFsbG93Q29tcG91bmROb2RlUmVzaXplIiwibWFwQ29sb3JTY2hlbWUiLCJtYXBDb2xvclNjaGVtZVN0eWxlIiwibWFwTmFtZSIsIm1hcERlc2NyaXB0aW9uIiwiZW5hYmxlU0lGVG9wb2xvZ3lHcm91cGluZyIsImV4cGVyaW1lbnREZXNjcmlwdGlvbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2ZDLEVBQUFBLGVBQWUsRUFBRSxJQURGO0FBRWZDLEVBQUFBLHVCQUF1QixFQUFFLElBRlY7QUFHZkMsRUFBQUEsbUJBQW1CLEVBQUUsSUFITjtBQUlmQyxFQUFBQSxVQUFVLEVBQUUsSUFKRztBQUtmQyxFQUFBQSxlQUFlLEVBQUUsSUFMRjtBQU1mQyxFQUFBQSxnQkFBZ0IsRUFBRSxJQU5IO0FBT2ZDLEVBQUFBLGtCQUFrQixFQUFFLElBUEw7QUFRZkMsRUFBQUEsZ0JBQWdCLEVBQUUsSUFSSDtBQVNmQyxFQUFBQSxvQkFBb0IsRUFBRSxJQVRQO0FBVWZDLEVBQUFBLHVDQUF1QyxFQUFFLElBVjFCO0FBV2ZDLEVBQUFBLCtCQUErQixFQUFFLElBWGxCO0FBWWZDLEVBQUFBLHVCQUF1QixFQUFFLElBWlY7QUFhZkMsRUFBQUEsb0NBQW9DLEVBQUUsSUFidkI7QUFjZkMsRUFBQUEsV0FBVyxFQUFFLElBZEU7QUFlZkMsRUFBQUEsdUJBQXVCLEVBQUUsSUFmVjtBQWdCZkMsRUFBQUEsY0FBYyxFQUFFLElBaEJEO0FBaUJmQyxFQUFBQSxtQkFBbUIsRUFBRSxJQWpCTjtBQWtCZkMsRUFBQUEsT0FBTyxFQUFFLElBbEJNO0FBbUJmQyxFQUFBQSxjQUFjLEVBQUUsSUFuQkQ7QUFvQmZDLEVBQUFBLHlCQUF5QixFQUFFLElBcEJaO0FBcUJmQyxFQUFBQSxxQkFBcUIsRUFBRTtBQXJCUixDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4qIExvb2t1cCBvYmplY3QgZm9yIHZhbGlkIG1hcCBwcm9wZXJ0aWVzLlxuKiBJbiB0aGUgZnV0dXJlIGl0IGNvdWxkIGJlIGNvbWJpbmVkIHdpdGggb3RoZXIgc2ltaWxhciBwcm9wZXJ0aWVzL2Z1bmN0aW9ucyBpbiBhIG5ldyBmaWxlLlxuKi9cbm1vZHVsZS5leHBvcnRzID0ge1xuICBjb21wb3VuZFBhZGRpbmc6IHRydWUsXG4gIGV4dHJhQ29tcGFydG1lbnRQYWRkaW5nOiB0cnVlLFxuICBleHRyYUNvbXBsZXhQYWRkaW5nOiB0cnVlLFxuICBhcnJvd1NjYWxlOiB0cnVlLFxuICBzaG93Q29tcGxleE5hbWU6IHRydWUsXG4gIGR5bmFtaWNMYWJlbFNpemU6IHRydWUsXG4gIGluZmVyTmVzdGluZ09uTG9hZDogdHJ1ZSxcbiAgZml0TGFiZWxzVG9Ob2RlczogdHJ1ZSxcbiAgZml0TGFiZWxzVG9JbmZvYm94ZXM6IHRydWUsXG4gIHJlY2FsY3VsYXRlTGF5b3V0T25Db21wbGV4aXR5TWFuYWdlbWVudDogdHJ1ZSxcbiAgcmVhcnJhbmdlT25Db21wbGV4aXR5TWFuYWdlbWVudDogdHJ1ZSxcbiAgYW5pbWF0ZU9uRHJhd2luZ0NoYW5nZXM6IHRydWUsXG4gIGFkanVzdE5vZGVMYWJlbEZvbnRTaXplQXV0b21hdGljYWxseTogdHJ1ZSxcbiAgZW5hYmxlUG9ydHM6IHRydWUsXG4gIGFsbG93Q29tcG91bmROb2RlUmVzaXplOiB0cnVlLFxuICBtYXBDb2xvclNjaGVtZTogdHJ1ZSxcbiAgbWFwQ29sb3JTY2hlbWVTdHlsZTogdHJ1ZSxcbiAgbWFwTmFtZTogdHJ1ZSxcbiAgbWFwRGVzY3JpcHRpb246IHRydWUsXG4gIGVuYWJsZVNJRlRvcG9sb2d5R3JvdXBpbmc6IHRydWUsXG4gIGV4cGVyaW1lbnREZXNjcmlwdGlvbjogdHJ1ZVxufTtcbiJdLCJmaWxlIjoiLi9zcmMvdXRpbGl0aWVzL3ZhbGlkTWFwUHJvcGVydGllcy5qcy5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/utilities/validMapProperties.js\n");

/***/ }),

/***/ "./package.json":
/*!**********************!*\
  !*** ./package.json ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"name":"sbgnviz","version":"6.0.1","description":"SBGNPD visualization library","main":"sbgnviz.js","licence":"LGPL-3.0","scripts":{"test":"karma start --single-run --browsers ChromeHeadless karma.conf.js","build":"webpack","debug-js":"nodemon -e js --watch src -x \\"npm run build-sbgnviz-js\\""},"repository":{"type":"git","url":"https://github.com/iVis-at-Bilkent/sbgnviz.js.git"},"bugs":{"url":"https://github.com/iVis-at-Bilkent/sbgnviz.js/issues"},"homepage":"https://github.com/iVis-at-Bilkent/sbgnviz.js/","peerDependencies":{"jquery":"^2.2.4","file-saver":"^2.0.2","cytoscape":"iVis-at-Bilkent/cytoscape.js#unstable","tippy.js":"^3.4.0"},"dependencies":{"libsbgn.js":"github:sbgn/libsbgn.js#develop","pretty-data":"^0.40.0","xml2js":"^0.4.17"},"devDependencies":{"@babel/core":"^7.14.3","@babel/preset-env":"^7.14.2","babel-loader":"^8.2.2","chai":"^4.3.4","jquery":"^2.2.4","karma":"^6.3.2","karma-browserify":"^8.0.0","karma-chai":"^0.1.0","karma-chrome-launcher":"^3.1.0","karma-mocha":"^2.0.1","mocha":"^8.3.2","node-polyfill-webpack-plugin":"^1.1.2","webpack":"^5.38.1","webpack-cli":"^4.7.0","webpack-node-externals":"^3.0.0"}}');

/***/ }),

/***/ "console-browserify":
/*!*************************************!*\
  !*** external "console-browserify" ***!
  \*************************************/
/***/ ((module) => {

"use strict";
module.exports = require("console-browserify");;

/***/ }),

/***/ "libsbgn.js":
/*!*****************************!*\
  !*** external "libsbgn.js" ***!
  \*****************************/
/***/ ((module) => {

"use strict";
module.exports = require("libsbgn.js");;

/***/ }),

/***/ "pretty-data":
/*!******************************!*\
  !*** external "pretty-data" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("pretty-data");;

/***/ }),

/***/ "xml2js":
/*!*************************!*\
  !*** external "xml2js" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("xml2js");;

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ 	return __webpack_exports__;
/******/ })()
;
});